#!/bin/bash
#
# Copyright 2020-2023 MindShare Inc.
# Written for the Kubuntu Focus by Michael Mikowski and Erich Eickmeyer
#
set -e

## BEGIN Maintain adduser.local
_thisScriptVers='24.04.1'; # BUMP THIS IF THE FOLLOWING STRING IS UPDATED
_addUserStr="$(cat << 'EOF'
#!/bin/bash
#
# THIS IS A MACHINE GENERATED FILE. PLEASE DO NOT EDIT.
#   IF YOU CHANGE THIS FILE, IT MAY BE OVERWRITTEN BY A
#   FUTURE UPDATE OF THE 'kfocus-settings' PACKAGE.
#   KFOCUS_TEST_ID=3802
#
# Version: <_thisScriptVers_>
#
# kfocus /usr/local/sbin/adduser.local
# This must be run as root.
#
# Purpose: Set default user environment when user added.
# Run by : adduser (invoked by SystemSettings > User Manager)
# Package: kfocus-main.
#
# Exit on unset vars
# Errors (-e) are caught using errFn
#
set -u;

_mainFn () {
  echo "BEGIN ${_baseName}";

  declare _username _uid _gid _home_dir _hostname \
    _rsync_exe _skel_dir _loop_dir _backup_dir _effects_exe \
    _old_prompt_str _new_prompt_str _bashrc_str;

  _username="${1:-}";
  _uid="${2:-}";
  _gid="${3:-}";
  _home_dir="${_rootDir}${4:-}";
  _hostname="$(hostname)";
  _rsync_exe="$(command -v rsync || true)";
  _skel_dir="${_rootDir}/usr/lib/kfocus/skel";

  echo "  Parameters:
    _username : |${_username}|
    _uid      : |${_uid}|
    _gid      : |${_gid}|
    _home_dir : |${_home_dir}|
    _hostname : |${_hostname}|
";

  # Bail when missing data
  if [ -z "${_username}" ] || [ -z "${_uid}" ] \
    || [ -z "${_gid}" ] || [ -z "${_home_dir}" ]; then
    echo "  ${_baseName} ABORT: missing parameters";

    return 1;
  else
    echo "  - OK    : Parameters set";
  fi

  # Create standard directories
  if cd "${_home_dir}"; then
    echo "  - OK    : Making dirs in |${_home_dir}|";
    for _loop_dir in \
      bin       \
      Desktop   \
      Documents \
      Downloads \
      Github    \
      Music     \
      Pictures  \
      Public    \
      Templates \
      Videos; do
      if mkdir -p "${_loop_dir}" && chown -R "${_uid}.${_gid}" "${_loop_dir}"; then
        echo "    - ok    : |${_home_dir}/${_loop_dir}|";
      else
        echo "    - warn  : |${_home_dir}/${_loop_dir}| create or ownership issue";
      fi
    done
  else
    echo "  - ERROR : Could not chdir to ${_home_dir}";
  fi

  # Sync ${_skel_dir}/ to home
  if [ ! -d "${_skel_dir}" ]; then
    echo   "  - ERROR : No skel dir |${_skel_dir}|";
  elif [ -z "${_rsync_exe}" ]; then
    echo   "  - ERROR : Cannot find rsync";
  else
    if "${_rsync_exe}" -azog --chown="${_uid}:${_gid}" \
      "${_skel_dir}/" "${_home_dir}"; then
      echo "  - OK    : Synced skel configs";
    else
      echo "  - WARN  : Could not sync configs";
    fi
  fi

  # Set UX defaults in user .config directory (kwin, kcmfont, ...)
  _effects_exe="${_rootDir}/usr/lib/kfocus/bin/kfocus-reset-effects";
  if [ -x "${_effects_exe}" ]; then
    if su -c "${_effects_exe} -d '${_home_dir}/.config'" "${_username}"; then
      echo "  - OK    : Ran kfocus-reset-effects";
    else
      echo "  - ERROR : Error running kfocus-reset-effects";
    fi
  else
    echo "  - ERROR : Not executable |${_effects_exe}|";
  fi

  # Setup backintime config
  sed -i "s?\$HOME?${_home_dir}?g" \
      "${_home_dir}/.config/backintime/config" || true;
  sed -i "s?\$USER?${_username}?g" \
    "${_home_dir}/.config/backintime/config"   || true;
  sed -i "s?\$HOSTNAME?${_hostname}?g" \
    "${_home_dir}/.config/backintime/config"   || true;

  # Create backintime directory and ownership; skip 'oem', uid 60999
  if [ "${_uid}" != '60999' ]; then
    _backup_dir="${_rootDir}/home/BackInTime/backintime";
    _backup_dir+="/${_hostname}/${_username}";
    if mkdir -p "${_backup_dir}/1"; then
      echo "  - OK    : Created |${_backup_dir}|";
      if chown -R "${_uid}.${_gid}" "${_backup_dir}"; then
        echo "  - OK    : Chown on |${_backup_dir}|";
      else
        echo "  - ERROR : Could not chown on |${_backup_dir}|";
      fi
    else
      echo "  - ERROR : Could not create |${_backup_dir}/1|";
    fi
  fi

  # Install fancy bash prompts
  _bashrc_str="$(cat "${_home_dir}/.bashrc")";
  _old_prompt_str="$(cat <<'EOC'
PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
EOC
  )";
  _new_prompt_str="$(cat <<'EOC'
PS1='\[\033[00;33m\]┌─╴\[\033[00m\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\[\033[00;33m\]\n└─╴\$\[\033[00m\] '
    # If you prefer a default Ubuntu prompt, comment out the above line and
    # uncomment the line below.
    #
    # PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
EOC
  )";
  _bashrc_str="${_bashrc_str//"${_old_prompt_str}"/"${_new_prompt_str}"}";
  _old_prompt_str="$(cat <<'EOC'
PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
EOC
  )";
  _new_prompt_str="$(cat <<'EOC'
PS1='┌─╴${debian_chroot:+($debian_chroot)}\u@\h:\w\n└─╴\$ '
    # If you prefer a default Ubuntu prompt, comment out the above line and
    # uncomment the line below.
    #
    # PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
EOC
  )";
  _bashrc_str="${_bashrc_str//"${_old_prompt_str}"/"${_new_prompt_str}"}";
  cat <<<"${_bashrc_str}" > "${_home_dir}/.bashrc";

  echo ". END ${_baseName}";
}

## BEGIN Set global vars {
_binName="$(readlink -f "$0")"        || exit 0;
_baseName="$(basename "${_binName}")" || exit 0;
_rootDir='';
_debugFile="${_rootDir}/root/.${_baseName}.last.log";
## . END Set global vars }

## BEGIN Run main if script is not sourced {
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    _mainFn "$@" > "${_debugFile}";
fi
## . END Run main if script is not sourced }

# Always exit 0 so user can be created even if this script is broken
exit 0;
EOF
)";

_addUserStr="${_addUserStr/<_thisScriptVers_>/${_thisScriptVers}}";

if ! [ -d /usr/local/sbin ]; then mkdir -p /usr/local/sbin; fi

if [ -e /usr/local/sbin/adduser.local ]; then
  _foundScriptVers=$(grep -Ei '^# Version' /usr/local/sbin/adduser.local \
    | awk -F': ' '{ print "$2" }' );
else
  _foundScriptVers='';
fi

if ! [ -e /usr/local/sbin/adduser.local ] \
  || [ "${_thisScriptVers}" != "${_foundScriptVers:-}" ]; then
  echo "${_addUserStr}" > /usr/local/sbin/adduser.local;
  chmod +x /usr/local/sbin/adduser.local || true;
fi
## END Maintain adduser.local

## BEGIN Run kfocus-reset-effects to populate kfocus/kf5-settings
#    for kglobalshortcutsrc, kcmfont, kdeglobals, kwinrc, and others
#    for consistency.
# 3521, 3802 requires DPI setting it for GTK apps.
#
_effectsExe="$(command -v '/usr/lib/kfocus/bin/kfocus-reset-effects' || true)";
_kf5SettingsDir='/usr/share/kfocus/kf5-settings';
if [ -n "${_effectsExe}" ] && [ -d "${_kf5SettingsDir}" ]; then
  if ! "${_effectsExe}" -d "${_kf5SettingsDir}"; then
    1>&2 echo "warn: Errors populating |${_kf5SettingsDir}|";
  fi
else
  1>&2 echo "warn: Missing |${_effectsExe}| or |${_kf5SettingsDir}|";
fi
## . END Run kfocus-reset-effects to populate kfocus/kf5-settings

## BEGIN Set default SDDM theme
#
_sddmSetFile='/var/lib/kfocus/kfocus_sddm_theme_set'
_sddmConfigFile='/etc/sddm.conf.d/kde_settings.conf'
mkdir -p '/etc/sddm.conf.d';
mkdir -p '/var/lib/kfocus';
if ! [ -e "${_sddmSetFile}" ]; then
  if ! [ -e "${_sddmConfigFile}" ]; then
    echo '[Theme]' > "${_sddmConfigFile}";
    echo 'Current=kfocus' >> "${_sddmConfigFile}";
  else
    # This routine finds the '[Theme]' section of the config file if it
    # exists, modifies the 'Current' entry in it if it exists, creates the
    # 'Current' entry if it doesn't exist, and generates the entire '[Theme]'
    # section if it turns out to be missing entirely.
    readarray -t _sddmConfigLines < <(cat "${_sddmConfigFile}");
    _foundThemeSection='n';

    for (( _sddm_counter = 0; _sddm_counter < "${#_sddmConfigLines[@]}"; \
      _sddm_counter++ )); do
      if [ "${_sddmConfigLines[_sddm_counter]}" = '[Theme]' ]; then
        _foundThemeSection='y';
      elif [[ "${_sddmConfigLines[_sddm_counter]}" =~ ^Current= ]]; then
        if [ "${_foundThemeSection}" = 'y' ]; then
          _sddmConfigLines[_sddm_counter]='Current=kfocus';
          break;
        fi
      elif [[ "${_sddmConfigLines[_sddm_counter]}" =~ ^\[.*\]$ ]]; then
        if [ "${_foundThemeSection}" = 'y' ]; then
          _sddmConfigLines=( "${_sddmConfigLines[@]:0:_sddm_counter}" \
            'Current=kfocus' \
            "${_sddmConfigLines[@]:_sddm_counter:(( ${#_sddmConfigLines[@]} - _sddm_counter ))}" );
          break;
        fi
      fi
    done

    if [ "${_foundThemeSection}" = 'n' ]; then
      _sddmConfigLines+=( '[Theme]' 'Current=kfocus' );
    fi

    IFS=$'\n'; echo "${_sddmConfigLines[*]}" > "${_sddmConfigFile}";
  fi

  touch "${_sddmSetFile}";
fi
## . END Set default SDDM theme

# Tag to allow some debhelper commands to inject relevant code
#DEBHELPER#
