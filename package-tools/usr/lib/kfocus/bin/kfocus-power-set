#!/bin/bash
#
# Copyright 2019-2022 MindShare Inc.
# Written for the Kubuntu Focus by Michael Mikowski and Erich Eickmeyer
#
# Name    : kfocus-power-set
# Purpose : Run-as-root utility to set power profile
# License : GPL v2
# Run By  : kfocus-power, kfocus-pstate
# Spec    : 1756, 2558
# Test    : 00700
#
set -u;

_optionHeader='Profile;Frequency;Governor;Turbo;LEDs'

_optionTable=(
  # _label;up_ratio;down_ratio;gov_key;noturbo_int;kbdled_int
  'High;1;X;performance;0;1'
  'Normal;1;X;powersave;0;1'
  'Studio;0;X;performance;1;1'
  # 'Medium;.5;X;powersave;0;1'
  'Low;X;1;powersave;1;0'
  # 'Frugal;X;.666666666;powersave;1;0'
  'Minimal;X;.5;powersave;1;0'
);

## BEGIN _importCommonFn {
# Imports: _cm2EchoModelStrFn _cm2KdiagExe _cm2WarnStrFn
#
# Run ls-common-symbols.sh to get this list
#
_importCommonFn () {
  declare _lib_file;
  _lib_file="${_baseDir}/lib/common.2.source";
  if [ -r "${_lib_file}" ]; then
    # shellcheck source=../lib/common.2.source
    source "${_lib_file}" || exit 202;
  else
    echo 1>&2 "${_baseName}: ABORT - Cannot source lib |${_lib_file}|";
    exit 202;
  fi
}
## . END _importCommonFn }

_printIntFn () { printf '%.0f' "$*"; }
_printMaxIntFn () {
  declare _hw_base_int _hw_min_int _hw_max_int _up_ratio \
    _down_ratio _calc_str;

  _hw_base_int="$1";
  _hw_min_int="$2";
  _hw_max_int="$3";
  _up_ratio="$4";
  _down_ratio="$5";

  _calc_str='';
  if [ "${_up_ratio}" != 'X' ]; then
    _calc_str="${_hw_base_int}+((${_hw_max_int}-${_hw_base_int})*${_up_ratio})";
  elif [ "${_down_ratio}" != 'X' ]; then
    _calc_str="${_hw_min_int}+((${_hw_base_int}-${_hw_min_int})*${_down_ratio})";
  fi

  if [ -n "${_calc_str}" ]; then
    _printIntFn "$(bc <<< "${_calc_str}")";
  else
    _cm2WarnStrFn 'No up or down ratio given.';
    _printIntFn "${_hw_base_int}";
  fi
}

_setNoTurboFn () {
  declare _int;
  _int="$1";
  if ! [[ "${_int}" =~ ^[01]$ ]]; then
    _cm2WarnStrFn "Invalid noturbo value |${_int}|";
    return 1;
  fi

  if [ -f "${_noTurboFile}" ]; then
    if ! echo "${_int}" > "${_noTurboFile}"; then
      _cm2WarnStrFn "Could not write |${_int}| noturbo file";
      return 1;
    fi
  else
    _cm2WarnStrFn "Missing |${_noTurboFile}|";
  fi
  return 0;
}

_readNoTurboFn () {
  declare _noturbo_int;

  if [ -f "${_noTurboFile}" ]; then
    _noturbo_int="$(cat "${_noTurboFile}")";
    if [[ "${_noturbo_int}" =~ ^[01]$ ]]; then
      echo "${_noturbo_int}";
    else
      echo '';
    fi
  else
    _cm2WarnStrFn "Missing |${_noTurboFile}|";
    echo '';
  fi
}

_setKbdEnableFn () {
  if [ -x "${_kbdColorSetExe}" ]; then
    "${_kbdColorSetExe}" -E "${1:-}";
  fi
}

_scanFn () {
  declare _match_line _mode_key _bit_list _label _up_ratio _down_ratio \
    _gov_key _noturbo_int _kbdled_int _avail_gov_list _proc_count      \
    _proc_idx _set_max_int _hw_freq_list _hw_min_int _hw_max_int       \
    _hw_base_file _hw_base_int _param_list _solve_line _prior_max_int  \
    _psave_key;

  _match_line="${1:-}";
  _mode_key="${2:-}";

  IFS=';' read -r -a _bit_list <<< "${_match_line}";

  if [ "${#_bit_list[@]}" -ne 6 ]; then
    _cm2ErrStrFn "Bad element count |${#_bit_list[@]}|";
    return 1;
  fi

  # _label;up_ratio;down_ratio;gov_key;noturbo_int;kbdled_int
  _label="${_bit_list[0]}";
  _up_ratio="${_bit_list[1]}";
  _down_ratio="${_bit_list[2]}";
  _gov_key="${_bit_list[3]}";
  _noturbo_int="${_bit_list[4]}";
  _kbdled_int="${_bit_list[5]}";
  read -r -a _avail_gov_list < <("${_cpufreqInfoExe}" -g);

  _psave_key='powersave';
  case "${_mode_key}" in
    print|read) true;;
    set)
      _setNoTurboFn "${_noturbo_int}";
      _setKbdEnableFn "${_kbdled_int}";
      # shellcheck disable=SC2076
      if [[ " ${_avail_gov_list[*]} " =~ " ${_altPsaveKey} " ]]; then
        _psave_key="${_altPsaveKey}";
      fi
      ;;
    *) _cm2ErrStrFn "Unsupported mode |${_mode_key}|. Abort.";
      return 1;
      ;;
  esac;

  _proc_count="$("${_nprocExe}")";
  _prior_max_int=0;
  _solve_line='';
  for (( _proc_idx=0; _proc_idx < "${_proc_count}"; _proc_idx++ )); do
    _set_max_int='';
    read -r -a _hw_freq_list \
      < <("${_cpufreqInfoExe}" -c "${_proc_idx}" -l);
    if [ "${#_hw_freq_list[@]}" = 0 ]; then continue; fi
    _hw_min_int="$( _printIntFn "${_hw_freq_list[0]}")";
    _hw_max_int="$( _printIntFn "${_hw_freq_list[1]}")";

    _hw_base_file="${_rootDir}/sys/devices/system/cpu/cpu";
    _hw_base_file+="${_proc_idx}/cpufreq/base_frequency";
    _hw_base_int="$(_printIntFn "$(cat "${_hw_base_file}")")";

    _param_list=(
      "${_hw_base_int}"
      "${_hw_min_int}"
      "${_hw_max_int}"
      "${_up_ratio}"
      "${_down_ratio}"
    );
    _set_max_int="$(_printMaxIntFn "${_param_list[@]}")";

    if [ "${_mode_key}" = 'print' ] || [ "${_mode_key}" = 'read' ]; then
      if [ "${_set_max_int}" -gt "${_prior_max_int}" ]; then
        if [ "${_mode_key}" = 'read' ]; then
          _solve_line="${_label};${_set_max_int};${_gov_key};${_noturbo_int};";
          _solve_line+="${_kbdled_int};";
        else
          _solve_line="${_label};";
          _solve_line+="${_set_max_int:0:1}.${_set_max_int:1:2} GHz;";
          if [ "${_gov_key}" = 'powersave' ]; then
            _solve_line+="psave;";
          else
            _solve_line+="PERF;";
          fi
          if [ "${_noturbo_int}" = '1' ]; then
            _solve_line+="No;";
          else
            _solve_line+="Yes;";
          fi
          if [ "$(_cm2EchoModelStrFn 'has_kb_led')" = 'y' ]; then
            if [ "${_kbdled_int}" = '1' ]; then
              _solve_line+="On;";
            else
              _solve_line+="Off;";
            fi
          fi
        fi
        _prior_max_int="${_set_max_int}"
      fi
    else
      if [ "${_gov_key}" = "powersave" ]; then
        _gov_key="${_psave_key}";
      fi
      if ! "${_cpufreqSetExe}" -c "${_proc_idx}" -g "${_gov_key}"; then
        _cm2WarnStrFn "Bad governor set |${_gov_key}| on core |${_proc_idx}|";
      fi
      if [ -n "${_set_max_int}" ]; then
        if [ "${_set_max_int}" -lt "${_hw_min_int}" ]; then
          _cm2EchoFn "|${_set_max_int}| below minimum |${_hw_min_int}|";
          _cm2WarnStrFn 'Value discarded';
        elif [ "${_set_max_int}" -gt "${_hw_max_int}" ]; then
          _cm2EchoFn "|${_set_max_int}| above maximum |${_hw_max_int}|";
          _cm2WarnStrFn 'Value discarded';
        else
          "${_cpufreqSetExe}" -c "${_proc_idx}" -u "${_set_max_int}";
        fi
      fi
    fi
  done

  if [ "${_mode_key}" = 'print' ] || [ "${_mode_key}" = 'read' ]; then
    echo "${_solve_line}";
  fi
}

_chkInitCpuFn () {
  declare _status_key _success_flag _status_set_list _set_key _proc_count;
  _cm2SetMsgFn 'DEBUG: Set CPU properties for M2 GEN 5';

  # This drop file should clear on every boot
  if [ -f "${_cpuDropFile}" ]; then
    _cm2SucStrFn 'Drop file found.'; _cm2SucFn; return 0;
  fi

  # Skip if not a special hardware config code (m2g5 and m2g5p names)
  if [ "$(_cm2EchoModelStrFn 'config_code')" != 'm2g5' ]; then
    touch "${_cpuDropFile}" || _cm2WarnStrFn 'Could not add drop file';
    _cm2SucFn;
    return 0;
  fi

  _status_set_list=();
  _status_key="$(cat "${_pstateFile}" || true )";
  _success_flag='y';

  # Ensure status key gets changed...
  if [ "${_status_key}" = 'passive' ]; then
    _status_set_list=( 'active' 'passive' );
  else
    _status_set_list=( 'passive' );
  fi

  for _set_key in "${_status_set_list[@]}"; do
    if echo "${_set_key}" > "${_pstateFile}"; then
      _cm2SucStrFn "Set intel_pstate to |${_set_key}|";
      _success_flag='y';
    else
      _cm2WarnStrFn "Could not set pstate to |${_set_key}|";
      _success_flag='n';
    fi
    sleep 1;
  done

  # Set default governor on all cores
  _proc_count="$("${_nprocExe}")";

  for (( _proc_idx=0; _proc_idx < "${_proc_count}"; _proc_idx++ )); do
    if ! "${_cpufreqSetExe}" -c "${_proc_idx}" -g "${_altPsaveKey}"; then
      _cm2WarnStrFn "Governor |${_altPsaveKey}| NOT set for core |${_proc_idx}";
      _success_flag='n';
    fi
  done

  if ! _setNoTurboFn 0; then
    _cm2WarnStrFn 'Could NOT set noturbo flag to |0|';
    _success_flag='n';
  fi

  if [ "${_success_flag}" = 'y' ]; then
    touch "${_cpuDropFile}" || _cm2WarnStrFn 'Could not add drop file';
    _cm2SucFn;
  else
    _cm2WarnFn;
  fi
}

_setModeFn () {
  declare _arg_str _mode_list _opt_line _match_line _key;

  _arg_str="${1:-}";
  _match_line='';
  _mode_list=();

  for _opt_line in "${_optionTable[@]}"; do
    _key="$(echo "${_opt_line}" |cut -f1 -d';')";
    if [ "${_arg_str}" = "${_key}" ]; then
      _match_line="${_opt_line}";
      break;
    fi
    _mode_list+=("${_key}");
  done

  if [ -z "${_match_line}" ]; then
    _cm2ErrStrFn "Mode |${_arg_str}| not supported. Abort.";
    ( IFS='|'; _cm2EchoFn "  ${_mode_list[*]}" );
    return 1;
  fi

  _scanFn "${_match_line}" 'set';
}

_printOptionsFn () {
  declare _print_mode _opt_line _header_line _bit_list _label _frequency \
  _governor _turbo _leds _out_list _mode_key _out_str _title _model_msg;

  _print_mode="${1:-}"
  _header_line='';

  IFS=';' read -r -a _bit_list <<< "${_optionHeader}";
  _label="${_bit_list[0]}";
  _frequency="${_bit_list[1]}";
  _governor="${_bit_list[2]}";
  _turbo="${_bit_list[3]}";
  _leds="${_bit_list[4]}";
  _out_list=();

  if [ "${_print_mode}" = 'x' ]; then
    _header_line="${_label};${_frequency};${_governor};${_turbo};";
    if [ "$(_cm2EchoModelStrFn 'has_kb_led')" = 'y' ]; then
      _header_line+="${_leds};";
    fi
  fi

  for _opt_line in "${_optionTable[@]}"; do
    if [ "${_print_mode}" = 'x' ]; then
      _mode_key='print'; else _mode_key='read';
    fi

    _out_str="$(_scanFn "${_opt_line}" "${_mode_key}" )";
    if [[ "${_out_str:-}" =~ ^[[:space:]]*$ ]]; then
      continue; else _out_list+=( "${_out_str}" );
    fi
  done

  ## TODO 2023-03-27 Add per-cpu messages where appropriate
  if [ "${#_out_list[@]}" = '0' ]; then
    _title='Frequency Profile';
    _model_msg="$(cat << EOH
<b>We do not have a frequency profile for this CPU</b>.
 If you would like to contribute a frequency profile, please
 provide a pull request to kfocus-source on GitHub.com.
EOH
    )";
    echo "title:${_title}|message:${_cm2HtmPStr}${_model_msg}</p>";
    exit 1;
  fi

  if [ -n "${_header_line}" ]; then
    echo "${_header_line}";
  fi
  ( IFS=$'\n'; echo "${_out_list[*]}" );
}
## . END _printOptionsFn }

## BEGIN _readModeFn {
# Returned from _scanFn <line> 'read':
#   _label;_set_max_int;_gov_key;noturbo_int;kbdled_int
# Fields to match from policy:
#   _set_max_int;_gov_key;noturbo_int
#
_readModeFn () {
  declare _noturbo_int _scan_int _gov_key _proc_count _proc_idx _policy_str \
  _policy_list _search_line _opt_line _read_line _bit_list _max_ghz_num;

  _noturbo_int="$(_readNoTurboFn)";
  _scan_int=0;
  _gov_key='';
  _proc_count="$("${_nprocExe}")";

  for (( _proc_idx=0; _proc_idx < "${_proc_count}"; _proc_idx++ )); do
    _policy_str="$("${_cpufreqInfoExe}" -c "${_proc_idx}" -p)";
    if [ -z "${_policy_str}" ]; then continue; fi
    read -r -d '' -a _policy_list <<<"${_policy_str}";
    if [ "${_policy_list[1]}" -gt "${_scan_int}" ]; then
      _scan_int="${_policy_list[1]}";
      _gov_key="${_policy_list[2]}";

      # Hack to match when cpu in passive mode
      _search_line="${_scan_int}";
      if [ "${_gov_key}" = "${_altPsaveKey}" ]; then
        _search_line+=' powersave';
      else
        _search_line+=" ${_gov_key}";
      fi
      if [ -n "${_noturbo_int}" ]; then
        _search_line+=" ${_noturbo_int}";
      fi
    fi
  done

  if [ -z "${_search_line:-}" ]; then return 1; fi

  for _opt_line in "${_optionTable[@]}"; do
    _read_line="$(_scanFn "${_opt_line}" 'read')";
    IFS=';' read -r -d '' -a _bit_list < <(echo -n "${_read_line}");
    if [ "${_bit_list[*]:1:3}" = "${_search_line}" ]; then
      echo "${_bit_list[0]}";
      return 0;
    fi
  done

  # Fallthrough
  _max_ghz_num="$(bc <<< "${_scan_int}*.000001")";
  _max_ghz_num="$(printf '%.2f' "${_max_ghz_num}")";
  echo "Custom (${_max_ghz_num} GHz ${_gov_key})";
}
## . END _readModeFn }

_mainFn () {
  declare _arg_str;
  _arg_str="${1:-}";

  _chkInitCpuFn; # Set CPUFreq for 2023+ CPUs
  case "${_arg_str}" in
    '-p') _printOptionsFn 'p';;
    '-x') _printOptionsFn 'x';;
    '-r') _readModeFn;;
      '') _cm2ErrStrFn 'Argument or flag required'; exit 1;;
       *) _setModeFn "${_arg_str}";
  esac
}

## BEGIN Declare and assign global vars {
declare _binName _binDir _baseDir _baseName _rootDir \
  _cpuDropFile _noTurboFile _pstateFile _altPsaveKey \
  _cpufreqSetExe _cpufreqInfoExe _nprocExe _kbdColorSetExe;

_rootDir='';
_cpuDropFile='/run/kfocus-cpu-init';
_noTurboFile='/sys/devices/system/cpu/intel_pstate/no_turbo';
_pstateFile="/sys/devices/system/cpu/intel_pstate/status";
_altPsaveKey='ondemand'; # schedutil has lower gb5 scores
## . END Declare and assign global vars }

## BEGIN Run main if script is not sourced {
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(readlink -f "$0")"        || exit 101;
  _binDir="$(dirname "${_binName}")"    || exit 101;
  _baseDir="$(dirname "${_binDir}")"    || exit 101;
  _baseName="$(basename "${_binName}")" || exit 101;

  # Import libs and assign more global vars
  _importCommonFn;
  _kbdColorSetExe="${_binDir}/kfocus-kb-color-set";
  _assignList=(
    '_cpufreqSetExe|cpufreq-set'
    '_cpufreqInfoExe|cpufreq-info'
    '_nprocExe|nproc'
  );
  if ! _cm2AssignExeVarsFn "${_assignList[@]}"; then
    _cm2WarnStrFn 'ABORT: Required commands not found';
    exit 1;
  fi

  _mainFn "$@"; # >> /tmp/kfocus-power-set-debug.txt 2>&1
fi
## . END Run main if script is not sourced }
