#!/bin/bash
#
# Copyright 2020-2022 MindShare Inc.
# Written for the Kubuntu Focus by Michael Mikowski and Erich Eickmeyer
#
# Name    : kfocus-kb-color-set
# Purpose : Run-as-root utility to set keyboard LEDs
# License : GPL v2
# Run By  : kfocus-kb-color
# Spec    : 615
#
set -u;

## BEGIN _importCommonFn {
# Summary   : _importCommonFn
# Purpose   : Load common routines, prefer relative dir
# Example   : _importCommonFn;
# Arguments : none
# Globals   : Package vars _baseDir _baseName
# Outputs   : none
# Returns   : none
#
_importCommonFn () {
  declare _lib_list _is_loaded _lib_file;
  _lib_list=(
    "${_baseDir}/lib/common.2.source"
    '/usr/lib/kfocus/lib/common.2.source'
  );
  _is_loaded='n';
  for _lib_file in "${_lib_list[@]}"; do
    if [ -r "${_lib_file}" ]; then
      # shellcheck source=/usr/lib/kfocus/lib/common.2.source
      if source "${_lib_file}"; then
        _is_loaded='y';
        break;
      fi
    fi
  done

  if [ "${_is_loaded}" = 'n' ]; then
    echo 1>&2 "${_baseName}: ABORT - Cannot source common lib";
    exit 202;
  fi
}
## . END _importCommonFn }

## BEGIN _readFileIteListFn {
_readFileIteListFn () {
  declare _str;
  _str="$(head -n1 "${_iteStateFile}")";
  IFS=';' read -r -a _iteStateList <<< "${_str}"
}
## . END _readFileIteListFn }

## BEGIN _writeFileIteListFn {
_writeFileIteListFn () {
  declare _bright_str _hex_str;
  _bright_str="$1";
  _hex_str="$2";
  echo -n "${_bright_str};${_hex_str}" > "${_iteStateFile}";
}
## . END _writeFileIteListFn }

## BEGIN _setStdColorFn {
_setStdColorFn () {
  declare _state_str;
  if [ "$#" -lt 2 ]; then exit 1; fi
  if ! [ -d "${_stdKeyDir}" ]; then exit 1; fi

  _state_str='options tuxedo-keyboard mode=0 ';
  _state_str+="brightness=$1 color_left=0x$2 ";
  _state_str+="color_center=0x$2 color_right=0x$2" > "${_stdModprobeFile}";

  echo "$1"   | tee ${_stdKeyDir}/brightness   > /dev/null
  echo "0x$2" | tee ${_stdKeyDir}/color_left   > /dev/null
  echo "0x$2" | tee ${_stdKeyDir}/color_center > /dev/null
  echo "0x$2" | tee ${_stdKeyDir}/color_right  > /dev/null
}
## . END _setStdColorFn }

## == BEGIN functions run by mainFn {
_setEnableFn () {
  declare _set_str;
  _set_str="$1";
  if ! [[ "${_set_str}" =~ ^[01]$ ]]; then
    _cm2WarnStrFn 'Invalid set string';
    return 201;
  fi

    echo "WTF? ${_set_str} | ${_modelCode}";
  if [ "${_modelCode}" = 'm2g5p' ]; then
    if [ "${_set_str}" = '1' ] ; then
      _set_str='255';
    fi
    echo "${_set_str}" > "${_iteBrightFile}";
  else
    echo "${_set_str}" > "${_stdEnableFile}";
  fi
}

_restoreColorFn () {
  declare _dir;
  _readFileIteListFn;

  if ! [ "${#_iteStateList[@]}" = 2 ]; then
    return 1;
  fi

  while read -r _dir; do
    if [ -f "${_dir}/multi_intensity" ]; then
      echo '0 32 32' > "${_dir}/multi_intensity";
    fi
  done < <(find "${_iteRgbDir}" -maxdepth 1 -mindepth 1 -type l \
    | grep 'rgb:kbd_backlight'
  );

  if [ -f "${_iteBrightFile}" ]; then
    echo "${_iteStateList[0]}" > "${_iteBrightFile}";
  fi
}

_setColorFn () {
  declare _set_str _bit_list _bright_str _hex_str;

  _set_str="$1";
  IFS=';' read -r -a _bit_list<<<"${_set_str}";

  _bright_str="${_bit_list[0]}";
  _hex_str="${_bit_list[1]}";

  if [ "${_modelCode}" = 'm2g5p' ]; then
    _setRgbColorFn "${_bright_str}";
  else
    _setStdColorFn "${_bright_str}" "${_hex_str}";
  fi
}
_toggleEnableFn () { true; }
## == . END functions run by mainFn {

## BEGIN _mainFn {
# Summary   : _mainFn -r | [-s|-x] <brightness> <color>
# Purpose   : Main dispatch function.
# Examples  :
#   -s (0-255);(hex-rgb) => Set brightness and color
#   -e 0                 => Enable keyboard OFF
#   -e 1                 => Enable keyboard ON
#   -t                   => toggle keyboard OFF/ON
#   -r                   => Restore values from
# Arguments : Options take values
#   -s <0-255-brightness> <hex-rgb-color> # Set brightness and color
#   -e [0|1] # Toggle Keyboard off | on
#   -r # Restore values from _kbColorFile
# Globals   : OPTIND is reset to local for arg processing
# Outputs   : Prints diagnostics to stderr
# Returns   : 0 on success; no-zero on failure
#
_mainFn () {
  declare _opt_str;
  local OPTIND=1;
  while getopts ':s:e:rt' _opt_str; do
    case "${_opt_str}" in
      e) _setEnableFn "${OPTARG}"; shift;;
      r) _restoreColorFn;;
      s) _setColorFn  "${OPTARG}"; shift;;
      t) _toggleEnableFn;;
      *) _cm2EchoFn "Option ${_opt_str} not supported";;
    esac
  done
}
## . END _mainFn }

## BEGIN Declare and set global vars {
declare _binName _binDir _baseDir _baseName \
  _stdKeyDir _stdEnableFile _stdModprobeFile \
  _userId _iteStateFile _iteBrightFile _iteSetList \
  _modelCode;

_iteStateList=();

_stdKeyDir='/sys/devices/platform/tuxedo_keyboard';
_stdEnableFile='/sys/devices/platform/tuxedo_keyboard/state';
_stdModprobeFile='/etc/modprobe.d/tuxedo_keyboard.conf';
_iteStateFile='/var/lib/kfocus/kbd_color_state';
_iteBrightFile='/sys/class/leds/rgb:kbd_backlight/brightness';
_iteRgbDir='/sys/class/leds';
## . END set global vars }

## BEGIN Run main if script is not sourced {
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(  readlink -f "$0"       )" || exit 101;
  _binDir="$(   dirname  "${_binName}" )" || exit 101;
  _baseDir="$(  dirname  "${_binDir}"  )" || exit 101;
  _baseName="$( basename "${_binName}" )" || exit 101;
  _importCommonFn || exit 101;
  _modelCode="$(_cm2EchoModelStrFn 'code')";
  _mainFn "$@";
fi
## . END Run main if script is not sourced }

