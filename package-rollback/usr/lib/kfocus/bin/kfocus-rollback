#!/bin/bash
#
# Copyright 2019-2024 MindShare Inc.
#
# Written for the Kubuntu Focus by M. Mikowski and A. Rainbolt.
#
# Name     : kfocus-rollback
# Summary  : kfocus-rollback
# Purpose  : Provides a UI for restoring BTRFS snapshots
# Example  : kfocus-snapshot
# License  : GPLv2
# Run By   : Users
# Spec     : 4013
#
set -u;

## BEGIN _importCommonFn {
# Summary   : _importCommonFn
# Purpose   : Load common routines, prefer relative dir
# Example   : _importCommonFn;
# Arguments : none
# Globals   : Package vars _baseDir _baseName
# Outputs   : none
# Returns   : none
#
_importCommonFn () {
  declare _lib_list _is_loaded _lib_file;
  _lib_list=(
    "${_baseDir}/lib/common.2.source"
    "${_binDir}/common.2.source"
    '/usr/lib/kfocus/lib/common.2.source'
  );
  _is_loaded='n';
  for _lib_file in "${_lib_list[@]}"; do
    if [ -r "${_lib_file}" ]; then
      # shellcheck source=/usr/lib/kfocus/lib/common.2.source
      if source "${_lib_file}"; then
        _is_loaded='y';
        break;
      fi
    fi
  done

  if [ "${_is_loaded}" = 'n' ]; then
    echo 1>&2 "${_baseName}: ABORT - Cannot source common lib";
    exit 202;
  fi
}
## . END _importCommonFn }

_getBtrfsStatusFn () {
  "${_snapshotSetExe}" 'getBtrfsStatus';
}

_selectiveRestoreSnapshotFn () {
  declare _snapshot_id;

  _snapshot_id="${1:-}";
  if [ -z "${_snapshot_id}" ]; then
    _cm2WarnStrFn 'No snapshot ID provided to selectively restore!';
    return 1;
  fi

  "${_dolphinExe}" --split \
    "admin:///btrfs_main/@kfocus-rollback-snapshots/${_snapshot_id}/" \
    'admin:///';
}

_getSnapshotListStrFn () {
   find '/btrfs_main/@kfocus-rollback-snapshots' -maxdepth 1 \
     | cut -d'@' -f3 \
     | sort -n -r \
     | sed '/^$/d; s/^/@/;';
}

## BEGIN _makeSnapshotDispIdFn {
#
_makeSnapshotDispIdFn () {
  declare _snapshot_id _snapshot_reason_loc _snapshot_reason_raw \
    _snapshot_reason _snapshot_datetime _snapshot_disp_id;

  _snapshot_id="${1:-}";
  _snapshot_reason_loc="${2:-}";

  if [ -z "${_snapshot_id}" ] || [ -z "${_snapshot_reason_loc}" ]; then
    _cm2WarnStrFn 'Invalid arguments, cannot generate snapshot display ID';
    return 1;
  fi

  _snapshot_reason_raw="$(cat "${_snapshot_reason_loc}")";
  case "${_snapshot_reason_raw}" in
    'Apt')
      _snapshot_reason='Before Package Change';
      ;;
    'Timed')
      _snapshot_reason='System Schedule';
      ;;
    'Pre-Rollback')
      _snapshot_reason='Pre-Rollback';
      ;;
    *) # must be user-generated
      _snapshot_reason="Created by ${_snapshot_reason_raw}";
      ;;
  esac

  _snapshot_datetime="$(date -d "${_snapshot_id}" '+%a %F %H:%M')";

  _snapshot_disp_id="${_snapshot_datetime} | ${_snapshot_reason}";
  echo "${_snapshot_disp_id}";
}
## . END _makeSnapshotDispIdFn }

_chooseSnapshotFn () {
  declare _snapshot_list_str _snapshot_list _snapshot_disp_list _radio_list \
    _reason_loc _snapshot_reason _snapshot_datetime _snapshot_idx \
    _answer _select_str;

  _snapshot_list_str="$(_getSnapshotListStrFn)";
  readarray -t _snapshot_list <<< "${_snapshot_list_str}";
  _snapshot_disp_list=();
  _radio_list=();
  _select_str='on';

  for (( _snapshot_idx=0; _snapshot_idx < ${#_snapshot_list[@]}; \
    _snapshot_idx++ )); do
    _reason_loc="/btrfs_main/@kfocus-rollback-snapshots/${_snapshot_list[_snapshot_idx]}/var/lib/kfocus/kfocus_rollback_snapshot_reason";
    _snapshot_disp_list[_snapshot_idx]="$(
      _makeSnapshotDispIdFn "${_snapshot_list[_snapshot_idx]}" \
        "${_reason_loc}";
    )";
    _radio_list+=( "${_snapshot_idx}" \
      "${_snapshot_disp_list[_snapshot_idx]}" "${_select_str}" );
    
    if [ "${_select_str}" = 'on' ]; then
      _select_str='off';
    fi
  done

  _answer="$(_cm2PromptUserFn "${_chooseSnapshotMsg}" "${_winTitle}" 'r' \
    "${_radio_list[@]}")";

  if [ -z "${_answer}" ]; then
    return;
  fi

  echo "${_snapshot_list[_answer]}";
  echo "${_snapshot_disp_list[_answer]}";
  return;
}

_focusRxRollbackFn () {
  "${_escExe}" "${_snapshotSetExe}" 'focusRxRollback' "${1:-}";
}

_handleRestoreExitIntFn () {
  declare _exit_int;

  _exit_int="${1:-}";

  if [ "${_exit_int}" = "${_NOTICE}" ]; then
    systemctl reboot -i;
  elif [ "${_exit_int}" = "${_ERR}" ]; then
    _cm2PromptUserFn "${_restoreFailedMsg}" "${_winTitle}";
    exit "${_ERR}";
  # 127 = auth failure, this is what pkexec spits out if you click 'Cancel' on
  # the auth window or provide a wrong password too many times.
  elif [ "${_exit_int}" = '127' ]; then
    _cm2PromptUserFn "${_restoreCancelledMsg}" "${_winTitle}";
    exit "${_NOTICE}";
  else
    _cm2PromptUserFn "${_criticalErrorMsg}" "${_winTitle}" 'e';
    exit "${_exit_int}";
  fi
}

## BEGIN _mainFn {
#
_mainFn () {
  declare _btrfs_status_str _snapshot_id _restore_mode _exit_int \
    _working_subvol_loc _working_boot_subvol_loc _arg;

  _working_subvol_loc='/btrfs_main/@kfocus-rollback-working';
  _working_boot_subvol_loc='/btrfs_boot/@kfocus-rollback-working-boot';

  # This function will exit with LOCK if the lockfile cannot be grabbed, so we
  # wait until the lock is released before showing the UI (since we have to in
  # order to get the state of the system).
  while true; do
    _btrfs_status_str="$(_getBtrfsStatusFn)"
    _exit_int="$?";
    
    # Override false positive due to complex exit code handling
    # shellcheck disable=SC2181
    if [ "${_exit_int}" = "${_LOCK}" ]; then
      sleep 1;
    elif [ "${_exit_int}" = "${_NOTICE}" ]; then
      break;
    else
      exit "${_exit_int}";
    fi
  done

  if [ "${_btrfs_status_str}" != 'SUPPORTED, SET UP' ]; then
    _cm2PromptUserFn "${_systemUnsupportedMsg}" "${_winTitle}";
    exit "${_NOTICE}";
  fi

  if mount | grep 'btrfs' | grep -q '@kfocus-rollback-working' \
    || mount | grep 'btrfs' | grep -q '@kfocus-rollback-working-boot'; then
    _cm2PromptUserFn "${_restoreIncompleteMsg}" "${_winTitle}" 's';
    exit "${_NOTICE}";
  fi

  if [ -e "${_working_subvol_loc}" ]; then
    _strangeSubvolsMsg="${_strangeSubvolsMsg//XXX_SUBVOL_NAME_XXX/${_working_subvol_loc}}";
    _cm2PromptUserFn "${_strangeSubvolsMsg}" "${_winTitle}" 's';
    exit "${_ERR}"
  elif [ -e "${_working_boot_subvol_loc}" ]; then
    _strangeSubvolsMsg="${_strangeSubvolsMsg//XXX_SUBVOL_NAME_XXX/${_working_boot_subvol_loc}}";
    _cm2PromptUserFn "${_strangeSubvolsMsg}" "${_winTitle}" 's';
    exit "${_ERR}"
  fi

  _arg="${1:-}";
  if [ "${_arg}" = 'afterRestore' ]; then
    _snapshot_id="$(_getSnapshotListStrFn | head -n1)";
    _snapshot_disp_id="$(_makeSnapshotDispIdFn "${_snapshot_id}" \
      "/btrfs_main/@kfocus-rollback-snapshots/${_snapshot_id}/var/lib/kfocus/kfocus_rollback_snapshot_reason")";
    _rollbackSuccessfulMsg="${_rollbackSuccessfulMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
    if [ "$(_cm2PromptUserFn "${_rollbackSuccessfulMsg}" \
      "FocusRx: System Rollback" 'a')" = 'y' ]; then
      _selectiveRestoreSnapshotFn "${_snapshot_id}";
      exit "${_NOTICE}";
    else
      exit "${_NOTICE}";
    fi
  fi

  if [ -z "$(ls '/btrfs_main/@kfocus-rollback-snapshots')" ]; then
    _cm2PromptUserFn "${_noSnapshotsFoundMsg}" "${_winTitle}";
    exit "${_NOTICE}";
  fi

  IFS=$'\n'; read -r -d '' _snapshot_id _snapshot_disp_id \
    < <(_chooseSnapshotFn);

  if [ -z "${_snapshot_id}" ]; then
    _cm2PromptUserFn "${_restoreCancelledMsg}" "${_winTitle}";
    exit "${_NOTICE}";
  fi
  
  _chooseRestoreTypeMsg="${_chooseRestoreTypeMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
  _restore_mode="$(_cm2PromptUserFn "${_chooseRestoreTypeMsg}" \
    "${_winTitle}" 'r' 'totalRestore' \
    'Restore the Entire Snapshot (recommended)' 'on' 'selectiveRestore' \
    'Restore Individual Files (ADVANCED)' 'off')";

  if [ -z "${_restore_mode}" ]; then
    _cm2PromptUserFn "${_restoreCancelledMsg}" "${_winTitle}";
    exit "${_NOTICE}";
  fi

  if [ "${_restore_mode}" = 'totalRestore' ]; then
    _doTotalRestoreMsg="${_doTotalRestoreMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
    if [ "$(_cm2PromptUserFn "${_doTotalRestoreMsg}" "${_winTitle}" \
      'o')" = 'y' ]; then
      _focusRxRollbackFn "${_snapshot_id}";
      _handleRestoreExitIntFn "$?";
    else
      _cm2PromptUserFn "${_restoreCancelledMsg}" "${_winTitle}";
      exit "${_NOTICE}";
    fi
  elif [ "${_restore_mode}" = 'selectiveRestore' ]; then
    _doSelectiveRestoreMsg="${_doSelectiveRestoreMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
    if [ "$(_cm2PromptUserFn "${_doSelectiveRestoreMsg}" "${_winTitle}" \
      'o')" = 'y' ]; then
      _selectiveRestoreSnapshotFn "${_snapshot_id}";
    else
      _cm2PromptUserFn "${_restoreCancelledMsg}" "${_winTitle}";
      exit "${_NOTICE}";
    fi
  fi

  exit "${_NOTICE}";
}
## . END _mainFn }

## BEGIN Declare and assign global vars {
declare _binName _binDir _baseName _baseDir _assignList _kdiagExe \
  _whiptailExe _snapshotSetExe _dolphinExe _escExe _winTitle _browThickStr \
  _erowStr _tableStr _systemUnsupportedMsg _restoreIncompleteMsg \
  _noSnapshotsFoundMsg _strangeSubvolsMsg _chooseSnapshotMsg \
  _chooseRestoreTypeMsg _doSelectiveRestoreMsg _doTotalRestoreMsg \
  _restoreFailedMsg _criticalErrorMsg _restoreCancelledMsg \
  _rollbackSuccessfulMsg _NOTICE _ERR \
  _CRIT _ALERT _EMERG _LOCK;
## . END Declare and assign global vars }

## BEGIN Run mainFn when script is NOT sourced {
#
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(  readlink -f "$0"       )" || exit 101;
  _binDir="$(   dirname  "${_binName}" )" || exit 101;
  _baseDir="$(  dirname  "${_binDir}"  )" || exit 101;
  _baseName="$( basename "${_binName}" )" || exit 101;

  _assignList=(
    '_kdiagExe|/usr/bin/kdialog'
    '_whiptailExe|/usr/bin/whiptail'
    "_snapshotSetExe|${_binDir}/kfocus-rollback-set"
    '_dolphinExe|/usr/bin/dolphin'
  );

  # Import libs and assign more global vars
  _importCommonFn;
  if ! _cm2AssignExeVarsFn "${_assignList[@]}"; then
    _cm2ErrStrFn 'Could not assign variable';
    exit 1;
  fi

  _escExe="$(_cm2GetEscExeFn)" || exit;

  # Set UI messages
  _winTitle='System Rollback';
  _browThickStr='<tr><td style="padding:8px 32px 8px 0">';
  _browThinStr='<tr><td style="padding:8px 0 8px 0">';
  _erowStr='</td></tr>';
  _tableStr='<table style="width:100%;margin-right:32px">';

  _systemUnsupportedMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browThickStr}<h3 style="color:#f7941d">System Unsupported</h3>${_erowStr}

${_browThickStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#rollback"
  >https://kfocus.org/wf/tools#rollback</a>${_erowStr}

${_browThickStr}This system does not appear to support snapshotting<br>
and rollback. Please see
<a style="color:#1d99f3" href="https://kfocus.org/wf/recovery"
>https://kfocus.org/wf/recovery</a><br>
for other recovery steps you can take.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _restoreIncompleteMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browThickStr}<h3 style="color:#f7941d">Restore Incomplete</h3>${_erowStr}

${_browThickStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#rollback"
  >https://kfocus.org/wf/tools#rollback</a>${_erowStr}

${_browThickStr}You appear to have restored a snapshot, but have<br>
not yet rebooted after this. Please reboot to<br>
finalize the restore process. If this does not fix<br>
your system, you can attempt another rollback.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _noSnapshotsFoundMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browThickStr}<h3 style="color:#f7941d">No Snapshots Found</h3>${_erowStr}

${_browThickStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#rollback"
  >https://kfocus.org/wf/tools#rollback</a>${_erowStr}

${_browThickStr}There do not appear to be any snapshots<br>
available to roll back to. Please see<br>
<a style="color:#1d99f3" href="https://kfocus.org/wf/recovery"
>https://kfocus.org/wf/recovery</a>
for other<br>
recovery steps you can take.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _strangeSubvolsMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browThickStr}<h3 style="color:#f7941d">Strange BTRFS Subvols</h3>${_erowStr}

${_browThickStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#rollback"
  >https://kfocus.org/wf/tools#rollback</a>${_erowStr}

${_browThickStr}The BTRFS subvolume at<br>
<code>XXX_SUBVOL_NAME_XXX</code><br>
should not exist, but does. The restore operation<br>
cannot proceed with this subvolume present.${_erowStr}

${_browThickStr}Please ensure this subvolume does not contain any<br>
important data, then remove it with<br>
<code>sudo btrfs subvolume delete</code>.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _chooseSnapshotMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browThinStr}<h3 style="color:#f7941d">System Rollback (1 of 3)</h3>${_erowStr}

${_browThinStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#rollback"
  >https://kfocus.org/wf/tools#rollback</a>${_erowStr}

${_browThinStr}
Use this tool to restore all or some files in a snapshot<br>
to the root filesystem. <b style="color:#f7941d">This tool will NOT
restore files<br>
in the /home filesystem.</b> For that, click "Cancel" and<br>
use the "Back In Time" icon found next to the system<br>
tray.${_erowStr}

${_browThinStr}Restoring the root filesystem is most useful after a<br>
software install, purge, or upgrade has caused issues.<br>
Select the desired snapshot and click OK to get
started.<br>${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _chooseRestoreTypeMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browThinStr}<h3 style="color:#f7941d">System Rollback (2 of 3)</h3>${_erowStr}

${_browThinStr}You have selected the following snapshot to restore:${_erowStr}

${_browThinStr}<b style="color:#f7941d"
>"XXX_SNAPSHOT_NAME_XXX"</b>${_erowStr}

${_browThinStr}
We recommend you "Restore the Entire Snapshot" to<br>
avoid data consistency problems. As with any system<br>
maintenance, it is best practice to back up any critical<br>
data first. See <a style="color:#1d99f3"
href="https://kfocus.org/wf/backup"
>https://kfocus.org/wf/backup</a><br>
for guidance.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _doSelectiveRestoreMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browThickStr}<h3 style="color:#f7941d">System Rollback (3 of 3)</h3>${_erowStr}

${_browThickStr}You can now selectively restore files from this
snapshot:${_erowStr}

${_browThickStr}<b style="color:#f7941d"
>"XXX_SNAPSHOT_NAME_XXX"</b>${_erowStr}

${_browThickStr}<b style="color:#da4453"
>WARNING: PROCEED WITH CAUTION!</b> You will be restoring<br>
system files as root!${_erowStr}

${_browThickStr}Click on OK below to open a file manager with the snapshot<br>
on the LEFT and the current root filesystem on the RIGHT.<br>
When you are done copying files and directories, simply<br>
close the file manager.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _doTotalRestoreMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browThickStr}<h3 style="color:#f7941d">System Rollback (3 of 3)</h3>${_erowStr}

${_browThickStr}The following snapshot is now ready to be restored:${_erowStr}

${_browThickStr}<b style="color:#f7941d"
>"XXX_SNAPSHOT_NAME_XXX"</b>${_erowStr}

${_browThickStr}<b style="color:#da4453"
>This will immediately reboot the system!</b> Please save<br>
any open work. Click OK to snapshot your current<br>
root filesystem, finalize the restore, and reboot.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _restoreFailedMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browThickStr}<h3 style="color:#f7941d">Restore Failed</h3>${_erowStr}

${_browThickStr}Something went wrong and FocusRx was unable to<br>
restore the system to an earlier state. No changes<br>
have been made.${_erowStr}

${_browThickStr}Please try to restore again. If this fails, see<br>
<a style="color:#1d99f3" href="https://kfocus.org/wf/recovery"
>https://kfocus.org/wf/recovery</a>
for other recovery<br>
options. You are encouraged to contact technical<br>
support if this issue is persistent.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _criticalErrorMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browThickStr}<h3 style="color:#f7941d">Critical Error</h3>${_erowStr}

${_browThickStr}FocusRx was interrupted while attempting to<br>
restore your system. This incident may be the<br>
result of failing hardware or a software conflict.${_erowStr}

${_browThickStr}<b>Please do NOT reboot. Back up your data as<br>
soon as possible.</b> Failure to do so may result in<br>
data loss. See<br>
<a style="color:#1d99f3"
href="https://kfocus.org/wf/backup#bkm_take_a_snapshot"
>https://kfocus.org/wf/backup#bkm_take_a_snapshot</a><br>
for instructions on how to safeguard your data.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _restoreCancelledMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browThickStr}<h3 style="color:#f7941d">Restore Cancelled</h3>${_erowStr}

${_browThickStr}Restore operation cancelled. No changes have been<br>
made to the system.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _rollbackSuccessfulMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browThickStr}<h3 style="color:#f7941d">Rollback Successful</h3>${_erowStr} 

${_browThickStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#rollback"
  >https://kfocus.org/wf/tools#rollback</a>${_erowStr}

${_browThickStr}Files from the snapshot${_erowStr}

${_browThickStr}<b style="color:#f7941d"
>"XXX_SNAPSHOT_NAME_XXX"</b>${_erowStr}

${_browThickStr}have been restored to the root filesystem.${_erowStr}

${_browThickStr}If you desire, you may compare to the files<br>
as they existed prior to the rollback. The<br>
snapshot will appear on the LEFT, while the<br>
current root filesystem will be shown on the<br>
RIGHT. This is advanced, and is not<br>
recommended for most users. However, it<br>
can be useful for restoring database files,<br>
for instance.${_erowStr}

${_browThickStr}Would you like to compare now?${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  # Set meaningful names for error codes
  _NOTICE='0';
  _ERR='1';
  _CRIT='2';
  _ALERT='3';
  _EMERG='4';
  _LOCK='20';

  # Make sure TTY mode looks nice
  _cm2SetCliTypeFn 'whiptail';

  _mainFn "$@";
fi
## . END Run mainFn when script is NOT sourced }
