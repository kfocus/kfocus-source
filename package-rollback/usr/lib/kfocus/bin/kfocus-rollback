#!/bin/bash
#
# Copyright 2019-2024 MindShare Inc.
#
# Written for the Kubuntu Focus by M. Mikowski and A. Rainbolt.
#
# Name     : kfocus-rollback
# Summary  : kfocus-rollback
# Purpose  : Provides a UI for restoring BTRFS snapshots
# Example  : kfocus-snapshot
# License  : GPLv2
# Run By   : Users
# Spec     : 4013
#
set -u;

_stderrFn () {
  2>&1 echo "${_baseName} $*";
}
## BEGIN _loadLibTableFn {
# Summary : _loadLibTableFn <lib_str1> <lib_str2> ...
# Example : _loadLibTableFn "lib01:/usr/lib/lib01" "lib02";
# Purpose :
#   Import table of libs, one arg per lib.
#     * Each arg can have alternates delimited by colons ':'
#     * Fails if all alternates for a lib fails.
#     * Starting lib string '#:' means the following libs are optional.
#     * Diagnostics are sent to STDERR.
#     * Libs without a directory use ${_binDir} as the path
#
_loadLibTableFn () {
  declare _lib_table _lib_list _lib_line _raw_path _lib_file _is_loaded;
  _lib_table=("$@");

  ## Begin: Iterate over lib lines.
  for _lib_line in "${_lib_table[@]}"; do
    # Split line into alternates.
    #   Note: Echo removes trailing newline.
    readarray -d: -t _lib_list < <(echo -n "${_lib_line}");
    _is_loaded='n';

    ## Begin: Iterate over alternates.
    for _raw_path in "${_lib_list[@]}"; do
      [ -z "$(dirname "${_raw_path}")" ] \
        && _lib_file="${_binDir}/${_raw_path}" \
        || _lib_file="${_raw_path}";

      # shellcheck disable=SC1090
      if ! [ -r "${_lib_file}" ]; then
        _stderrFn "warn: source |${_lib_file}| not readable.";
      elif source "${_lib_file}"; then
        _is_loaded='y';
        break;
      else
        _stderrFn "${_baseName} Error: source |${_lib_file}| is non-zero.";
        return 1;
      fi
    done
    ## . End: Iterate over alternates.

    if [ "${_is_loaded}" != 'y' ]; then
      _stderrFn "${_baseName} error: no lib loaded";
      return 1;
    fi
  done
  ## . End: Iterate over lib lines.

  return;
}
## . END _loadLibTableFn }

_selectiveRestoreSnapshotFn () {
  declare _snapshot_id;

  _snapshot_id="${1:-}";
  if [ -z "${_snapshot_id}" ]; then
    _cm2WarnStrFn 'No snapshot ID provided to selectively restore!';
    return 1;
  fi

  "${_dolphinExe}" --split \
    "admin:///btrfs_main/@kfocus-rollback-snapshots/${_snapshot_id}/" \
    'admin:///';
}

_chooseSnapshotFn () {
  declare _choose_msg _snapshot_list_str _snapshot_list _snapshot_disp_list \
    _radio_list _snapshot_idx _answer;

  _choose_msg="${1:-}";
  if [ -z "${_choose_msg}" ]; then
    _cm2WarnStrFn 'No message provided to display in the chooser!';
    return 1;
  fi

  _snapshot_list_str="$(_rb2GetSnapshotListStrFn)";
  readarray -t _snapshot_list <<< "${_snapshot_list_str}";
  _snapshot_disp_list=();
  _radio_list=();

  for (( _snapshot_idx=0; _snapshot_idx < ${#_snapshot_list[@]}; \
    _snapshot_idx++ )); do
    _snapshot_disp_list[_snapshot_idx]="$(
      _rb2MakeSnapshotDispIdFn "${_snapshot_list[_snapshot_idx]}";
    )";
    _radio_list+=( "${_snapshot_idx}" \
      "${_snapshot_disp_list[_snapshot_idx]}" 'off' );
  done

  _answer="$(_cm2PromptUserFn "${_choose_msg}" "${_winTitle}" 'd' \
    "${_radio_list[@]}")";

  if [ -z "${_answer}" ]; then
    return;
  fi

  echo "${_snapshot_list[_answer]}";
  echo "${_snapshot_disp_list[_answer]}";
  return;
}

_handleOperationExitIntFn () {
  declare _op_type _exit_int _snapshot_id _snapshot_disp_id;

  _op_type="${1:-}";
  _exit_int="${2:-}";
  _snapshot_disp_id="${3:-}";

  if [ -z "${_op_type}" ]; then
    _cm2WarnStrFn 'No operation type provided.';
    return 1;
  fi
  if [ -z "${_exit_int}" ]; then
    _cm2WarnStrFn 'No exit int provided.';
    return 1;
  fi

  case "${_op_type}" in
    'restore')
      if [ -z "${_snapshot_disp_id}" ]; then
        _cm2WarnStrFn 'No snapshot display ID provided.';
        return 1;
      fi

      if [ "${_exit_int}" = "${_NOTICE}" ]; then
        systemctl reboot -i;
      elif [ "${_exit_int}" = "${_ERR}" ]; then
        _restoreFailedMsg="${_restoreFailedMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
        _cm2PromptUserFn "${_restoreFailedMsg}" "${_winTitle}" 's';
        exit "${_ERR}"
      # 127 = auth failure, this is what pkexec spits out if you click 'Cancel' on
      # the auth window or provide a wrong password too many times.
      elif [ "${_exit_int}" = '127' ]; then
        _cm2PromptUserFn "${_operationCancelledMsg}" "${_winTitle}";
        exit "${_NOTICE}";
      else
        _cm2PromptUserFn "${_criticalErrorMsg}" "${_winTitle}" 'e';
        exit "${_exit_int}";
      fi
      ;;
    'create')
      if [ "${_exit_int}" = "${_NOTICE}" ]; then
        _snapshot_id="$(_rb2GetSnapshotListStrFn | head -n1)";
        _snapshot_disp_id="$(_rb2MakeSnapshotDispIdFn "${_snapshot_id}")";
        _snapshotCreatedMsg="${_snapshotCreatedMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
        _cm2PromptUserFn "${_snapshotCreatedMsg}" "${_winTitle}";
      elif [ "${_exit_int}" = "${_ERR}" ]; then
        _cm2PromptUserFn "${_creationFailedMsg}" "${_winTitle}" 's';
        exit "${_ERR}";
      else
        _cm2PromptUserFn "${_criticalErrorMsg}" "${_winTitle}" 'e';
        exit "${_exit_int}";
      fi
      ;;
    'delete')
      if [ -z "${_snapshot_disp_id}" ]; then
        _cm2WarnStrFn 'No snapshot display ID provided.';
        return 1;
      fi

      if [ "${_exit_int}" = "${_NOTICE}" ]; then
        _snapshotDeletedMsg="${_snapshotDeletedMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
        _cm2PromptUserFn "${_snapshotDeletedMsg}" "${_winTitle}";
        exit "${_NOTICE}";
      elif [ "${_exit_int}" = "${_ERR}" ]; then
        _deletionFailedMsg="${_restoreFailedMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
        _cm2PromptUserFn "${_deletionFailedMsg}" "${_winTitle}";
        exit "${_ERR}";
      elif [ "${_exit_int}" = '127' ]; then
        _cm2PromptUserFn "${_operationCancelledMsg}" "${_winTitle}";
        exit "${_NOTICE}";
      else
        _cm2PromptUserFn "${_criticalErrorMsg}" "${_winTitle}" 'e';
        exit "${_exit_int}";
      fi
      ;;
    *)
      _cm2WarnStrFn 'Unrecognized operation type.';
      return 1;
      ;;
  esac

  if [ "${_exit_int}" = "${_NOTICE}" ] && [ "${_op_type}" = 'restore' ]; then
    systemctl reboot -i;
  elif [ "${_exit_int}" = "${_ERR}" ]; then
    if [ "${_op_type}" = 'restore' ]; then
      _restoreFailedMsg="${_restoreFailedMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
      _cm2PromptUserFn "${_restoreFailedMsg}" "${_winTitle}";
      exit "${_ERR}";
    elif [ "${_op_type}" = 'delete' ]; then
      _deletionFailedMsg="${_restoreFailedMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
      _cm2PromptUserFn "${_deletionFailedMsg}" "${_winTitle}";
      exit "${_ERR}";
    else
      _cm2WarnStrFn 'Unrecognized operation type provided.';
      return 1;
    fi
  elif [ "${_exit_int}" = '127' ]; then
    _cm2PromptUserFn "${_operationCancelledMsg}" "${_winTitle}";
    exit "${_NOTICE}";
  elif [ "${_op_type}" = 'restore' ]; then
    _cm2PromptUserFn "${_criticalErrorMsg}" "${_winTitle}" 'e';
    exit "${_exit_int}";
  elif [ "${_op_type}" = 'delete' ]; then
    _snapshotDeletedMsg="${_snapshotDeletedMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
    _cm2PromptUserFn "${_snapshotDeletedMsg}" "${_winTitle}";
    exit "${_NOTICE}";
  fi
}

## BEGIN _mainFn {
#
_mainFn () {
  declare _arg_str _working_subvol_loc _working_boot_subvol_loc \
    _btrfs_status_str _snapshot_id _restore_mode \
    _working_subvol_loc _working_boot_subvol_loc _mode_str _snapshot_id \
    _snapshot_disp_id _restored_snapshot_disp_id;

  _arg_str="${1:-}";
  _working_subvol_loc='/btrfs_main/@kfocus-rollback-working';
  _working_boot_subvol_loc='/btrfs_boot/@kfocus-rollback-working-boot';

  _btrfs_status_str="$(_rb2GetBtrfsStatusFn)"

  if [ "${_btrfs_status_str}" != 'SUPPORTED, SET UP' ]; then
    _cm2PromptUserFn "${_systemUnsupportedMsg}" "${_winTitle}";
    exit "${_NOTICE}";
  fi

  if mount | grep 'btrfs' | grep -q '@kfocus-rollback-working' \
    || mount | grep 'btrfs' | grep -q '@kfocus-rollback-working-boot'; then
    _cm2PromptUserFn "${_restoreIncompleteMsg}" "${_winTitle}" 's';
    exit "${_NOTICE}";
  fi

  if [ -e "${_working_subvol_loc}" ]; then
    _strangeSubvolsMsg="${_strangeSubvolsMsg//XXX_SUBVOL_NAME_XXX/${_working_subvol_loc}}";
    _cm2PromptUserFn "${_strangeSubvolsMsg}" "${_winTitle}" 's';
    exit "${_ERR}"
  elif [ -e "${_working_boot_subvol_loc}" ]; then
    _strangeSubvolsMsg="${_strangeSubvolsMsg//XXX_SUBVOL_NAME_XXX/${_working_boot_subvol_loc}}";
    _cm2PromptUserFn "${_strangeSubvolsMsg}" "${_winTitle}" 's';
    exit "${_ERR}"
  fi

  if [ "${_arg_str}" = 'afterRestore' ]; then
    # Refresh desktop database after restore
    [ -n "${_kbuildSyCoca5Exe}" ] && "${_kbuildSyCoca5Exe}";
    _snapshot_id="$(_rb2GetSnapshotListStrFn | head -n1)";
    _restored_snapshot_disp_id="$(
      cat /var/lib/kfocus/kfocus_rollback_restore_complete
    )";
    _rollbackSuccessfulMsg="${_rollbackSuccessfulMsg//XXX_SNAPSHOT_NAME_XXX/${_restored_snapshot_disp_id}}";
    if [ "$(_cm2PromptUserFn "${_rollbackSuccessfulMsg}" \
      "FocusRx: System Rollback" 'a')" = 'y' ]; then
      _selectiveRestoreSnapshotFn "${_snapshot_id}";
      exit "${_NOTICE}";
    else
      exit "${_NOTICE}";
    fi
  fi

  _mode_str="$(
    _cm2PromptUserFn "${_chooseModeMsg}" "${_winTitle}" 'd' 'restore' \
      'RESTORE Snapshot' 'off' 'create' 'CREATE Snapshot' 'off' 'delete' \
      'DELETE Snapshot' 'off' 'optimize' 'DELETE ALL and optimize disk' 'off';
  )";

  case "${_mode_str}" in
    'restore')
      if [ -z "$(ls '/btrfs_main/@kfocus-rollback-snapshots')" ]; then
        _cm2PromptUserFn "${_noSnapshotsFoundMsg}" "${_winTitle}";
        exit "${_NOTICE}";
      fi

      IFS=$'\n'; read -r -d '' _snapshot_id _snapshot_disp_id \
        < <(_chooseSnapshotFn "${_chooseRestoreSnapshotMsg}");
  
      if [ -z "${_snapshot_id}" ]; then
        _cm2PromptUserFn "${_operationCancelledMsg}" "${_winTitle}";
        exit "${_NOTICE}";
      fi
  
      _chooseRestoreModeMsg="${_chooseRestoreModeMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
  
      _restore_mode="$(_cm2PromptUserFn "${_chooseRestoreModeMsg}" \
        "${_winTitle}" 'd' 'totalRestore' \
        'Restore the Entire Snapshot (recommended)' 'off' 'selectiveRestore' \
        'Restore Individual Files (ADVANCED)' 'off')";

      if [ -z "${_restore_mode}" ]; then
        _cm2PromptUserFn "${_operationCancelledMsg}" "${_winTitle}";
        exit "${_NOTICE}";
      fi

      if [ "${_restore_mode}" = 'totalRestore' ]; then
        _totalRestoreConfirmMsg="${_totalRestoreConfirmMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
        if [ "$(_cm2PromptUserFn "${_totalRestoreConfirmMsg}" "${_winTitle}" \
          'o')" = 'y' ]; then
          _rb2RestoreSnapshotFn "${_snapshot_id}";
          _handleOperationExitIntFn 'restore' "$?" "${_snapshot_disp_id}";
        else
          _cm2PromptUserFn "${_operationCancelledMsg}" "${_winTitle}";
          exit "${_NOTICE}";
        fi
      elif [ "${_restore_mode}" = 'selectiveRestore' ]; then
        _selectiveRestoreConfirmMsg="${_selectiveRestoreConfirmMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
        if [ "$(_cm2PromptUserFn "${_selectiveRestoreConfirmMsg}" \
          "${_winTitle}" 'o')" = 'y' ]; then
          _selectiveRestoreSnapshotFn "${_snapshot_id}";
        else
          _cm2PromptUserFn "${_operationCancelledMsg}" "${_winTitle}";
          exit "${_NOTICE}";
        fi
      fi
      ;;
    'create')
      if [ "$(_cm2PromptUserFn "${_createSnapshotMsg}" "${_winTitle}" 'a')" \
        = 'y' ]; then
        _rb2SystemSnapshotFn "$USER";
        _handleOperationExitIntFn 'create' "$?"
      else
        _cm2PromptUserFn "${_operationCancelledMsg}" "${_winTitle}";
        exit "${_NOTICE}";
      fi
      ;;
    'delete')
      if [ -z "$(ls '/btrfs_main/@kfocus-rollback-snapshots')" ]; then
        _cm2PromptUserFn "${_noSnapshotsFoundMsg}" "${_winTitle}";
        exit "${_NOTICE}";
      fi

      IFS=$'\n'; read -r -d '' _snapshot_id _snapshot_disp_id \
        < <(_chooseSnapshotFn "${_chooseDeleteSnapshotMsg}");
  
      if [ -z "${_snapshot_id}" ]; then
        _cm2PromptUserFn "${_operationCancelledMsg}" "${_winTitle}";
        exit "${_NOTICE}";
      fi

      _deleteConfirmMsg="${_deleteConfirmMsg//XXX_SNAPSHOT_NAME_XXX/${_snapshot_disp_id}}";
      if [ "$(_cm2PromptUserFn "${_deleteConfirmMsg}" "${_winTitle}" \
        'o')" = 'y' ]; then
        _rb2DeleteSnapshotFn "${_snapshot_id}";
        _handleOperationExitIntFn 'delete' "$?" "${_snapshot_disp_id}";
      else
        _cm2PromptUserFn "${_operationCancelledMsg}" "${_winTitle}";
        exit "${_NOTICE}";
      fi
      ;;
    'optimize')
      if [ "$(_cm2PromptUserFn "${_doOptimizeMsg}" "${_winTitle}" 'a')" \
        = 'y' ]; then
        if _rb2OptimizeDiskFn; then
          _cm2PromptUserFn "${_optimizeSuccessfulMsg}" "${_winTitle}";
        else
          _cm2PromptUserFn "${_optimizeFailedMsg}" "${_winTitle}" 's';
        fi
      fi
      ;;
    *)
      _cm2PromptUserFn "${_operationCancelledMsg}" "${_winTitle}";
      exit "${_NOTICE}";
      ;;
  esac
  
  exit "${_NOTICE}";
}
## . END _mainFn }

## BEGIN Declare and assign global vars {
declare _binName _binDir _baseName _baseDir _libTable _assignList _kdiagExe \
  _whiptailExe _rollbackSetExe _dolphinExe _btrfsOptimizeExe _escExe \
  _winTitle _browRpStr _browLpStr _erowStr _tableStr _centerHeaderStr \
  _boldStr _warnStr _chooseModeMsg _chooseRestoreSnapshotMsg \
  _chooseRestoreModeMsg _totalRestoreConfirmMsg _rollbackSuccessfulMsg \
  _selectiveRestoreConfirmMsg _createSnapshotMsg _snapshotCreatedMsg \
  _chooseDeleteSnapshotMsg _deleteConfirmMsg _snapshotDeletedMsg \
  _doOptimizeMsg _optimizeSuccessfulMsg _optimizeFailedMsg \
  _systemUnsupportedMsg _restoreIncompleteMsg _noSnapshotsFoundMsg \
  _strangeSubvolsMsg _restoreFailedMsg _deletionFailedMsg _creationFailedMsg \
  _criticalErrorMsg _operationCancelledMsg;
## . END Declare and assign global vars }

## BEGIN Run mainFn when script is NOT sourced {
#
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(  readlink -f "$0"       )" || exit 101;
  _binDir="$(   dirname  "${_binName}" )" || exit 101;
  _baseDir="$(  dirname  "${_binDir}"  )" || exit 101;
  _baseName="$( basename "${_binName}" )" || exit 101;

  # Import libs and assign more global vars
  _libTable=(
    "${_baseDir}/lib/common.2.source"
    "${_baseDir}/lib/rollback.2.source"
  );

  _loadLibTableFn "${_libTable[@]}" || exit 1;

  _assignList=(
    '_kbuildSyCoca5Exe|/usr/bin/kbuildsycoca5Exe||optional'
    '_kdiagExe|/usr/bin/kdialog'
    '_whiptailExe|/usr/bin/whiptail'
    "_rollbackSetExe|${_binDir}/kfocus-rollback-set"
    '_dolphinExe|/usr/bin/dolphin'
    "_btrfsOptimizeExe|${_binDir}/kfocus-btrfs-optimize"
  );

  if ! _cm2AssignExeVarsFn "${_assignList[@]}"; then
    _cm2ErrStrFn 'Could not assign variables';
    exit 1;
  fi

  _escExe="$(_cm2GetEscExeFn)" || exit;

  # Set UI messages
  _winTitle='System Rollback';
  _browRpStr='<tr><td style="padding:8px 32px 8px 0">';
  _browLpStr='<tr><td style="padding:8px 0 8px 32px">';
  _erowStr='</td></tr>';
  _tableStr='<table style="width:100%;margin-right:32px">';
  _centerHeaderStr='<h3 style="color:#f7941d;text-align:center">';
  _boldStr='<b style="color:#f7941d">';
  _warnStr='<b style="color:#da4453">';

  _chooseModeMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browLpStr}${_centerHeaderStr}System Rollback (Step 1)</h3>${_erowStr}

${_browLpStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#rollback"
  >https://kfocus.org/wf/tools#rollback</a>${_erowStr}

${_browLpStr}${_boldStr}Use this tool to restore, create, or delete a
snapshot.</b><br>
Snapshots allow you to undo recent changes that may<br>
have caused system issues. Restoring a snapshot will<br>
revert the apps, kernel, and system data.${_erowStr}

${_browLpStr}${_boldStr}This tool will NOT snapshot or restore files in
the<br>
/home filesystem.</b> For that,  click "Cancel" and use the<br>
"Back In Time" icon found next to the system tray.${_erowStr}

${_browLpStr}Select a snapshot action and click OK to get started.
${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _chooseRestoreSnapshotMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browLpStr}${_centerHeaderStr}System Rollback (Step 2)</h3>${_erowStr}

${_browLpStr}${_boldStr}Select the snapshot to restore.</b> You may restore
the entire<br>
snapshot, or individual files, as needed. Click OK to continue<br>
with the selected snapshot.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _chooseRestoreModeMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browLpStr}${_centerHeaderStr}System Rollback (Step 3)</h3>${_erowStr}

${_browLpStr}You have selected the following snapshot:${_erowStr}

${_browLpStr}${_boldStr}"XXX_SNAPSHOT_NAME_XXX"${_erowStr}

${_browLpStr}We recommend you "Restore the Entire Snapshot" to avoid<br>
data consistency problems. ${_erowStr}

${_browLpStr}As with any system maintenance, it is best practice to back<br>
up any critical data first. See
<a style="color:#1d99f3" href="https://kfocus.org/wf/backup"
>https://kfocus.org/wf/backup</a><br>
for guidance.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _totalRestoreConfirmMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}System Rollback (Step 4)</h3>${_erowStr}

${_browRpStr}The following snapshot is now ready to be restored:${_erowStr}

${_browRpStr}${_boldStr}"XXX_SNAPSHOT_NAME_XXX"${_erowStr}

${_browRpStr}${_warnStr}WARNING: This will immediately reboot the
system!</b><br>
Please save any open work. Click OK to snapshot<br>
your current root filesystem, finalize the restore,<br>
and reboot.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _rollbackSuccessfulMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Rollback Successful</h3>${_erowStr}

${_browRpStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#rollback"
  >https://kfocus.org/wf/tools#rollback</a>${_erowStr}

${_browRpStr}Files from the snapshot:${_erowStr}

${_browRpStr}${_boldStr}"XXX_SNAPSHOT_NAME_XXX"${_erowStr}

${_browRpStr}have been restored to the system.${_erowStr}

${_browRpStr}If you desire, you may compare to the files as they<br>
existed prior to the rollback. The snapshot will<br>
appear on the LEFT, while the current root filesystem<br>
will be shown on the RIGHT. This is advanced, and is<br>
not recommended for most users. However, it can<br>
be useful for restoring database files, for instance.${_erowStr}

${_browRpStr}Would you like to compare now?${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _selectiveRestoreConfirmMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}System Rollback (Step 4)</h3>${_erowStr}

${_browRpStr}You can now selectively restore files from this<br>
snapshot:${_erowStr}

${_browRpStr}${_boldStr}"XXX_SNAPSHOT_NAME_XXX"${_erowStr}

${_browRpStr}${_warnStr}WARNING: PROCEED WITH CAUTION!</b> You will be<br>
restoring system files as root!${_erowStr}

${_browRpStr}Click on OK below to open a file manager with the<br>
snapshot on the LEFT and the current root filesystem<br>
on the RIGHT. When you are done copying files and<br>
directories, simply close the file manager.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _createSnapshotMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}System Rollback (Step 2)</h3>${_erowStr}

${_browRpStr}System Rollback is now ready to create a new<br>
snapshot.${_erowStr}

${_browRpStr}${_boldStr}IMPORTANT: Virtual machine data (libvirt) will<br>
NOT be included in the snapshot.${_erowStr}

${_browRpStr}Create Snapshot Now?${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _snapshotCreatedMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Snapshot Created</h3>${_erowStr}

${_browRpStr}A system file snapshot called:${_erowStr}

${_browRpStr}${_boldStr}"XXX_SNAPSHOT_NAME_XXX"${_erowStr}

${_browRpStr}has been created.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _chooseDeleteSnapshotMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browLpStr}${_centerHeaderStr}System Rollback (Step 2)</h3>${_erowStr}

${_browLpStr}${_boldStr}Select the snapshot to delete.</b> You will be asked
to confirm<br>
before deletion occurs.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _deleteConfirmMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}System Rollback (Step 3)</h3>${_erowStr}

${_browRpStr}The following snapshot is ready to be deleted:${_erowStr}

${_browRpStr}${_boldStr}"XXX_SNAPSHOT_NAME_XXX"${_erowStr}

${_browRpStr}${_warnStr}WARNING: Deleting a snapshot cannot be
undone!</br>${_erowStr}

${_browRpStr}Click on OK below to delete the snapshot, or Cancel<br>
to back out.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _snapshotDeletedMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Snapshot Deleted</h3>${_erowStr}

${_browRpStr}The following snapshot has been successfully deleted:${_erowStr}

${_browRpStr}${_boldStr}"XXX_SNAPSHOT_NAME_XXX"${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _doOptimizeMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}System Rollback (Step 2)</h3>${_erowStr}

${_browRpStr}System Rollback is now ready to optimize<br>
your boot disk.${_erowStr}

${_browRpStr}${_warnStr}WARNING: This will delete all snapshots<br>
on the system! This cannot be undone!${_erowStr}

${_browRpStr}Click on OK below to optimize the disk, or Cancel<br>
to back out.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _optimizeSuccessfulMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Disk Optimized${_erowStr}

${_browRpStr}Your system's boot disk has been optimized<br>
successfully.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _optimizeFailedMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Disk Optimization Failed</h3>${_erowStr}

${_browRpStr}The disk optimization operation failed! This<br>
incident may be the result of failing hardware<br>
or a software conflict.${_erowStr}

${_browRpStr}<b>Please do NOT reboot. Back up your data as<br>
soon as possible.</b> Failure to do so may result in<br>
data loss. See<br>
<a style="color:#1d99f3"
href="https://kfocus.org/wf/backup#bkm_take_a_snapshot"
>https://kfocus.org/wf/backup#bkm_take_a_snapshot</a><br>
for instructions on how to safeguard your data.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _systemUnsupportedMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}System Unsupported</h3>${_erowStr}

${_browRpStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#rollback"
  >https://kfocus.org/wf/tools#rollback</a>${_erowStr}

${_browRpStr}This system does not appear to support snapshotting<br>
and rollback. Please see
<a style="color:#1d99f3" href="https://kfocus.org/wf/recovery"
>https://kfocus.org/wf/recovery</a><br>
for other recovery steps you can take.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _restoreIncompleteMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Restore Incomplete</h3>${_erowStr}

${_browRpStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#rollback"
  >https://kfocus.org/wf/tools#rollback</a>${_erowStr}

${_browRpStr}You appear to have restored a snapshot, but have<br>
not yet rebooted after this. Please reboot to<br>
finalize the restore process. If this does not fix<br>
your system, you can attempt another rollback.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _noSnapshotsFoundMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}No Snapshots Found</h3>${_erowStr}

${_browRpStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#rollback"
  >https://kfocus.org/wf/tools#rollback</a>${_erowStr}

${_browRpStr}There do not appear to be any snapshots<br>
available to roll back to. Please see<br>
<a style="color:#1d99f3" href="https://kfocus.org/wf/recovery"
>https://kfocus.org/wf/recovery</a>
for other<br>
recovery steps you can take.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _strangeSubvolsMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Strange BTRFS Subvols</h3>${_erowStr}

${_browRpStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#rollback"
  >https://kfocus.org/wf/tools#rollback</a>${_erowStr}

${_browRpStr}The BTRFS subvolume at<br>
<code>XXX_SUBVOL_NAME_XXX</code><br>
should not exist, but does. System Rollback<br>
cannot proceed with this subvolume present.${_erowStr}

${_browRpStr}Please ensure this subvolume does not contain<br>
any important data, then remove it with<br>
<code>sudo btrfs subvolume delete</code>.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _restoreFailedMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Restore Failed</h3>${_erowStr}

${_browRpStr}The following snapshot could NOT be restored:${_erowStr}

${_browRpStr}${_boldStr}"XXX_SNAPSHOT_NAME_XXX"</b>${_erowStr}

${_browRpStr}No changes have been made.${_erowStr}

${_browRpStr}Please try to restore again. If this fails, see<br>
<a href="https://kfocus.org/wf/recovery"
>https://kfocus.org/wf/recovery</a> for other<br>
recovery options.${_erowStr}

${_browRpStr}
Please contact support if this issue persists.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _deletionFailedMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Deletion Failed</h3>${_erowStr}

${_browRpStr}The following snapshot could NOT be deleted:${_erowStr}

${_browRpStr}${_boldStr}"XXX_SNAPSHOT_NAME_XXX"</b>${_erowStr}

${_browRpStr}Most likely it was already removed by automatic<br>
snapshot maintenance. No changes have been<br>
made.${_erowStr}

${_browRpStr}
Please contact support if this issue persists.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _creationFailedMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Creation Failed</h3>${_erowStr}

${_browRpStr}Something went wrong and a system file snapshot<br>
could not be created. No changes have been made<br>
to the system.${_erowStr}

${_browRpStr}Please try to create a snapshot again. If this<br>
issue persists, please contact technical support.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _criticalErrorMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Critical Error</h3>${_erowStr}

${_browRpStr}System Rollback was interrupted while attempting<br>
to manage snapshots on your system. This incident<br>
may be the result of failing hardware or a software<br>
conflict.${_erowStr}

${_browRpStr}<b>Please do NOT reboot. Back up your data as<br>
soon as possible.</b> Failure to do so may result in<br>
data loss.${_erowStr}

${_browRpStr}See<br>
<a style="color:#1d99f3"
href="https://kfocus.org/wf/backup#bkm_take_a_snapshot"
>https://kfocus.org/wf/backup#bkm_take_a_snapshot</a><br>
for instructions on how to safeguard your data.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _operationCancelledMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Operation Cancelled</h3>${_erowStr}

${_browRpStr}Snapshot operation cancelled.${_erowStr}

${_browRpStr}No changes have been made to the system.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  # Make sure TTY mode looks nice
  _cm2SetCliTypeFn 'whiptail';

  _mainFn "$@";
fi
## . END Run mainFn when script is NOT sourced }
