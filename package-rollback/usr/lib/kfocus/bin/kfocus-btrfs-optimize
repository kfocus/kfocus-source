#!/bin/bash
#
# Copyright 2019-2024 MindShare Inc.
#
# Written for the Kubuntu Focus by M. Mikowski and A. Rainbolt.
#
# Name     : kfocus-btrfs-optimize
# Summary  : kfocus-btrfs-optimize
# Purpose  : Provides a UI for optimizing the system BTRFS filesystems
# Example  : kfocus-btrfs-optimize
# License  : GPLv2
# Run By   : Users
# Spec     : 4201
#
set -u;

_stderrFn () {
  2>&1 echo "${_baseName} $*";
}
## BEGIN _loadLibTableFn {
# Summary : _loadLibTableFn <lib_str1> <lib_str2> ...
# Example : _loadLibTableFn "lib01:/usr/lib/lib01" "lib02";
# Purpose :
#   Import table of libs, one arg per lib.
#     * Each arg can have alternates delimited by colons ':'
#     * Fails if all alternates for a lib fails.
#     * Starting lib string '#:' means the following libs are optional.
#     * Diagnostics are sent to STDERR.
#     * Libs without a directory use ${_binDir} as the path
#
_loadLibTableFn () {
  declare _lib_table _lib_list _lib_line _raw_path _lib_file _is_loaded;
  _lib_table=("$@");

  ## Begin: Iterate over lib lines.
  for _lib_line in "${_lib_table[@]}"; do
    # Split line into alternates.
    #   Note: Echo removes trailing newline.
    readarray -d: -t _lib_list < <(echo -n "${_lib_line}");
    _is_loaded='n';

    ## Begin: Iterate over alternates.
    for _raw_path in "${_lib_list[@]}"; do
      [ -z "$(dirname "${_raw_path}")" ] \
        && _lib_file="${_binDir}/${_raw_path}" \
        || _lib_file="${_raw_path}";

      # shellcheck disable=SC1090
      if ! [ -r "${_lib_file}" ]; then
        _stderrFn "warn: source |${_lib_file}| not readable.";
      elif source "${_lib_file}"; then
        _is_loaded='y';
        break;
      else
        _stderrFn "${_baseName} Error: source |${_lib_file}| is non-zero.";
        return 1;
      fi
    done
    ## . End: Iterate over alternates.

    if [ "${_is_loaded}" != 'y' ]; then
      _stderrFn "${_baseName} error: no lib loaded";
      return 1;
    fi
  done
  ## . End: Iterate over lib lines.

  return;
}
## . END _loadLibTableFn }

## BEGIN _mainFn {
#
_mainFn () {
  declare _btrfs_status_str _ans;

  _btrfs_status_str="$(_rb2GetBtrfsStatusFn)"

  if [ "${_btrfs_status_str}" != 'SUPPORTED, SET UP' ]; then
    _cm2PromptUserFn "${_systemUnsupportedMsg}" "${_winTitle}";
    exit "${_NOTICE}";
  fi

  _ans="$(_cm2PromptUserFn "${_doOptimizeMsg}" "${_winTitle}" 'a')";

  if [ "${_ans}" = 'y' ]; then
    if _cm2RunLongCmdFn 'Optimizing the drive...' "${_optimizeSetExe}" \
      'deepClean'; then
      _cm2PromptUserFn "${_optimizeSuccessfulMsg}" "${_winTitle}";
    else
      _cm2PromptUserFn "${_optimizeFailedMsg}" "${_winTitle}" 's';
    fi
  fi

  exit "${_NOTICE}";
}
## . END _mainFn }

## BEGIN Declare and assign global vars {
declare _binName _binDir _baseName _baseDir _assignList _libTable _kdiagExe \
  _whiptailExe _optimizeSetExe _escExe _winTitle _browStr _erowStr _tableStr \
  _systemUnsupportedMsg _doOptimizeMsg _optimizeSuccessfulMsg \
  _optimizeFailedMsg;
## . END Declare and assign global vars }

## BEGIN Run mainFn when script is NOT sourced {
#
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(  readlink -f "$0"       )" || exit 101;
  _binDir="$(   dirname  "${_binName}" )" || exit 101;
  _baseDir="$(  dirname  "${_binDir}"  )" || exit 101;
  _baseName="$( basename "${_binName}" )" || exit 101;

  # Import libs and assign more global vars
  _libTable=(
    "${_baseDir}/lib/common.2.source"
    "${_baseDir}/lib/rollback.2.source"
  );
  _loadLibTableFn "${_libTable[@]}" || exit 1;

  _assignList=(
    '_kdiagExe|/usr/bin/kdialog'
    '_whiptailExe|/usr/bin/whiptail'
    "_snapshotSetExe|${_binDir}/kfocus-rollback-set"
    "_optimizeSetExe|${_binDir}/kfocus-btrfs-optimize-set"
  );

  if ! _cm2AssignExeVarsFn "${_assignList[@]}"; then
    _cm2ErrStrFn 'Could not assign variable';
    exit 1;
  fi

  _escExe="$(_cm2GetEscExeFn)" || exit;

  # Set UI messages
  _winTitle='Drive Optimizer';
  _browStr='<tr><td style="padding:8px 32px 8px 0">';
  _erowStr='</td></tr>';
  _tableStr='<table style="width:100%;margin-right:32px">';

  _systemUnsupportedMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browStr}<h3 style="color:#f7941d">System Unsupported</h3>${_erowStr}

${_browStr}Doc: <a style="color:#1d99f3"
href="https://kfocus.org/wf/tools#optimize"
>https://kfocus.org/wf/tools#optimize</a>${_erowStr}

${_browStr}This system does not appear to support<br>
optimization.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _doOptimizeMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browStr}<h3 style="color:#f7941d">Drive Optimizer</h3>${_erowStr}

${_browStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#optimize"
  >https://kfocus.org/wf/tools#optimize</a>${_erowStr}

${_browStr}Use this tool to optimize your system's boot <br>
drive. This will delete all snapshots, defragment <br>
highly fragmented files, free disk space that has <br>
become unreachable, and ensure that your boot <br>
drive's free space is properly organized.${_erowStr}

${_browStr}<b>Optimize Drive Now?</b>${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _optimizeSuccessfulMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browStr}<h3 style="color:#f7941d">Drive Optimization Finished
</h3>${_erowStr}

${_browStr}Your system's boot drive has been optimized<br>
successfully.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _optimizeFailedMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browStr}<h3 style="color:#f7941d">Drive Optimization Failed</h3>${_erowStr}

${_browStr}The drive optimization operation failed! This<br>
incident may be the result of failing hardware<br>
or a software conflict.${_erowStr}

${_browStr}<b>Please do NOT reboot. Back up your data as<br>
soon as possible.</b> Failure to do so may result in<br>
data loss. See<br>
<a style="color:#1d99f3"
href="https://kfocus.org/wf/backup#bkm_take_a_snapshot"
>https://kfocus.org/wf/backup#bkm_take_a_snapshot</a><br>
for instructions on how to safeguard your data.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";
  
  # Make sure TTY mode looks nice
  _cm2SetCliTypeFn 'whiptail'

  _mainFn "$@";
fi
## . END Run mainFn when script is NOT sourced }
