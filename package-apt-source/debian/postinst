#!/bin/bash
# kfocus-apt-source postinst
# This must be run as root.
#
# set -u is used to exit on uninitialized variables
# set -e is not used as we do our own error checking
#
set -u;

## { BEGIN Declare common.2.source symbols
#  IMPORT 2022-02-23 EXCERPT from test-scripts/common.2.source
_cm2Arg01="${1:-}";

_cm2BlockMsg='';
_cm2RmExe='/bin/rm';
_cm2EchoFn    () { 1>&2 echo -e "$*";  }
_cm2SetMsgFn  () { _cm2BlockMsg="$*"; _cm2EchoFn "== BEGIN : ${_cm2BlockMsg}"; }
_cm2SucFn     () { _cm2EchoFn "== . END : OK   ${_cm2BlockMsg}\n\n"; }
_cm2SucStrFn  () { _cm2EchoFn "ok  : ${*}"; }
_cm2WarnFn    () { _cm2EchoFn "== . END : WARN Could not ${_cm2BlockMsg}\n\n"; }
_cm2WarnStrFn () { _cm2EchoFn "warn: ${*}"; }
## } . END Declare common.2.source symbols

## BEGIN _installReposFn {
_installReposFn () {
  declare _repo_dir _pref_dir _kfocus_dir _pin_str \
    _ppa_table _line _bit_list _bit_file _bit_min_date _bit_ppa_str \
    _bit_ppa_name _fq_bit_file _file_mtime _file_mdate _src_dir _top_msg;

  _repo_dir='/etc/apt/sources.list.d';
  _pref_dir='/etc/apt/preferences.d';
  _kfocus_dir='/usr/lib/kfocus';
#  _pin_str=$(cat << EOF3
##x WARNING! THIS IS A MACHINE GENERATED FILE.
##x DO NOT EDIT AS CHANGES WILL BE OVERWRITTEN BY FUTURE UPDATES.
##x LAST UPDATE 2022-05-10 FOR JAMMY
#
#Package: tuxedo-keyboard
#Pin: origin "deb.tuxedocomputers.com"
#Pin-Priority: 500
#
#Package: *
#Pin: origin "deb.tuxedocomputers.com"
#Pin-Priority: -1
#EOF3
#  );

  ##
  if [ -e "${_repo_dir}/kfocus-recommended.list" ]; then
    _cm2SetMsgFn 'Remove deprecated kfocus-recommended.list';
    if "${_cm2RmExe}" "${_repo_dir}/kfocus-recommended.list"; then
      _cm2SucFn; else _cm2WarnFn;
    fi
  fi

  ##
#  _cm2SetMsgFn 'Create or overwrite package pinning';
#  if echo "${_pin_str}" > "${_pref_dir}"/kfocus-package-pinning; then
#    _cm2SucFn; else _cm2WarnFn;
#  fi

  ##
  _cm2SetMsgFn 'Create or overwrite repo list files';
  _src_dir="${_kfocus_dir}/sources.list.d";

  if [ -d "${_src_dir}" ]; then
    if mv "${_src_dir}/"* "${_repo_dir}"; then
      _cm2SucFn;
    else
      _cm2WarnStrFn "Could not move files from ${_src_dir}";
      _cm2WarnFn;
    fi
  else
    _cm2WarnStrFn "Source dir |${_src_dir}| not available"
    _cm2WarnFn;
  fi
  "${_cm2RmExe}" -rf "${_kfocus_dir}/sources.list.d" || true;

  ##
  _top_msg='Add recommended 3rd-party repos';
  _cm2SetMsgFn "${_top_msg}";
  _ppa_table=(
    'bit-team-ubuntu-stable-jammy.list|2022-04-02|ppa:bit-team/stable|BackInTime'
    'phoerious-ubuntu-keepassxc-jammy.list|2022-04-02|ppa:phoerious/keepassxc|KeePassXC'
    'kubuntu-ppa-ubuntu-backports-jammy.list|2022-04-02|ppa:kubuntu-ppa/backports|Kubuntu Backports'
    'ubuntustudio-ppa-ubuntu-backports-jammy.list|2022-04-02|ppa:ubuntustudio-ppa/backports|Ubuntu Studio Backports'
  );

  for _line in "${_ppa_table[@]}"; do
    IFS='|' read -r -a _bit_list <<< "${_line}";
    _bit_file="${_bit_list[0]}";
    _bit_min_date="${_bit_list[1]}";
    _bit_ppa_str="${_bit_list[2]}";
    _bit_ppa_name="${_bit_list[3]}";
    _fq_bit_file="${_repo_dir}/${_bit_file}";

    # Print debug
    # _cm2EchoFn '_bit_file|_bit_min_date|_bit_ppa_str|_bit_ppa_name|_fq_bit_file';
    # _cm2EchoFn "${_bit_file}|${_bit_min_date}|${_bit_ppa_str}|${_bit_ppa_name}|${_fq_bit_file}";

    if [ -e "${_fq_bit_file}" ]; then
      _file_mtime="$(stat --printf='%Y' "${_fq_bit_file}")";
    else
      _file_mtime=0;
    fi
    _file_mdate="$(printf '%(%F)T' "${_file_mtime}")";
    if [ "${_bit_min_date}" \> "${_file_mdate}" ]; then
      if [ "${_file_mtime}" = 0 ]; then
        _cm2SetMsgFn "Add ${_bit_ppa_name} PPA";
      else
        _cm2SetMsgFn "Updating ${_bit_ppa_name} PPA per date check:";
        _cm2EchoFn "File |${_fq_bit_file}| modification date |${_file_mdate}|";
        _cm2EchoFn "  is before minimum allowed date |${_bit_min_date}|.";
      fi
      if add-apt-repository -ny "${_bit_ppa_str}"; then
        _cm2SucFn; else _cm2WarnFn;
      fi
    fi
  done
  _cm2BlockMsg="${_top_msg}";
  _cm2SucFn;
}
## . END _installReposFn }

## BEGIN _addTrustedKeysFn {
# Purpose: Add trusted keys
# Deprecated: dearmor keys (convert asc to gpg)
#    for _key in *; do
#      gpg --dearmor "${_key}"
#    done
# Deprecated: use apt-key
#    if apt-key add "${_kfocus_dir}/trusted-keys"; then
#      _cm2SucFn; else _cm2WarnFn && return;
#    fi
#
_addTrustedKeysFn () {
  declare _return_int _kfocus_dir _key_dir _block_idx;
  _return_int=1;
  _kfocus_dir='/usr/lib/kfocus';
  _key_dir="${_kfocus_dir}/trusted-keys.d";

  _cm2SetMsgFn 'Add trusted repo keys';
  ## Begin Short-circuit block
  # shellcheck disable=SC2043
  for _block_idx in 1; do
    if [ ! -d "${_kfocus_dir}/trusted-keys.d" ]; then
      _cm2WarnStrFn 'Trusted key dir not found';
      break;
    fi

    if ! pushd "${_key_dir}"; then
      _cm2WarnStrFn 'Could not cd to source dir';
      break;
    fi

    if ! mv ./*.asc /etc/apt/trusted.gpg.d; then
      _cm2WarnStrFn 'Could not install gpg keys';
      break;
    fi

    _return_int=0;
    popd || true;

    if ! "${_cm2RmExe}" -rf "${_kfocus_dir}/trusted-keys.d"; then
      _cm2WarnStrFn "Could not remove ${_kfocus_dir}/trusted-keys.d";
    fi
  done
  ## . End Short-circuit block

  if [ "${_return_int}" = 0 ]; then
    _cm2SucFn; else _cm2WarnFn;
  fi
  return "${_return_int}";
}
## . END _addTrustedKeysFn }

## BEGIN _addGcloudSdkKeyFn {
_addGcloudSdkKeyFn () {
  declare _key_dir _key_table _bit_list _bit_file _bit_min_date \
    _bit_key_url _bit_key_name _fq_key_file _file_mtime _file_mdate;

  _key_dir='/usr/share/keyrings';
  _key_table=(
    'cloud.google.gpg|2023-01-05|https://packages.cloud.google.com/apt/doc/apt-key.gpg|Google Cloud SDK'
  );
  for _line in "${_key_table[@]}"; do
    IFS='|' read -r -a _bit_list <<< "${_line}";
    _bit_file="${_bit_list[0]}";
    _bit_min_date="${_bit_list[1]}";
    _bit_key_url="${_bit_list[2]}";
    _bit_key_name="${_bit_list[3]}";
    _fq_key_file="${_key_dir}/${_bit_file}";

    # Print debug
    # _cm2EchoFn '_bit_file|_bit_min_date|_bit_key_url|_bit_key_name|_fq_key_file';
    # _cm2EchoFn "${_bit_file}|${_bit_min_date}|${_bit_key_url}|${_bit_key_name}|${_fq_key_file}";

    if [ -e "${_fq_key_file}" ]; then
      _file_mtime="$(stat --printf='%Y' "${_fq_key_file}")";
    else
      _file_mtime=0;
    fi
    _file_mdate="$(printf '%(%F)T' "${_file_mtime}")";
    if [ "${_bit_min_date}" \> "${_file_mdate}" ]; then
      if [ "${_file_mtime}" = '0' ]; then
        _cm2SetMsgFn "Add ${_bit_key_name} key file.";
      else
        _cm2SetMsgFn "Update ${_bit_key_name} key file.";
        _cm2EchoFn "${_bit_min_date} > ${_file_mdate}";
      fi
      if wget -O- "${_bit_key_url}" > "${_fq_key_file}"; then
        _cm2SucFn; else _cm2WarnFn;
      fi;
    fi
  done
}
## . END _addGcloudSdkKeyFn }

## BEGIN _rmObsoleteReposFn {

_rmObsoleteReposFn () {
  if [ -e /etc/apt/sources.list.d/tuxedocomputers.list ]; then
    "${_cm2RmExe}" /etc/apt/sources.list.d/tuxedocomputers.list
  fi
  if [ -e /etc/apt/preferences.d/kfocus-package-pinning ]; then
    "${_cm2RmExe}" /etc/apt/preferences.d/kfocus-package-pinning
  fi
}

## . END _rmObsoleteReposFn }

## BEGIN MAIN {
#  See https://stackoverflow.com/questions/2683279
#
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  case "${_cm2Arg01}" in
    abort-upgrade|abort-remove|abort-configure|abort*)
      true;
    ;;

    configure|upgrade)
       # Install recommended 3rd-party repos
      _installReposFn;
      # Add trusted keys for repos
      _addTrustedKeysFn;
      # Add Google Cloud SDK keys
      _addGcloudSdkKeyFn;
      # Clean obsolete repos
      _rmObsoleteReposFn;
    ;;
  esac
  exit 0;
fi
## . END MAIN }

# Tag to allow some debhelper commands to inject relevant code
#DEBHELPER#
