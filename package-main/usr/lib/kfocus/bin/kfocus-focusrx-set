#!/bin/bash
#
# Copyright 2019-2024 MindShare Inc.
# Written for the Kubuntu Focus by Michael Mikowski
#
# Name    : kfocus-focusrx-set
# Purpose : run-as-root options for kfocus-focusrx
# License : GPL v2
# Run By  : kfocus-focusrx
# Spec    : 744
#
set -u;

## BEGIN _importCommonFn {
# Purpose: Import common library with _cm2* symbols
#
_importCommonFn() {
  declare _lib_file;
  _lib_file="${_baseDir}/lib/common.2.source";
  if [ -r "${_lib_file}" ]; then
    # shellcheck source=../lib/common.2.source
    source "${_lib_file}" || exit 202;
  else
    echo 1>&2 "${_baseName}: ABORT - Cannot source lib |${_lib_file}|";
    exit 202;
  fi
}
## . END _importCommonFn }

## BEGIN _updatePkgsFn {
# Purpose: Update all kfocus packages only
#
_updatePkgsFn () {
  _cm2SetMsgFn 'Update and upgrade kfocus packages';
  if apt-get update; then
    if yes 2>/dev/null \
      | apt-get install -y --only-upgrade 'kfocus*';
    then
      _cm2SucFn;
      return;
    fi
  fi
  _cm2WarnFn;
}
## . END _updatePkgsFn }

## BEGIN _reconfigHwPkgFn {
# Purpose: Reconfigure the kfocus-hw package.
#   The caller must determine if this step is appropriate.
# IMPORTANT: dpkg-configure kfocus-hw runs update-initramfs, update-grub
#
_reconfigHwPkgFn () {
  declare _str;
  _cm2SetMsgFn 'Adjust for hardware';
  if _str="$(dpkg-reconfigure kfocus-hw 2>&1)"; then
    _cm2SucFn; else _cm2WarnStrFn "${_str}"; _cm2WarnFn;
  fi
}
## . END _reconfigHwPkgFn }

## BEGIN _installToolsPkgFn {
# Purpose: Install kfocus tool package specified in $1
#   The caller must provide the appropriate package.
#
_installToolsPkgFn () {
  declare _tools_pkg;
  _tools_pkg="${1:-}";
  _cm2SetMsgFn "Install Tools Package ${_tools_pkg}";
  if ! [[ "${_tools_pkg}" =~ ^kfocus-tools ]]; then
    _cm2WarnStrFn; return 1;
  fi

  if apt-get reinstall -y "${_tools_pkg}"; then
    _cm2SucFn; else _cm2WarnFn; return 1;
  fi
}
## . END _installToolsPkgFn }

## BEGIN _installKbdIteFn {
# Purpose: Install kfocus-keyboard-ite package.
#
_installKbdIteFn () {
  _cm2SetMsgFn 'Install kfocus-keyboard-ite package';
  if apt-get reinstall -y 'kfocus-keyboard-ite'; then
    _cm2SucFn; else _cm2WarnFn; return 1;
  fi
}
## . END _installKbdIteFn }

## BEGIN _purgeKbdIteFn {
# Purpose: Purge kfocus-keyboard-ite package.
#
_purgeKbdIteFn () {
  _cm2SetMsgFn 'Purge kfocus-keyboard-ite package';
  if apt-get purge -y 'kfocus-keyboard-ite'; then
    _cm2SucFn; else _cm2WarnFn; return 1;
  fi
}
## . END _purgeKbdIteFn }

## BEGIN _installNvidiaFn {
# Purpose: Install kfocus nvidia packages.
#   The caller must determine if this step is appropriate.
#
_installNvidiaFn () {
  _cm2SetMsgFn 'Install NVIDIA Packages';
  if ! apt-get reinstall -y kfocus-nvidia-pinning; then
    _cm2WarnStrFn 'Trouble installing nvidia-pinning.';
    _cm2WarnFn; return 1;
  fi
  if ! apt-get update; then
    _cm2WarnStrFn 'Trouble updating apt package list.';
    _cm2WarnFn; return 1;
  fi
  if ! apt-get reinstall -y kfocus-nvidia; then
    _cm2WarnStrFn 'Trouble installing kfocus-nvidia.';
    _cm2WarnFn; return 1;
  fi
  _cm2SucFn;
}
## END _installNvidiaFn }

## BEGIN _installSynapticsFn {
# Purpose: Install kfocus-keyboard-ite package.
#
_installSynapticsFn () {
  _cm2SetMsgFn 'Install xserver-xorg-input-synaptics package';
  if apt-get reinstall -y 'xserver-xorg-input-synaptics'; then
    _cm2SucFn; else _cm2WarnFn; return 1;
  fi
}
## . END _installSynapticsFn }

## BEGIN _chkBiosUpdateFn {
# Purpose: Return true if no bios upgrade needed, false otherwise
#
_chkBiosUpdateFn () {
  declare _model_code _min_vers _dmi_exe _bios_vers;
  _model_code="$(_cm2EchoModelStrFn 'code')"  || exit 0;

  # Only support m2g4 check at this time
  if [ "${_model_code}" != 'm2g4' ]; then
    echo "${_model_code} BIOS update not needed";
    exit 0;
  fi

  # Get dmidecode for bios version
  if ! _cm2AssignExeVarsFn '_dmi_exe|dmidecode'; then
    _cm2WarnStrFn 'ABORT: Required dmidecode not found. Run:';
    _cm2WarnStrFn '  sudo apt install dmidecode';
    exit 0;
  fi

  _min_vers='1.07.07MIN29';
  _bios_vers="$( "${_dmi_exe}" -s 'bios-version' )" || exit 0;
  if [ "${_bios_vers}" = "${_min_vers}" ] ||
    _cm2TestVersFn "${_bios_vers}" "${_min_vers}"; then
    echo "${_model_code} ${_bios_vers} vs. ${_min_vers}";
    exit 0;
  else
    echo "${_model_code} ${_bios_vers} vs. ${_min_vers}";
    exit 1;
  fi
}
## . END _chkBiosUpdateFn }

## BEGIN _chkHwConfigFn {
# Purpose: Check hw config components and return fixup steps in a
#   string. This string can be sent to _fixHwConfigFn using the
#   fix-hw-config directive.
#
_chkHwConfigFn () {
  declare _is_nv_system _do_force _reason_list _dmi_hw_config_code \
    _dmi_hw_model_code _file_hw_config_code _file_hw_model_code \
    _is_hw_reconfig _msg _tool_pkg_suffix _tool_pkg_name _lspci_exe;

  _do_force='n';
  if [[ "${1:-}" =~ ^[Yy] ]]; then _do_force='y'; fi

  _is_hw_reconfig='n';
  _reason_list=();
  _dmi_hw_config_code="$(_cm2EchoModelStrFn 'config_code')";
  _dmi_hw_model_code="$( _cm2EchoModelStrFn 'code')";
  _file_hw_config_code="$( cat "${_hwConfigCodeFile}" || echo '' )";
  _file_hw_model_code="$(  cat "${_hwModelCodeFile}"  || echo '' )";

  if [ "${_file_hw_config_code}" != "${_dmi_hw_config_code}" ]; then
    _msg='reconfig-hw;;Hardware signature does not match expected: ';
    _msg+="${_file_hw_config_code} != ${_dmi_hw_config_code}";
    _reason_list+=( "${_msg}" );
    _is_hw_reconfig='y';
  elif [ "${_do_force}" = 'y' ]; then
    _msg='reconfig-hw;;Hardware reconfigure forced.';
    _reason_list+=( "${_msg}" );
    _is_hw_reconfig='y';
  fi

  # TODO Flag as hw reconfig if hw_model_code does not match
  # if [ "${_file_hw_model_code}" != "${_dmi_hw_model_code}" ]; then
  #   _is_hw_reconfig='y';
  # fi

  ## Begin Adjust tool suffix per config code {
  # kfocus-tools-nxg1, kfocus-tools-other, kfocus-tools (#3424)
  _tool_pkg_suffix='';
  case "${_dmi_hw_config_code}" in
    default|generic|m2g4|m2g5|xeg2) _tool_pkg_suffix='';;
    nxg1) _tool_pkg_suffix='-nxg1';;
    ir14g1|other|*) _tool_pkg_suffix='-other';;
  esac
  _tool_pkg_name="kfocus-tools${_tool_pkg_suffix}";
  if ! _cm2ChkPkgFn "${_tool_pkg_name}"; then
    _tool_pkg_name='kfocus-tools-other';
  fi

  if ! _cm2ChkInstalledPkgFn "${_tool_pkg_name}"; then
    _msg="install-hw-tools;${_tool_pkg_name};";
    _msg+="Package ${_tool_pkg_name} needs to be installed.";
    _reason_list+=( "${_msg}" );
  elif [ "${_do_force}" = 'y' ]; then
    _msg="install-hw-tools;${_tool_pkg_name};";
    _msg+="Package ${_tool_pkg_name} reinstall forced.";
    _reason_list+=( "${_msg}" );
  fi
  ## . End Adjust tool suffix per config code }

  ## Begin add or remove extra keyboard package {
  if [ "${_dmi_hw_model_code}" = 'm2g5p' ]; then
    if ! _cm2ChkInstalledPkgFn 'kfocus-keyboard-ite'; then
      _msg='install-kbd-ite;;';
      _msg+='Package kfocus-keyboard-ite needs to be installed.';
      _reason_list+=( "${_msg}" );
    elif [ "${_do_force}" = 'y' ]; then
      _msg='install-kbd-ite;;';
      _msg+='Package kfocus-keyboard-ite reinstall forced.';
      _reason_list+=( "${_msg}" );
    fi
  else
    if _cm2ChkInstalledPkgFn 'kfocus-keyboard-ite'; then
      _msg='purge-kbd-ite;;';
      _msg+='Package kfocus-keyboard-ite needs purge.';
      _reason_list+=( "${_msg}" );
    fi
  fi
  ## . End add or remove extra keyboard package }

  ## Begin Run lib updates iff hardware reconfig is flagged {
  #   do_force OR mismatched config-code triggers this.
  # Thus do_force is NOT guaranteed = 'y' for this block.
  #
  if [ "${_is_hw_reconfig}" = 'y' ]; then
    _is_nv_system="$(_cm2EchoModelStrFn 'is_nv_sys')";

    # Supplemental check for Nvidia systems
    if [ "${_is_nv_system}" != 'y' ]; then
      _lspci_exe="$(command -v lspci || true)";
      if [ -n "${_lspci_exe}" ] \
        && grep -qi 'vga.*nvidia' < <("${_lspci_exe}"); then
        _is_nv_system='y';
      fi
    fi

    # Install nvidia libs
    if [ "${_is_nv_system}" = 'y' ]; then
      if ! _cm2ChkInstalledPkgFn 'kfocus-nvidia'; then
        _msg='install-nvidia;;Nvidia libraries needs to be installed.';
        _reason_list+=( "${_msg}" );
      elif [ "${_do_force}" = 'y' ]; then
        _msg='install-nvidia;;Nvidia libraries reinstall forced.';
        _reason_list+=( "${_msg}" );
      fi
    fi

    # Install synaptics for devices that need it
    case "${_dmi_hw_config_code}" in
      default|generic|xeg2)  # For models m1g1, m2g1-3 | xeg1 | xeg2
        if ! _cm2ChkInstalledPkgFn 'xserver-xorg-input-synaptics'; then
          _msg='install-synaptics;;';
          _msg+='Synaptics touchpad driver needs to be installed.';
          _reason_list+=( "${_msg}" );
        elif [ "${_do_force}" = 'y' ]; then
          _msg='install-synaptics;;';
          _msg+='Synaptics touchpad driver forced re-installation.';
          _reason_list+=( "${_msg}" );
        fi
      ;;
      *) true;
    esac
  fi
  ## . End Run lib updates iff hardware reconfig is flagged }

  ( IFS=$'|'; echo "${_reason_list[*]}"; )
}
## . END _chkHwConfigFn }

## BEGIN _fixHwConfigFn {
# Purpose: Loop through hardware config steps and execute as needed.
#          On completion, writes the model code to a kfocus file.
#
_fixHwConfigFn () {
  declare _reason_str _reason_list _loop_line _bit_list _cmd_list _model_code;

  _reason_str="${1:-}";
  if [ -z "${_reason_str}" ]; then return 0; fi

  IFS='|' read -r -a _reason_list <<< "${_reason_str}";
  _updatePkgsFn;
  for _loop_line in "${_reason_list[@]}"; do
    IFS=';' read -r -a _bit_list <<< "${_loop_line}";
    case "${_bit_list[0]}" in
      'reconfig-hw'       ) _cmd_list=( '_reconfigHwPkgFn'    );;
      'install-hw-tools'  ) _cmd_list=( '_installToolsPkgFn'  );
        _cmd_list+=( "${_bit_list[1]:-}" );;
      'install-kbd-ite'   ) _cmd_list=( '_installKbdIteFn'    );;
      'install-nvidia'    ) _cmd_list=( '_installNvidiaFn'    );;
      'install-synaptics' ) _cmd_list=( '_installSynapticsFn' );;
      'purge-kbd-ite'     ) _cmd_list=( '_purgeKbdIteFn'      );;
      *) _cm2WarnStrFn "Option ${_bit_list[0]} is not supported";
        continue;
        ;;
    esac
    if ! "${_cmd_list[@]}"; then
      _cm2WarnStrFn "Trouble with step |${_loop_line}| |${_cmd_list[*]}|";
    fi
  done

  # Indicate post-install (finalize) setup is complete
  _model_code="$(_cm2EchoModelStrFn 'code')"    || return;
  mkdir -p "${_varLibDir}"                      || return;
  # This is set only on post-install configure
  echo "${_model_code}" > "${_hwModelCodeFile}" || true;
}
## . END_fixHwConfigFn }

## BEGIN _prepareSnapshotFn {
#
_prepareSnapshotFn () {
  [ -z "${_rollbackSetExe}" ] && return;

  "${_rollbackSetExe}" 'prepareSystem';
}
## . END _prepareSnapshotFn }

## BEGIN _clearRestoreFn () {
#
_clearRestoreFn () {
  rm '/var/lib/kfocus/kfocus_rollback_restore_complete';
}
## . END _clearRestoreFn () }

## BEGIN _mainFn {
_mainFn () {
  declare _arg_str;
  _arg_str="${1:-}";
  case "${_arg_str}" in
    'chk-bios'        ) _chkBiosUpdateFn;;
    'chk-hw-config'   ) _chkHwConfigFn;;
    'force-hw-config' ) _chkHwConfigFn 'y';;
    'fix-hw-config'   ) _fixHwConfigFn "${2:-}";;
    'prep-snapshot'   ) _prepareSnapshotFn;;
    'clear-restore'   ) _clearRestoreFn;;
    *) _cm2WarnStrFn "Unrecognized directive |${_arg_str}|";;
  esac
}
## . END _mainFn }

## BEGIN Declare global variables {
declare  _binName _binDir _baseName _assignList \
  _focusRxVersExe _hwConfigCodeFile _hwModelCodeFile;

_varLibDir='/var/lib/kfocus';
_hwConfigCodeFile="${_varLibDir}/hw_config_code";
_hwModelCodeFile="${_varLibDir}/hw_model_code";
## . END Declare global variables }

## BEGIN Run main if script is not sourced {
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(  readlink -f "$0"        )" || exit 101;
  _binDir="$(   dirname  "${_binName}"  )" || exit 101;
  _baseDir="$(  dirname  "${_binDir}"   )" || exit 101;
  _baseName="$( basename "${_binName}"  )" || exit 101;
  _importCommonFn;

  _assignList=(
    "_focusRxVersExe|${_binDir}/kfocus-rx-version"
    "_rollbackSetExe|${_binDir}/kfocus-rollback-set||optional"
  );
  if ! _cm2AssignExeVarsFn  "${_assignList[@]}"; then
    _cm2ErrStrFn 'Could not assign variable';
    exit 1;
  fi

  _mainFn "$@";
fi
## . END Run main if script is not sourced }
