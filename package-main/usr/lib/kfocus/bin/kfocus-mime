#!/bin/bash
#
# Copyright 2020-2024 MindShare Inc.
# Written for Kubuntu Focus by:
#   Michael Mikowski, Erich Eickmeyer, Aaron Rainbolt
#   with some code and configurations courtesy of deb-get found at
#   https://github.com/wimpysworld/deb-get.
#
# Name   : kfocus-mime
# Purpose: Launch app for link with x-schema-handler/kfocus-mime
#          Recent additions for repo add from deb-get project
# License: GPL v2
# Example: xdg-open ./link.kfocus-001
#          kfocus-mime -k zoom
# Run By : Browser through xdg-open, direct call to ensure app is installed
# Spec   : 951, 2117, 2146, 2330, 2416, 3103, 3314, 3588, 4124, 4258,
#          4274, 4431
#
set -u;

# app_id|cmd_str;with;args|sniff_str|pkg_str|descr_str
# 1       2                 3         4       5
_exeLookupList=(
  'apt-rollback|konsole;-e;man;apt-rollback|apt-rollback|apt-rollback|AptRollback: Rollback System Packages'
  'audacity|audacity||audacity|Audacity: Edit Sound'
  'aws-cli|konsole;--hold;-e;aws;help|aws|awscli|AWS: Command Line DevOps Tool'
  'azure-cli|konsole;--hold;-e;az;--help|az|azure-cli|Azure: Command Line DevOps Tool'
  'backintime|backintime-qt||backintime-qt|BackInTime: Backup Files'
  'blender|blender||blender|Blender: 3D Modeller and Renderer'
  'code|code||code|Microsoft Visual Studio Code: Development IDE'
  'cpupower-gui|cpupower-gui|cpupower-gui|cpupower-gui|CPU Power GUI: Manage CPU power'
  'darktable|darktable||darktable||DarkTable: Edit RAW Photos'
  'dolphin|dolphin||dolphin|Dolphin: Manage Files'
  'elisa|elisa||elisa|Elisa Music Player'
  'ffmpeg|konsole;-e;man ffmpeg|ffmpeg|ffmpeg|Tools for Transcoding|FFMpeg: Stream and Play Multimedia Files'
  'filezilla|filezilla||filezilla|Filezilla: Transfer Files'
  'firefox|firefox||firefox|Firefox: Browse the Web with Mozilla Firefox'
  'gcloud|konsole;-e;main;gcloud;help|gcloud|google-cloud-cli|GCS: Google Cloud Services CLI'
  'ghb|ghb||handbrake|Handbrake: Rip and Transcode DVDs and Video'
  'git-cola|git-cola||git-cola|Git-Cola: Explore Git Branches GUI'
  'gimp|gimp||gimp|Gimp: Edit and Create Raster Images'
  'google-chrome|google-chrome||google-chrome-stable|Chrome: Browse the Web with Google Chrome'
  'google-hangouts|/usr/lib/kfocus/bin/kfocus-web-launcher;--new-window;https://meet.google.com||kfocus-main|Google Meet'
  'gvim|gvim||vim-gtk3|Vim GUI: Edit Text With Extreme Power'
  'gwenview|gwenview||gwenview|Gwenview: Image and Document Viewer'
  'inkscape|inkscape||inkscape|Inkscape: Edit Scalable Vector Graphics'
  'insync|insync;start||insync-dolphin|Insync: Sync Google Drive and Others'
  'jekyll|konsole;-e;man jekyll|jekyll|jekyll|Jekyll: Create Static Web Sites'
  'kate|kate||kate|Kate: Edit Text with Power'
  'kde-connect|kdeconnect-settings||kdeconnect|KDE Connect: Connect Smartphones to Desktop'
  'kdenlive|kdenlive||kdenlive|KDEnlive: Edit  Non-Linear Videos'
  'kdiff3|kdiff3||kdiff3|KDiff3: Diff and Merge Files and Directories'
  'keepassxc|keepassxc||keepassxc|KeepassXC: Password Manager'
  'kfocus_apps|/usr/lib/kfocus/bin/kfocus-web-launcher;--new-window;https://kfocus.org/wf/apps.html||kfocus-main|KFocus Curated Apps: find and install apps'
  'kfocus_conda|konsole;-e;kfocus-conda|kfocus-conda|kfocus-conda|KFocus Conda: Deep Learning Suite'
  'kfocus_extra|konsole;-e;pkexec;kfocus-extra|kfocus-extra|kfocus-main|KFocus Extra: Install extra and restricted software'
  'kfocus_fan|kfocus-fan||kfocus-fan|Fan Control: Select a desired fan profile.'
  'kfocus_focusrx|focusrx;-f||kfocus-main|FocusRx: System diagnostics and repair'
  'kfocus_guided|/usr/lib/kfocus/bin/kfocus-web-launcher;--new-window;https://kfocus.org/wf||kfocus-main|KFocus Guided Solutions'
  'kfocus_help|/usr/lib/kfocus/bin/kfocus-web-launcher;--new-window;https://kfocus.org/wf/help.html||kfocus-main|KFocus Help: Help and FAQs'
  'kfocus_kb_color|kfocus-kb-color||kfocus-kb-color|Keyboard Color: Set color and intensity'
  'kfocus_kclean|/usr/lib/kfocus/bin/kfocus-kclean;-f|/usr/lib/kfocus/bin/kfocus-kclean|kfocus-main|Kernel Cleaner: Clean up old kernels'
  'kfocus_pick_gcc|kfocus-pick-gcc||kfocus-pick-gcc|KFocus Pick GCC: Select default compiler toolchain'
  'kfocus_power|kfocus-power||kfocus-power|KFocus Power: Control CPU Power'
  'kfocus_rollback|/usr/lib/kfocus/bin/kfocus-rollback|/usr/lib/kfocus/bin/kfocus-rollback|kfocus-rollback|KFocus Rollback: Restore the system to an earlier state'
  'kfocus_vidsync|kfocus-vidsync||kfocus-vidsync|KFocus Vidsync: Sync video across all displays'
  'kfocus_welcome|/usr/lib/kfocus/bin/kfocus-web-launcher;--new-window;https://docs.google.com/presentation/d/e/2PACX-1vTsKGkzy_tFm2xZo-BYX7mqeLG43C2vy108qsWZ2L_c4XJGXEVh2fAt3sNvgiqXfw4OFPWynHS-32xx/pub?start=false&loop=false&delayms=3000||kfocus-main|KFocus Welcome Document'
  # app_id|cmd_str;with;args|sniff_str|pkg_str|descr_str
  # 1       2                 3         4       5
  'kfocus_wizard|/usr/lib/kfocus/bin/kfocus-firstrun-bin;-f||kfocus-firstrun-bin|Welcome Wizard: Configure your apps'
  'kleopatra|kleopatra||kleopatra|Kleopatra: Unified Crypto GUI'
  'konsole|konsole||konsole|Konsole: Use an X Terminal Emulator'
  'krita|krita||krita|Krita: Raster Image Editor'
  'kruler|kruler||kruler|Kruler: Measure Screen Objects'
  'kubectl|konsole;--hold;-e;kubectl;help|kubectl|kubectl|Kubernetes: Command Line Container Management'
  'libreoffice-base|libreoffice;--base||libreoffice-base|LibreOffice Database: Connect Databases'
  'libreoffice-calc|libreoffice;--calc||libreoffice-calc|LibreOffice Calc: Create and Edit Spreadsheets'
  'libreoffice-draw|libreoffice;--draw||libreoffice-draw|LibreOffice Drawing: Create Vector and Raster Images'
  'libreoffice-impress|libreoffice;--impress||libreoffice-impress|LibreOffice Impress: Create and Edit Presentations'
  'libreoffice-writer|libreoffice;--writer||libreoffice-writer|LibreOffice Writer: Word Processor'
  'lutris|lutris||lutris|Lutris: Play Games With Wine'
  'meld|meld||meld|Meld: Visual Difference and Merge Tool'
  'minecraft-launcher|minecraft-launcher||minecraft-launcher|Minecraft: Launch Minecraft'
  'nvidia-settings|nvidia-settings||nvidia-settings|Nvidia Settings: Configure Nvidia GPUs'
  'obs|obs||obs-studio|OBS Studio: Record and Stream Live Video'
  'okular|okular||okular|Okular: View PDFs and Other Documents'
  'optipng|konsole;-e;man optipng|optipng|optipng|Optipng: Optimize PNG Images'
  'pavucontrol|pavucontrol-qt||pavucontrol-qt|PulseAudio: Manage Audio Volume'
  'plasma-discover|plasma-discover||plasma-discover|Discover: Manage Software'
  'ppa-purge|konsole;-e;man ppa-purge|ppa-purge|ppa-purge|PPA Purge: Purge PPAs'
  'rar|konsole;-e;man rar|rar|rar|Rar: Create .rar Archive Files'
  'simplescreenrecorder|simplescreenrecorder||simplescreenrecorder|SimpleScreenRecorder: Record Your Screen with Powerful Options'
  'skype|skype||skype|Skype: Video Call Platform'
  'slack|slack||slack-desktop|Slack: Team Messaging'
  'spectacle|spectacle||kde-spectacle|Spectacle: Take Screenshots'
  'steam|steam||steam|Steam: Manage and Play Games'
  'sublime-text|subl||sublime-text|Sublime Text editor'
  'systemsettings5|systemsettings5||systemsettings|System Settings: Adjust Your System'
  'telegram-desktop|telegram-desktop||telegram-desktop|Telegram: Encrypted Instant Messenger'
  'thunderbird|thunderbird||thunderbird|Thunderbird: Email and Calendar'
  'vlc|vlc||vlc|VLC: Play and Stream Video and Multimedia'
  'wallpapers|dolphin;/usr/share/wallpapers||dolphin|Wallpapers: View Wallpaper Images'
  'webcamoid|webcamoid||webcamoid|Webcamoid: Test Your Webcam'
  'winff|winff||winff-qt|WinFF: Convert Video using ffmpeg'

  # Packages with special handlers
  'docker|!docker|docker|docker-ce|Docker: Container Engine'
  'dropbox|!dropbox|dropbox|dropbox|Dropbox: Sync to Cloud Storage'
  'jetbrains-toolbox|!jetbrains-toolbox|jetbrains-toolbox|jetbrains-toolbox|JetBrains Toolbox: Industry Standard IDEs'
  'intellij|!intellij|jetbrains-toolbox|jetbrains-toolbox|IntelliJ: JetBrains Java IDE'
  'pycharm|!pycharm|jetbrains-toolbox|jetbrains-toolbox|PyCharm: JetBrains Python IDE'
  'webstorm|!webstorm|jetbrains-toolbox|jetbrains-toolbox|WebStorm: JetBrains Web IDE'
  'virtualbox|!virtualbox||virtualbox|VirtualBox: Run Virtual Machines'
  'zoom|!zoom||zoom|Zoom: Start and Join Video and Web Conferencing'

  # Future consideration: Nvidia CUDA and ML libs

  # Deprecated
  # 'atom|atom;--no-sandbox||atom|Atom: A hackable text editor.'
  # 'brave-browser|brave-browser||brave-browser|Brave Browser'
  # 'jetbrains-toolbox-plain|jetbrains-toolbox|jetbrains-toolbox|jetbrains-toolbox|JetBrains Toolbox: Industry Standard IDEs'
);

## BEGIN _importCommonFn {
# Run ls-common-symbols.sh to get list of used symbols
#
_importCommonFn () {
  declare _lib_file;
  _lib_file="${_baseDir}/lib/common.2.source";
  if [ -r "${_lib_file}" ]; then
    # shellcheck source=../lib/common.2.source
    source "${_lib_file}" || exit 202;
  else
    echo 1>&2 "${_baseName}: ABORT - Cannot source lib |${_lib_file}|";
    exit 202;
  fi
}
## . END _importCommonFn }

_exitIfRootFn () {
  if [ "$(id -u)" = '0' ]; then
    _cm2WarnStrFn 'kfocus-mime cannot not be run as root.';
    exit 1;
  fi
}

_urlDecodeFn () {
  declare _url_str;

  _url_str="${1:-}";
  if [ -z "${_url_str}" ]; then
    _cm2WarnStrFn 'No URL provided.';
    exit 1;
  fi

  # https://stackoverflow.com/questions/6250698/how-to-decode-url-encoded-string-in-shell
  _url_str="${_url_str//+/ }";
  _url_str="$(echo -e "${_url_str//%/\\x}")";
  echo "${_url_str}";
}

## BEGIN deb-get functions {
# These functions are taken directly from the deb-get project with the
# intention of contributing to it and making it our pkexec backend.

function deb_azure-cli() {
  APT_KEY_URL="https://packages.microsoft.com/keys/microsoft.asc"
  APT_LIST_NAME="azure-cli"
  APT_REPO_URL="deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ ${UBUNTU_CODENAME} main"
  PRETTY_NAME="Azure CLI"
  WEBSITE="https://docs.microsoft.com/en-us/cli/azure/install-azure-cli"
}
function deb_backintime() {
  PPA="ppa:ppa:bit-team/stable"
  PRETTY_NAME="BackInTime"
  WEBSITE="https://backintime.readthedocs.io/en/latest/"
}
# Brave is currently broken and not available from the Curated Apps webpage.
# The key is out-of-date. We would like to fix this with a method that does
# not require trusted.gpg.d, such as creating a sources.list file for Brave
# that embeds the key directly.
#
#function deb_brave-browser() {
#  APT_KEY_URL="https://brave-browser-apt-release.s3.brave.com/brave-core.asc"
#  APT_LIST_NAME="brave-browser-release"
#  APT_REPO_URL="deb [arch=amd64] https://brave-browser-apt-release.s3.brave.com/ stable main"
#  PRETTY_NAME="Brave"
#  WEBSITE="https://brave.com/"
#}
function deb_code() {
  APT_KEY_URL="https://packages.microsoft.com/keys/microsoft.asc"
  APT_LIST_NAME="vscode"
  APT_REPO_URL="deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main"
  PRETTY_NAME="Visual Studio Code"
  WEBSITE="https://code.visualstudio.com/"
}
function deb_docker-ce() {
  ARCHS_SUPPORTED="amd64 arm64 armhf"
  APT_KEY_URL="https://download.docker.com/linux/ubuntu/gpg"
  APT_LIST_NAME="docker"
  APT_REPO_URL="deb [arch=${HOST_ARCH}] https://download.docker.com/linux/ubuntu ${UBUNTU_CODENAME} stable"
  APT_EXTRA_PKGLIST=('docker-compose-plugin')
  PRETTY_NAME="Docker Engine"
  WEBSITE="https://www.docker.com/"
}
function deb_dropbox() {
  # Verified 2024-05-07
  APT_KEY_URL="https://linux.dropbox.com/fedora/rpm-public-key.asc"
  APT_LIST_NAME="dropbox"
  APT_REPO_URL="deb [arch=i386,amd64 signed-by=/usr/share/keyrings/dropbox.asc] http://linux.dropbox.com/ubuntu noble main"
  PRETTY_NAME="Dropbox"
  WEBSITE="https://www.dropbox.com/"
}
function deb_google-chrome-stable() {
  APT_KEY_URL="http://dl.google.com/linux/linux_signing_key.pub"
  APT_LIST_NAME="google-chrome"
  APT_REPO_URL="deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
  EULA="By downloading Chrome, you agree to the Google Terms of Service and Chrome and Chrome OS Additional Terms of Service\n - https://policies.google.com/terms\n - https://www.google.co.uk/intl/en/chrome/terms/"
  PRETTY_NAME="Google Chrome"
  WEBSITE="https://www.google.com/chrome/"
}
function deb_insync-dolphin() {
  ARCHS_SUPPORTED="amd64"
  APT_KEY_ID='ACCAF35C'
  # See https://www.insynchq.com/downloads/linux#apt
  #   sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys ACCAF35C
  #   If the previous command did not work, use this instead:
  #   sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys ACCAF35C
  #   GPG_KEY_ID="A684470CACCAF35C" # upstream from deb-get
  APT_LIST_NAME="insync"
  APT_REPO_URL="deb http://apt.insync.io/ubuntu ${UBUNTU_CODENAME} non-free contrib"
  PRETTY_NAME="Insync"
  WEBSITE="https://www.insynchq.com/"
  PRETTY_NAME="Insync"
  WEBSITE="https://www.insynchq.com/"
}
function deb_keepassxc() {
  PPA="ppa:phoerious/keepassxc"
  PRETTY_NAME="KeePassXC"
  WEBSITE="https://keepassxc.org/"
}
function deb_kubectl() {
  GPG_KEY_URL="https://packages.cloud.google.com/apt/doc/apt-key.gpg"
  APT_LIST_NAME="kubectl"
  # APT_REPO_URL="deb https://apt.kubernetes.io/ kubernetes-xenial main"
  APT_REPO_URL="deb [signed-by=/usr/share/keyrings/kubectl-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main"
  PRETTY_NAME="Kubernetes"
  WEBSITE="https://kubernetes.io"
}
function deb_lutris() {
  PPA="ppa:lutris-team/lutris"
  PRETTY_NAME="Lutris"
  WEBSITE="https://lutris.net/"
}
# Node.js is preinstalled. This implementation does not quite work.
# function deb_nodejs() {
#   GPG_KEY_URL="https://deb.nodesource.com/gpgkey/nodesource.gpg.key"
#   APT_REPO_URL="deb https://deb.nodesource.com/node_16.x jammy main"
#   APT_LIST_NAME="nodesource"
#   PRETTY_NAME="NodeJS 16.x"
# }
function deb_nvidia-cuda() {
  APT_KEY_URL="https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/3bf863cc.pub"
  APT_LIST_NAME="nvidia-cuda"
  APT_REPO_URL="deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64 /"
  PRETTY_NAME="Nvidia CUDA and ML"
  WEBSITE="https://developer.nvidia.com"
}
function deb_nvidia-ml() {
  APT_KEY_URL="https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/7fa2af80.pub"
  APT_LIST_NAME="nvidia-ml"
  APT_REPO_URL="deb https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu1804/x86_64 /"
  PRETTY_NAME="Nvidia ML (deprecated; use CUDA for later lib versions)"
  WEBSITE="https://developer.nvidia.com"
}
function deb_skype() {
  PRETTY_NAME="Skype"
  SNAP_PKG_NAME="skype"
  WEBSITE="https://www.skype.com/"
}
function deb_slack-desktop() {
  APT_KEY_URL="https://packagecloud.io/slacktechnologies/slack/gpgkey"
  APT_LIST_NAME="slack"
  APT_REPO_URL="deb https://packagecloud.io/slacktechnologies/slack/debian/ jessie main"
  PRETTY_NAME="Slack"
  WEBSITE="https://slack.com/"
}
function deb_sublime-text() {
  APT_KEY_URL="https://download.sublimetext.com/sublimehq-pub.gpg"
  APT_LIST_NAME="sublime-text"
  APT_REPO_URL="deb https://download.sublimetext.com/ apt/stable/"
  PRETTY_NAME="Sublime Text"
  WEBSITE="https://www.sublimetext.com/"
}
function deb_minecraft-launcher() {
  URL=$(unroll_url "https://launcher.mojang.com/download/Minecraft.deb")
  VERSION_PUBLISHED='latest';
  PRETTY_NAME="Minecraft Launcher"
  WEBSITE="https://launcher.mojang.com"
}
function deb_zoom() {
  URL=$(unroll_url "https://zoom.us/client/latest/zoom_amd64.deb")
  VERSION_PUBLISHED="$(echo "${URL}" | cut -d'/' -f5)"
  PRETTY_NAME="Zoom"
  WEBSITE="https://zoom.us/"
}
function deb_awscli() {
  PRETTY_NAME="AWS CLI"
  WEBSITE="https://aws.amazon.com/cli/"
  SNAP_PKG_NAME="aws-cli"
  IS_CLASSIC_SNAP='y'
}
function deb_telegram-desktop() {
  PRETTY_NAME="Telegram Desktop"
  WEBSITE="https://telegram.org/"
  SNAP_PKG_NAME="telegram-desktop"
}
# Extracted from main
function _makeAppListFn () {
  IFS=$'\n' read -r -d '' -a _pkgNameList < <(
    declare -F | grep 'deb_' |sed 's|declare -f deb_||g' |sort
  );
}
function version_deb() {
  if _cm2ChkInstalledPkgFn "${APP}"; then
    dpkg -s "${APP}" | grep ^Version: | cut -d' ' -f2
  else
    echo ""
  fi
}
function unroll_url() {
  curl -w "%{url_effective}\n" -I -L -s -S "${1}" -o /dev/null
}
# Extracted from validate_deb() and main
function _readPkgRepoInfoFn () {
  declare _pkg_name;
  _pkg_name="${1:-}";
  _makeAppListFn;

  export CACHE_DIR ERROR_STR HOST_CPU HOST_ARCH USER_AGENT UBUNTU_CODENAME \
    APT_KEY_URL GPG_KEY_URL APT_LIST_NAME APT_REPO_URL APT_EXTRA_PKGLIST PPA \
    ARCHS_SUPPORTED METHOD EULA SNAP_PKG_NAME URL VERSION_INSTALLED \
    VERSION_PUBLISHED PRETTY_NAME WEBSITE;

  CACHE_DIR='/var/cache/deb-get'

  # shellcheck disable=SC2076
  if [[ ! " ${_pkgNameList[*]} " =~ " ${_pkg_name} " ]]; then
    ERROR_STR="ABORT: Package |${_pkg_name}| is not supported";
    return 1;
  fi

  HOST_CPU="$(uname -m)"
  case ${HOST_CPU} in
    aarch64|armv7l|x86_64) HOST_ARCH="$(dpkg --print-architecture)";;
    *) ERROR_STR="ABORT: CPU |${HOST_CPU}| is not supported.";
      return 1;;
  esac

  USER_AGENT="Mozilla/5.0 (X11; Linux ${HOST_CPU}) AppleWebKit/537.36";
  USER_AGENT+=" (KHTML, like Gecko) Chrome/100.0.4896.127 Safari/537.36";

  if [ -e /etc/os-release ]; then
    UBUNTU_CODENAME=$(grep UBUNTU_CODENAME /etc/os-release | cut -d'=' -f2)
  else
    ERROR_STR="ABORT: /etc/os-release not found.";
    return 1;
  fi

  APT_KEY_URL='';
  GPG_KEY_ID='';
  GPG_KEY_URL='';
  APT_KEY_ID='';
  APT_LIST_NAME='';
  APT_REPO_URL='';
  APT_EXTRA_PKGLIST=();
  PPA='';
  ARCHS_SUPPORTED='amd64';
  METHOD='website';
  EULA='';
  SNAP_PKG_NAME='';
  IS_CLASSIC_SNAP='';
  URL='';
  VERSION_INSTALLED='';
  VERSION_PUBLISHED='';
  PRETTY_NAME='';
  WEBSITE='';

  # Source the variables
  if "deb_${_pkg_name}"; then
    APP="${_pkg_name}";
  else
    ERROR_STR="ABORT: Could not find info for |${_pkg_name}|";
    return 1;
  fi

  VERSION_INSTALLED=$(version_deb)
  if [ -n "${SNAP_PKG_NAME:-}" ]; then
    METHOD='snap';
  elif [ -n "${APT_REPO_URL:-}" ]; then
    METHOD='apt';
  elif  [ -n "${PPA:-}" ]; then
    METHOD='ppa';
  fi
}
function update_apt() {
  apt-get -q -y update
}
function install_apt() {
  if [ -n "${GPG_KEY_ID}" ] || [ -n "${GPG_KEY_URL}" ]; then
    if [ ! -d /usr/share/keyrings ]; then
      mkdir -p /usr/share/keyrings 2>/dev/null
    fi
  fi

  if [ -n "${APT_KEY_ID}" ]; then
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys "${APT_KEY_ID}";
  elif [ -n "${GPG_KEY_ID}" ]; then
    gpg --no-default-keyring --keyring \
      "/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring.gpg" \
      --keyserver keyserver.ubuntu.com --recv "${GPG_KEY_ID}";
  elif [ -n "${GPG_KEY_URL}" ]; then
    wget -q "${GPG_KEY_URL}" -O \
      "/usr/share/keyrings/${APT_LIST_NAME}-archive-keyring.gpg";
  elif [ -n "${APT_KEY_URL}" ]; then
    wget -q "${APT_KEY_URL}" -O \
      "/etc/apt/trusted.gpg.d/${APT_LIST_NAME}.asc";
  fi

  ## TODO: https://superuser.com/questions/1641291
  echo -e "${APT_REPO_URL}" > "/etc/apt/sources.list.d/${APT_LIST_NAME}.list";
  update_apt

  # Install all packages as a group
  if (( "${#APT_EXTRA_PKGLIST[@]}" > 0 )); then
    apt-get -q -y install "${APP}" "${APT_EXTRA_PKGLIST[@]}";
  else
    apt-get -q -y install "${APP}";
  fi
}
function _isUserInActiveGroupFn () {
  declare _group_name;
  _group_name="${1:-}";
  if [ -z "${_group_name}" ]; then
    return 1;
  fi
  groups |grep -qE '(^|\s)'"${_group_name}"'(\s|$)';
}
function _isUserInGroupFn () {
  declare _group_name;
  _group_name="${1:-}";
  if [ -z "${_group_name}" ]; then
    return 1;
  fi
  grep "${_group_name}" /etc/group \
    | grep -qE '(:|,)'"${_userName}"'(,|$)';
}
function install_snap() {
  if [ "${IS_CLASSIC_SNAP:-}" = 'y' ]; then
    snap install --classic "${SNAP_PKG_NAME:-}";
  else
    snap install "${SNAP_PKG_NAME:-}";
  fi
}
function download_deb() {
  local URL="${1}"
  local FILE="${URL##*/}"
  mkdir -p "${CACHE_DIR}" 2>/dev/null
  chmod 755 "${CACHE_DIR}" 2>/dev/null

  if ! wget --quiet --continue --show-progress --progress=bar:force:noscroll \
    "${URL}" -O "${CACHE_DIR}/${FILE}"; then
    _cm2WarnStrFn "Failed to download ${URL}. Deleting ${CACHE_DIR}/${FILE}..."
    rm "${CACHE_DIR}/${FILE}" 2>/dev/null
  fi
}
function install_deb() {
  local URL="${1}"
  local FILE="${URL##*/}"

  if [ -z "${URL}" ]; then
    echo "Download URL is empty. Skipping."
    return
  fi

  if ! _cm2ChkInstalledPkgFn "${APP}"; then
    download_deb "${URL}"
    apt-get -q -y install "${CACHE_DIR}/${FILE}"
  fi
  if [ -f "${CACHE_DIR}/${FILE}" ]; then
    rm "${CACHE_DIR}/${FILE}" 2>/dev/null
  fi
}
function install_ppa() {
  if apt-add-repository -y --no-update "${PPA}"; then
    update_apt
    if ! _cm2ChkInstalledPkgFn "${APP}"; then
      apt-get -q -y install "${APP}"
    fi
  else
    # Remove repo if something when wrong
    apt-add-repository -y --remove "${PPA}"
  fi
}
## . END deb-get functions }

## BEGIN _echoKeyListFn {
_echoKeyListFn () {
  IFS=$'\n';
  echo "${_exeLookupList[*]}" |cut -f1 -d'|';
}
## . END _echoKeyListFn }

## BEGIN _echoInstallPromptMsgFn {
_echoInstallPromptMsgFn () {
  declare _app_id _pkg_name _descr_str _prompt_msg _report_str;

  _app_id="${1:-}";
  _pkg_name="${2:-}";
  _descr_str="${3:-Package}";
  _prompt_msg='';

  # If available in repo, prompt to install directly
  # TODO 2022-05-05 TEPID msm: Verify package comes from desired upstream repo
  _readPkgRepoInfoFn "${_pkg_name}";

  if _cm2ChkPkgFn "${_pkg_name}"; then
    echo -e "\n'${_descr_str}' is available ";
    echo -e "but it is not installed."
    echo -e "\nInstall and start now?\n";
    return 0;
  elif [ "${METHOD:-}" = 'snap' ]; then
    echo -e "\n'${_descr_str}' is available ";
    echo -e "only as a snap but is not installed.";
    echo -e "\nInstall and start now?\n";
    return 0;
  fi

  # Read repo info for pkg_name, bail if info not found
  if [ -n "${ERROR_STR:-}" ]; then
    echo -e "\n$'{_descr_str}'\n has no install candidate.\n";
    echo -e "REASON: ${ERROR_STR:-}\n";
    return 1;
  fi

  case "${METHOD:-}" in
    apt)  _report_str="  APT: ${APT_REPO_URL:-}";;
    ppa)  _report_str="  PPA: ${PPA:-}";;
    website) _report_str="  WEB: ${URL:-}";;
    *) echo -e "ABORT: Method '${METHOD:-}' is not supported.\n";
       return 1;;
  esac;

  echo -e "\n'${_descr_str}' is available."
  echo -e "Shall we install this repo now?";
  echo -e "\n${_report_str}\n\n   ";

  if [ -n "${EULA:-}" ]; then
    echo -e "\nOnly press OK if you agree with \n  the following EULA:";
    echo -e "${EULA:-}\n";
  fi
}
## . END _echoInstallPromptMsgFn }


## BEGIN _installPkgFn {
# Purpose: Install requested package
_installPkgFn () {
  declare _pkg_name;
  _pkg_name="${1:-}";

  # Install if already found in repo
  if _cm2ChkPkgFn "${_pkg_name}"; then
    apt-get install -q -y "${_pkg_name}";
    return;
  fi

  # Read repo info for pkg_name
  _readPkgRepoInfoFn "${_pkg_name}";
  if [ -n "${ERROR_STR:-}" ]; then
    echo -e "${ERROR_STR:-}";
    exit 1;
  fi

  # Dispatch
  case "${METHOD:-}" in
    direct|github|website) install_deb "${URL:-}";;
    apt) install_apt;;
    ppa) install_ppa;;
    snap) install_snap;;
    *) echo -e "Unexpected method |${METHOD:-}|";
      exit 1;;
  esac;
}
## . END _installPkgFn }

_promptFn () {
  _cm2PromptUserFn "$*" "${_baseName}" 'p';
}

_handleDockerSetupFn () {
  declare _msg01 _msg02 _ans_str;

  _msg01="$(cat <<EOT01
${_cm2HtmBeginStr}
${_cm2HtmPStr}Docker is installed, but user '${_userName}' <br>
must be added to the 'docker' group <br>
to run as a normal user.</p>

${_cm2HtmPStr}Add user '${_userName}' to the 'docker' <br>
group now?</p>
${_cm2HtmEndStr}
EOT01
  )";

  _msg02="$(cat <<EOT02
${_cm2HtmBeginStr}
${_cm2HtmPStr}Docker is installed, and user '${_userName}' <br>
is in the the 'docker' group. But that group <br>
is not active.</p>

${_cm2HtmPStr}Please log out and back in to activate that <br>
group if you wish  to run docker as a <br>
regular user instead of root.</p>
${_cm2HtmEndStr}
EOT02
   )";

  if _isUserInGroupFn 'docker'; then
   _cm2EchoFn "User '${_userName}' is in 'docker' group";
  else
    _ans_str="$(
      _cm2PromptUserFn "${_msg01}" 'Add to Group' 'a'
    )";
    if [ "${_ans_str}" = 'y' ]; then
      "${_escExe}" usermod -aG 'docker' "${_userName}" || true;
    fi
  fi

  if ! _isUserInGroupFn 'docker'; then return; fi

  if _isUserInActiveGroupFn 'docker'; then
    _cm2EchoFn "Group 'docker' is active";
    return;
  else
    _promptFn "${_msg02}";
  fi
}

_handleVboxSetupFn () {
  declare _msg0a _msg0b _msg0c _ans_str;

  _msg0a="$(cat <<EOT0A
${_cm2HtmBeginStr}
${_cm2HtmPStr}The 'VirtualBox Extension Pack' does not appear <br>
installed. This is required to access hardware<br>
features like USB device integration.</p>

${_cm2HtmPStr}To install the extension pack now, open a <br>
terminal and run the following:</p>

${_cm2HtmPStr}<code>sudo apt install virtualbox-ext-pack</code><br></p>
${_cm2HtmEndStr}
EOT0A
  )";

  _msg0b="$(cat <<EOT0B
${_cm2HtmBeginStr}
${_cm2HtmPStr}VirtualBox is installed, but user '${_userName}' <br>
must be added to the 'vboxusers' group <br>
to use all the features.</p>

${_cm2HtmPStr}Add user '${_userName}' to the 'vboxusers' <br>
group now?</p>
${_cm2HtmEndStr}
EOT0B
  )";

  _msg0c="$(cat <<EOT0C
${_cm2HtmBeginStr}
${_cm2HtmPStr}VirtualBox is installed, and the user <br>
'${_userName}' is in the 'vboxusers' group. But that<br>
group is not active.</p>

${_cm2HtmPStr}Please log out and back in to activate <br>
the 'vboxusers' group so you can use <br>
more VirtualBox features.</p>
${_cm2HtmEndStr}
EOT0C
  )";

  if _cm2ChkInstalledPkgFn 'virtualbox-ext-pack'; then
    _cm2EchoFn 'VirtualBox Extension Pack installed';
  else
    _promptFn "${_msg0a}";
  fi

  if _isUserInGroupFn 'vboxusers'; then
    _cm2EchoFn "User '${_userName}' is in 'vboxusers' group";
  else
    _ans_str="$(
      _cm2PromptUserFn "${_msg0b}" 'Add to Group' 'a'
    )";
    if [ "${_ans_str}" = 'y' ]; then
      "${_escExe}" usermod -aG 'vboxusers' "${_userName}" || true;
    fi
  fi

  if ! _isUserInGroupFn 'vboxusers'; then return; fi

  if _isUserInActiveGroupFn 'vboxusers'; then
    _cm2EchoFn "Group 'vboxusers' is active";
    return;
  else
    _promptFn "${_msg0c}";
  fi
}

## BEGIN _runAppHandlerFn {
# Summary  : _runAppHandlerFn <app_id> <descr_str>
# Example  : _runAppHandlerFn 'dropbox' 'Dropbox: Sync to ...'
# Purpose  : Run the special handlers for provided _app_id.
#          : This is called only when the cmd_str is prefixed by an '!'
#          : and after installation is complete.
# Arguments: _app_id    : App identifier key
#            _descr_str : App description
#
_runAppHandlerFn () {
  declare _app_id _descr_str _prompt_msg _cmd_str \
    _exe_str _arg_list _run_list;

  _app_id="${1:-}";
  _descr_str="${2:-}";
  _prompt_msg='';
  _arg_list=();

  _cm2EchoFn "Running handler for app_id |${_app_id}|";

  case "${_app_id}" in
    intellij|pycharm|webstorm)
      _prompt_msg="$(cat <<EOT
${_cm2HtmPStr}Click to start JetBrain toolbox <br>
and select the tool for <br>
'${_descr_str}'.</p>

${_cm2HtmPStr}You may click on the Toolbox icon <br>
in the System Tray to reopen <br>
the toolbox as needed.</p>
EOT
      )";
      _cmd_str='jetbrains-toolbox';
      ;;

    jetbrains-toolbox)
      _prompt_msg="$(cat <<EOT
${_cm2HtmPStr}Click OK to start JetBrain toolbox.</p>

${_cm2HtmPStr}You may click on the Toolbox icon <br>
in the System Tray to reopen <br>
the toolbox as needed.</p>
EOT
      )";
      _cmd_str='jetbrains-toolbox';
      ;;

    dropbox)
      _prompt_msg="$(cat <<EOT
${_cm2HtmPStr}Click OK to start Dropbox.</p>

${_cm2HtmPStr}Right- or left-click on the <br>
Dropbox icon in the System Tray<br>
to access more controls.</p>
EOT
      )";
      _cmd_str='dropbox';
      _arg_list=( 'start' );
      ;;

    docker)
      _handleDockerSetupFn;
      _cmd_str='konsole';
      _arg_list=( '-e' 'man' 'docker' );
      ;;

    virtualbox)
      _handleVboxSetupFn;

      _cmd_str='virtualbox';
      ;;

    zoom)
      if ! "${_binDir}/kfocus-fix-ibus" 'check'; then
        "${_binDir}/kfocus-fix-ibus" 'repair';
      fi
      _cmd_str='zoom';
      _arg_list=( '&' 'disown' );
      ;;

    *) true;;
  esac

  # Bail if command not found
  _exe_str="$(command -v "${_cmd_str}" || true)";
  if [ -z "${_exe_str}" ]; then
    _promptFn "Command for |${_descr_str}|<br> not found.";
    exit 1;
  fi

  # Prompt user if there is a message
  if [ -n "${_prompt_msg}" ]; then
    _promptFn "${_cm2HtmBeginStr}${_prompt_msg}${_cm2HtmEndStr}";
  fi

  # Run command with arguments
  _run_list=( "${_exe_str}" );
  if (( "${#_arg_list[@]}" > 0 )); then
    _run_list+=( "${_arg_list[@]}" );
  fi
  "${_run_list[@]}";
  exit; # Always exit and do NOT return
}
## . END _runAppHandlerFn }

## BEGIN _runAppFn {
# Summary  : _runAppFn <app_id>;
# Example  : _runAppFn 'apt-rollback';
# Purpose  : Run an app provided by app_id. If the app cannot be found
#   in the lookup list, the user is notified and this script exits.
#
#   If the app is found in the list but not available, the routine calls
#   pkexec <this-file> -i <pkg_id> to install the package, and possibly
#   the required repo as well. On successful completion, the app is then
#   run as the user.
# Arguments: app_id - App identifier key
#
_runAppFn () {
  declare _arg1_str _arg2_str _arg_app_id _do_report        \
    _prompt_msg _pkg_name _line_str _bit_list _app_id       \
    _full_cmd_str _sniff_str _descr _cmd_str _do_handler    \
    _arg_list _report_str _sniff_exe _app_exe               \
    _install_prompt_msg  _ans_str _exit_str _idx;

  _arg1_str="${1:-}";
  _arg2_str="${2:-}";

  _do_report='n';
  if [ "${_arg1_str}" = '-r' ]; then
    _do_report='y';
    _arg_app_id="${_arg2_str}";
  else
    _arg_app_id="${_arg1_str}";
  fi

  if [ -z "${_arg_app_id}" ]; then
    _prompt_msg='ABORT: No app_id provided';
    _promptFn "${_prompt_msg}";
    exit 1;
  fi

  _pkg_name='';
  _line_str="$(
    IFS=$'\n'; grep -E "^${_arg_app_id}\|" <<< "${_exeLookupList[*]}"
  )";
  if [ -z "${_line_str}" ]; then
    _prompt_msg="ABORT: App |${_arg_app_id}| not found";
    _promptFn "${_prompt_msg}";
    exit 1;
  fi

  # Split fields
  IFS='|' read -ra _bit_list <<< "$_line_str";
  _app_id="${_bit_list[0]}";
  _full_cmd_str="${_bit_list[1]}";
  _sniff_str="${_bit_list[2]}";
  _pkg_name="${_bit_list[3]}";
  _descr="${_bit_list[4]}";

  # Split _cmd_str, _arg_list from _full_cmd_str
  IFS=';' read -ra _arg_list <<< "${_full_cmd_str}";
  _cmd_str="${_arg_list[0]}";
  # Shift _arg_list to remove _cmd_str
  _arg_list=("${_arg_list[@]:1}");

  # Calc cmd_str, _do_handler, _sniff_str
  if echo "${_cmd_str}" |grep -qE '^!'; then
    _do_handler='y';
    _cmd_str="${_cmd_str/#\!/}"; # Scrub '!'
  else
    _do_handler='n';
  fi
  if [ -z "${_sniff_str}" ]; then _sniff_str="${_cmd_str}"; fi

  if [ "${_do_report}" = 'y' ]; then
    _report_str="${_app_id}|${_full_cmd_str}|${_sniff_str}"
    _report_str+="|${_pkg_name}|${_descr}";
    if [ "${_do_handler}" = 'y' ]; then
      _report_str+='|Special handler expected|';
    fi
    echo "${_report_str}";
    exit 0;
  fi

  # Exit if pkg_name is not in table
  if [ -z "${_pkg_name}" ]; then
    _prompt_msg="Sorry, |${_arg_app_id}| is not supported";
    _promptFn "${_prompt_msg}";
    exit 1;
  fi

  ## Begin sniff-and-run loop {
  for _idx in {0..1}; do
    # Set up _app_exe and _sniff_exe
    _app_exe="$(command -v "${_cmd_str}" || true)";
    if [ "${_sniff_str}" = "${_cmd_str}" ]; then
      _sniff_exe="${_app_exe}";
    else
      _sniff_exe="$(command -v "${_sniff_str}" || true)";
    fi

    # Try to install package using (may install repository too)
    if [ ! -x "${_sniff_exe}" ] && [ "${_idx}" = '0' ]; then
      if _install_prompt_msg="$(
        _echoInstallPromptMsgFn "${_app_id}" "${_pkg_name}" "${_descr}"
        )"; then
        _ans_str="$(
          _cm2PromptUserFn "${_install_prompt_msg:-}" 'Install package' 'a'
        )";
        if [ "${_ans_str}" = 'y' ]; then
          # Note: _cm2RunLongCmdFn prefixes commands with _escExe (pkexec)
          if _exit_str="$(_cm2RunLongCmdFn "Installing ${_pkg_name}" \
              "${_binName}" '-i' "${_pkg_name}")"; then continue;
          else
            _prompt_msg="Trouble installing ${_descr}";
            if [ -n "${_exit_str}" ]; then
              _prompt_msg+=":<br>${_exit_str}";
            fi
            _promptFn "${_prompt_msg}";
            exit 1;
          fi
        else
          _prompt_msg="Installation cancelled on user request";
          _promptFn "${_prompt_msg}";
          exit 1;
        fi
      else
        _promptFn "${_install_prompt_msg}";
        exit 1;
      fi
    fi
    break; # exit loop, always
  done
  ## End sniff-and-run loop }

  # Run app handler if provided
  if [ "${_do_handler}" = 'y' ]; then
    _runAppHandlerFn "${_app_id}" "${_descr}";
    # shellcheck disable=SC2317
    exit 0;
  # Execute command and arguments if possible
  elif [ -x "${_app_exe}" ]; then
    if [ "${_doForceForeground}" = 'n' ]; then
      exec "${_app_exe}" "${_arg_list[@]}" &
    else
      exec "${_app_exe}" "${_arg_list[@]}";
    fi
    exit 0;
  fi

  # Notify user of non-executable, non-empty _app_exe
  _prompt_msg="Sorry, |${_app_exe}| is not executable.";
  _promptFn "${_prompt_msg}";
  exit 1;
}
## . END _runAppFn }

## BEGIN _mainFn {
_mainFn () {
  declare _arg1_str _arg2_str _arg_app_id;
  _arg1_str="${1:-}";
  _arg2_str="${2:-}";

  # Handle package and repo install with reentrant call
  if [ "${_arg1_str}" = '-i' ]; then
    shift;
    _installPkgFn "$@";
    exit;
  elif [ "${_arg1_str}" = '-l' ]; then
    _echoKeyListFn;
    exit;
  elif [ "${_arg1_str}" = '-L' ]; then
    ( IFS=$'\n'; echo "${_exeLookupList[*]}"; )
    exit;
  fi

  # Refuse to continue as root for any other actions
  _exitIfRootFn;

  # Handle report string
  if [ "${_arg1_str}" = '-r' ]; then
    if [ -n "${_arg2_str}" ]; then
      _runAppFn -r "${_arg2_str}";
      # shellcheck disable=SC2317
      exit 0;
    else
      exit 1;
    fi
  fi

  # Handle app_id request
  if [ "${_arg1_str}" = '-k' ]; then
    shift;
    _arg_app_id="${1:-}";

  # Handle app_id requires with sync blocking
  elif [ "${_arg1_str}" = '-kf' ]; then
    shift;
    _arg_app_id="${1:-}";
    _doForceForeground='y';

  # Handle URI
  else
    if [[ "${_arg1_str}" =~ ^kfocus-mime:// ]]; then
      _arg_app_id="$(_urlDecodeFn "${1:-}" | cut -d'/' -f3)";
      # DEBUG: _cm2EchoFn "_arg_app_id=${_arg_app_id}";
    # Handle link file. Bail if not readable.
    else
      # Ensure link file is readable
      if ! [ -r "${_arg1_str}" ]; then
        _cm2WarnStrFn "Abort: Link file |${_arg1_str}| cannot be read";
        exit 1;
      fi

      # Read id from link file and then remove it.
      read -r _arg_app_id < "${_arg1_str}" || exit 1;
      rm "${_arg1_str}" || true;
    fi
  fi

  if [ -z "${_arg_app_id}" ]; then
    1>&2 echo 'Missing required argument';
    exit 1;
  fi

  _runAppFn "${_arg_app_id}";
}
## END _mainFn }

## BEGIN Declare and set global vars {
declare _binName _binDir _baseDir _baseName \
  _rootDir _exeAptDir _pkgNameList _userName \
  _escExe _doForceForeground \
  ARCHS_SUPPORTED HOST_CPU PRETTY_NAME USER_AGENT \
  VERSION_INSTALLED VERSION_PUBLISHED WEBSITE;

# Set this first.
_rootDir='';

_doForceForeground='n';
_etcAptDir="${_rootDir}/etc/apt";
_pkgNameList=();
_userName="$(id -un)";
## . END Declare and set global vars }

## BEGIN Run main if script is not sourced {
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(readlink -f "$0")"        || exit 1;
  _binDir="$(dirname "${_binName}")"    || exit 1;
  _baseDir="$(dirname "${_binDir}")"    || exit 1;
  _baseName="$(basename "${_binName}")" || exit 1;
  # IMPORTANT: When called via Google Chrome, this is necessary to keep Zenity
  # from grabbing Chrome's libvulkan rather than the system's libvulkan.
  export LD_LIBRARY_PATH='';
  _importCommonFn;

  _escExe="$(_cm2GetEscExeFn)" || exit 1;
  _mainFn "$@";
fi
## . END Run main if script is not sourced }
