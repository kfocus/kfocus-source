#!/bin/bash
#
# Copyright 2019-2024 MindShare Inc.
#
# Written for the Kubuntu Focus by M. Mikowski and A. Rainbolt
#
# Name     : kfocus-rollback-set
# Summary  : kfocus-rollback-set (createSnapshot <Apt|Timed|User>
#              | restoreSnapshot @<timestamp> | deleteSnapshot @<timestamp>
#              | labelAptSnapshot | restoreSnapshotStage2 | prepareSystem
#              | getSystemState)
# Purpose  : Does the actual snapshot create and restore operations
# Example  : kfocus-rollback-set restoreSnapshot @1234
# License  : GPLv2
# Run By   : kfocus-rollback, kfocus-snapshot, system processes
# Spec     : 4013
# Note     : WORK IN PROGRESS, DO NOT USE IN PRODUCTION
#
set -u;

## BEGIN _importCommonFn {
# Summary   : _importCommonFn
# Purpose   : Load common routines, prefer relative dir
# Example   : _importCommonFn;
# Arguments : none
# Globals   : Package vars _baseDir _baseName
# Outputs   : none
# Returns   : none
#
_importCommonFn () {
  declare _lib_list _is_loaded _lib_file;
  _lib_list=(
    "${_binDir}/common.2.source"
    '/usr/lib/kfocus/lib/common.2.source'
  );
  _is_loaded='n';
  for _lib_file in "${_lib_list[@]}"; do
    if [ -r "${_lib_file}" ]; then
      # shellcheck source=/usr/lib/kfocus/lib/common.2.source
      if source "${_lib_file}"; then
        _is_loaded='y';
        break;
      fi
    fi
  done

  if [ "${_is_loaded}" = 'n' ]; then
    echo 1>&2 "${_baseName}: ABORT - Cannot source common lib";
    exit 202;
  fi
}
## . END _importCommonFn }

## BEGIN Set meaningful names for exit codes {
_exitOK () { exit 0; }
_exitFAIL () { exit 1; }
_exitRECFAIL () { exit 2; }
_exitCRITFAIL () { exit 3; }
_exitDEATH () { exit 4; }
_exitLOCK () { exit 20; }
## . END Set meaningful names for exit codes }

## BEGIN _direWarningFn {
# See https://stackoverflow.com/a/49533938
#
_direWarningFn () {
  declare _mode _msg _xserver_list _user_list _uid_list _item _xserver_idx;

  _mode="${1:-info}";
  _msg="${2:-blank}";

  readarray _xserver_list <<< "$(
    ls /tmp/.X11-unix/* | sed 's?/tmp/.X11-unix/X??';
  )";

  readarray _user_list <<< "$(
    for _item in "${_xserver_list[@]}"; do
      who | grep "(:${_item})" | (awk '{ print $1 }' || echo 'nobody') \
        | head -n1;
    done
  )";

  readarray _uid_list <<< "$(
    for _item in "${_user_list[@]}"; do
      id -u "${_item}";
    done
  )";

  for ((_xserver_idx = 0; _xserver_idx < ${#_xserver_list[@]}; \
    _xserver_idx++)); do
    sudo -u "${_user_list[_xserver_idx]}" \
      DISPLAY="${_xserver_list[_xserver_idx]}" \
      DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/${_uid_list[_xserver_idx]}/bus" \
      qdbus org.kfocus.FocusRxDispatch.launcher / "${_mode}" "${_msg}";
  done
}
## . END _direWarningFn }

_trapExitFn () {
  1>&2 echo "${_baseName} was interrupted";
  if [ "${_preparingSystemYn}" = 'y' ]; then
    _direWarningFn 'error' "${_prepareFailMsg}";
  fi
  rm "${_lockFile}" || true;
}

_chkSetFlockFn () {
  exec 211>"${_lockFile}" || exit 21;
  if ! flock -n -e 211; then
    1>&2 echo "Cannot get lock on ${_lockFile}";
    _exitLOCK;
  fi
  # Trap unexpected exits to clean up lock file
  trap _trapExitFn EXIT;
}

_exitEarlyFn () {
  1>&2 echo 'An unexpected error has occurred';
  exit 21;
}

_exitCleanFn () {
  trap '' EXIT;
  rm "${_lockFile}" || true;
  exit 0;
}

## BEGIN _setSystemStateFn {
#
_setSystemStateFn () {
  declare _main_fs _boot_fs _main_subvols_str _boot_subvols_str;

  if [ -d '/btrfs_main' ] && [ -d '/btrfs_boot' ]; then
    if [ -d '/btrfs_main/@' ] \
      && [ -d '/btrfs_main/@kfocus-rollback-snapshots' ] \
      && [ -d '/btrfs_boot/@boot' ] \
      && [ -d '/btrfs_boot/@kfocus-rollback-boot-snapshots' ]; then
      _systemState='SUPPORTED, SET UP';
    else
      _systemState='UNSUPPORTED';
    fi
  else
    if ! [ -d '/btrfs_main' ] && ! [ -d '/btrfs_boot' ]; then
      _main_fs="$(LC_ALL='C' mount | grep btrfs | grep ' on / ' \
        | cut -d' ' -f1)";
      _boot_fs="$(LC_ALL='C' mount | grep btrfs | grep ' on /boot ' \
        | cut -d' ' -f1)";
      if [ -n "${_main_fs}" ] && [ -n "${_boot_fs}" ] \
        && [ "${_main_fs}" != "${_boot_fs}" ]; then
        _main_subvols_str="$(btrfs subvolume list / | awk '{ print $9 }' | sort)";
        _boot_subvols_str="$(btrfs subvolume list /boot | awk '{ print $9 }' | sort)";
        if grep -E '^@$' <<< "${_main_subvols_str}" && \
          LC_ALL='C' mount | grep -q ' on /home '; then
          if [ -z "${_boot_subvols_str}" ]; then
            _systemState='SUPPORTED, NOT SET UP';
          else
            _systemState='UNSUPPORTED';
          fi
        else
          _systemState='UNSUPPORTED';
        fi
      else
        _systemState='UNSUPPORTED';
      fi
    else
      _systemState='INCONSISTENT';
    fi
  fi
}
## . END _setSystemStateFn }

_checkSystemStateSetUpFn () {
  if ! [ "${_systemState}" = 'SUPPORTED, SET UP' ]; then
    _exitOK;
  fi
}

_prepareSystemFn () {
  declare _root_mount_id _boot_mount_id _btrfs_defaults_str;

  _preparingSystemYn='y';

  #####
  # STAGE 1: Sanity checks and filesystem prep

  if [ "${_systemState}" = 'SUPPORTED, SET UP' ] \
    || [ "${_systemState}" = 'UNSUPPORTED' ]; then
    _cm2WarnStrFn 'This system appears to be snapshot-enabled already.';
    _exitOK;
  fi

  if [ -d '/etc/libvirt' ] || [ -d '/var/lib/libvirt' ]; then
    # If both directories are empty, we don't care, it's only a problem if
    # either/both of them have contents
    if [ -n "$(ls -A /etc/libvirt 2>/dev/null)" ] || \
      [ -n "$(ls -A /var/lib/libvirt 2>/dev/null)" ]; then
      _cm2WarnStrFn 'Cannot create libvirt subvols, libvirt is installed!';
      _exitFAIL;
    fi
  fi

  mkdir -p /btrfs_main || _exitRECFAIL;
  mkdir -p /btrfs_boot || _exitRECFAIL;
  mkdir -p /etc/libvirt || _exitRECFAIL;
  mkdir -p /var/lib/libvirt || _exitRECFAIL;

  #####
  # STAGE 2: fstab adjustment

  _root_mount_id="$(LC_ALL=C mount | grep ' on / ' | cut -d' ' -f1)";
  _boot_mount_id="UUID=$(LC_ALL=C lsblk -o NAME,FSTYPE,UUID,MOUNTPOINTS | grep -P '/boot$' \
    | awk '{ print $3 }')";
  _btrfs_defaults_str="defaults,noatime,autodefrag 0 0";

  echo "${_root_mount_id} /btrfs_main btrfs subvolid=5,${_btrfs_defaults_str}" >> /etc/fstab || _exitRECFAIL;
  echo "${_boot_mount_id} /btrfs_boot btrfs subvolid=5,${_btrfs_defaults_str}" >> /etc/fstab || _exitRECFAIL;
  echo "${_root_mount_id} /etc/libvirt btrfs subvol=@libvirt-machines/@etc-libvirt,${_btrfs_defaults_str}" >> /etc/fstab || _exitRECFAIL;
  echo "${_root_mount_id} /var/lib/libvirt btrfs subvol=@libvirt-machines/@var-lib-libvirt,${_btrfs_defaults_str}" >> /etc/fstab || _exitRECFAIL;

  #####
  # STAGE 3: /boot preparation

  # We need these unmounted so we can shuffle things around
  umount /boot/efi || true;
  umount /boot || true;
  # Point fstab at a soon-to-be-created @boot subvolume.
  sed -i '/\/boot /s/defaults/subvol=\/@boot,defaults/' /etc/fstab || _exitCRITFAIL;
  # Load all of the tons of fstab changes we've made
  systemctl daemon-reload;
  # Morph the layout of the boot partition
  mount /btrfs_boot || _exitCRITFAIL;
  btrfs subvolume create /btrfs_boot/@boot || _exitDEATH;
  # This will always throw a warning about not being able to move a directory
  # into itself, therefore we have to ignore it.
  mv /btrfs_boot/* /btrfs_boot/@boot/ 2>/dev/null || true;
  # We can mount /boot again now
  mount /boot || _exitCRITFAIL;
  mount /boot/efi || _exitCRITFAIL;
  # Point the primary grub.cfg at the new boot files
  update-grub || _exitCRITFAIL;
  # Make sure GRUB can find the primary grub.cfg at its new location
  sed -i "s/'\/grub'/'\/@boot\/grub'/" /boot/efi/EFI/ubuntu/grub.cfg \
    || _exitCRITFAIL;

  #####
  # STAGE 4: Snapshot repo creation
  mount /btrfs_main || _exitCRITFAIL;
  # mount /btrfs_boot # this is unnecessary, we mounted it earlier
  btrfs subvolume create /btrfs_main/@kfocus-rollback-snapshots || _exitDEATH;
  btrfs subvolume create /btrfs_boot/@kfocus-rollback-boot-snapshots \
    || _exitDEATH;
  btrfs subvolume create /btrfs_main/@libvirt-machines || _exitDEATH;
  btrfs subvolume create /btrfs_main/@libvirt-machines/@etc-libvirt || _exitDEATH;
  btrfs subvolume create /btrfs_main/@libvirt-machines/@var-lib-libvirt \
    || _exitDEATH;

  #####
  # STAGE 5: Finish additional mounts
  # At this point, /boot, /boot/efi, /btrfs_main, and /btrfs_boot are mounted.
  # /etc/libvirt and /var/lib/libvirt are not mounted.
  mount /etc/libvirt || _exitCRITFAIL;
  mount /var/lib/libvirt || _exitCRITFAIL;

  _preparingSystemYn='n';
}

_restoreSnapshotFn () {
  declare _target_snapshot _snapshot_path _boot_snapshot_path;
  
  _checkSystemStateSetUpFn;

  _target_snapshot="${1:-}";
  _snapshot_path="/btrfs_main/@kfocus-rollback-snapshots/${_target_snapshot}";
  _boot_snapshot_path="/btrfs_boot/@kfocus-rollback-boot-snapshots/${_target_snapshot}";

  if [ -e '/btrfs_main/@kfocus-rollback-working' ] || \
    [ -e '/btrfs_boot/@kfocus-rollback-working-boot' ]; then
    _cm2WarnStrFn 'Temporary restore subvols found, cannot continue.';
    _cm2WarnStrFn 'Please reboot, then run "Finish restoration operation".';
    _exitFAIL; # can't restore while mid-restore!
  fi

  if ! [ -e "${_snapshot_path}" ]; then
    _exitFAIL;
  fi

  mv '/btrfs_main/@' '/btrfs_main/@kfocus-rollback-working' || _exitRECFAIL;
  btrfs subvolume snapshot "${_snapshot_path}" '/btrfs_main/@' || _exitDEATH;
  # Failing to unmount /boot/efi before attempting to move the old subvol
  # will result in the subvol not being moved, which will result in the
  # whole @boot subvol being nuked except for the contents of /boot/efi.
  umount /boot/efi || _exitCRITFAIL;
  mv '/btrfs_boot/@boot' '/btrfs_boot/@kfocus-rollback-working-boot' \
    || _exitCRITFAIL;
  btrfs subvolume snapshot "${_boot_snapshot_path}" '/btrfs_boot/@boot' \
    || _exitDEATH;
  mount /boot/efi || _exitCRITFAIL;
}

_deleteSnapshotFn () {
  declare _target_snapshot _snapshot_path _boot_snapshot_path;
  
  _checkSystemStateSetUpFn;

  _target_snapshot="${1:-}";
  # This intentionally does not have the @ before ${_target_snapshot} because
  # the function is passed a snapshot name, not just a timestamp.
  _snapshot_path="/btrfs_main/@kfocus-rollback-snapshots/${_target_snapshot}";
  _boot_snapshot_path="/btrfs_boot/@kfocus-rollback-boot-snapshots/${_target_snapshot}";

  if ! [ -e "${_snapshot_path}" ]; then
    _exitFAIL;
  fi
  if ! [ -e "${_boot_snapshot_path}" ]; then
    _exitFAIL;
  fi
  
  btrfs subvolume delete --commit-after "${_snapshot_path}" || _exitDEATH;
  btrfs subvolume delete --commit-after "${_boot_snapshot_path}" || _exitDEATH;
}

_restoreSnapshotStage2Fn () {
  _checkSystemStateSetUpFn;
  
  if ! mount | grep 'btrfs' | grep -q '@kfocus-rollback-working' \
    && ! mount | grep 'btrfs' | grep -q '@kfocus-rollback-working-boot'; then
    if [ -d '/btrfs_main/@kfocus-rollback-working' ]; then
      btrfs subvolume delete --commit-after '/btrfs_main/@kfocus-rollback-working' || _exitDEATH;
    fi
    if [ -d '/btrfs_boot/@kfocus-rollback-working-boot' ]; then
      btrfs subvolume delete --commit-after '/btrfs_boot/@kfocus-rollback-working-boot' \
        || _exitDEATH;
    fi
  fi
}

_trimSnapshotsFn () {
  declare _snapshot_list _snapshot_remove_list _snapshot_remove_count \
    _snapshot_idx;

  _checkSystemStateSetUpFn;

  readarray -t _snapshot_list <<< "$(ls "${_snapshotMainDir}" | sed 's/@//' \
    | sort -n | sed 's/^/@/')";

  if [ "${#_snapshot_list[@]}" -gt '5' ]; then
    _snapshot_remove_list=();
    _snapshot_remove_count=$((${#_snapshot_list[@]} - 5));
    for ((_snapshot_idx = 0; _snapshot_idx < _snapshot_remove_count; \
      _snapshot_idx++)); do
      _deleteSnapshotFn "${_snapshot_list[_snapshot_idx]}";
    done
  fi
}

_createSnapshotFn () {
  declare _snapshot_event_type _timestamp_str _prev_timestamp_str \
    _snapshot_path _boot_snapshot_path _hour_seconds _week_seconds;
  
  _checkSystemStateSetUpFn;

  _hour_seconds=3600;
  _week_seconds=604800;

  _timestamp_str="$(date +%s)";
  _snapshot_path="/btrfs_main/@kfocus-rollback-snapshots/@${_timestamp_str}";
  _boot_snapshot_path="/btrfs_boot/@kfocus-rollback-boot-snapshots/@${_timestamp_str}";
  _prev_timestamp_str="$(ls '/btrfs_main/@kfocus-rollback-snapshots' | sed 's/@//' | sort -n \
    | tail -n1)";
  _snapshot_event_type="${1:-}"

  case "${_snapshot_event_type}" in
    'Apt')
      if (( (_timestamp_str - _prev_timestamp_str) \
        < _hour_seconds )); then
        _exitOK;
      fi
      ;;
    'Timed')
      if (( (_timestamp_str - _prev_timestamp_str) \
        < _week_seconds )); then
        _exitOK;
      fi
      ;;
    'User') true;; # always make snapshots if the user says so
  esac

  if [ -e "${_snapshot_path}" ] || [ -e "${_boot_snapshot_path}" ]; then
    # This should theoretically never happen, but there's a non-zero chance
    # that it could if the user changes their clock backwards.
    #
    # TODO: There's a time-of-check to time-of-use bug here, I don't *think*
    # we care but review and see if this is important enough to find a way
    # around.
    _exitFAIL;
  fi

  btrfs subvolume snapshot -r '/btrfs_main/@' "${_snapshot_path}" || _exitDEATH;
  btrfs subvolume snapshot -r '/btrfs_boot/@boot' "${_boot_snapshot_path}" \
    || _exitDEATH;

  if [ "${_snapshot_event_type}" != 'Apt' ]; then
    echo "${_snapshot_event_type}" \
      > '/var/lib/kfocus/kfocus_rollback_last_snapshot_reason';
  fi

  _trimSnapshotsFn;
}

_labelAptSnapshotFn () {
  declare _apt_history_str _history_line _event_str;

  _apt_history_str="$(cat '/var/log/apt/history.log')";

  while IFS= read -r _history_line || [[ -n "${_history_line}" ]]; do
    if [[ "${_history_line}" =~ ^Install|Upgrade|Remove|Purge ]]; then
      _event_str="$(cut -d':' -f1 <<< "${_history_line}")";
      break;
    fi
  done < <(printf '%s' "${_apt_history_str}");

  echo "Apt${_event_str}" \
      > '/var/lib/kfocus/kfocus_rollback_last_snapshot_reason';
}

## BEGIN _mainFn {
#
_mainFn () {
  declare _main_min_space _boot_min_space _main_space _boot_space _mode \
    _target_snapshot;

  _chkSetFlockFn;
  _setSystemStateFn;

  if [ "${_systemState}" = 'INCONSISTENT' ]; then
    _direWarningFn 'warning' "${_inconsistentMsg}";
    _exitFAIL;
  fi

  _main_min_space=21474836480 # 20 GiB
  _boot_min_space=1073741824 # 1 GiB
  _main_space="$(LC_ALL=C btrfs filesystem usage -b /btrfs_main \
    | awk '/Free \(estimated\)/{ print $3 }')";
  _boot_space="$(LC_ALL=C btrfs filesystem usage -b /btrfs_boot \
    | awk '/Free \(estimated\)/{ print $3 }')";

  if [ -d '/btrfs_main' ] && [ -d '/btrfs_boot' ]; then
    if (( _main_space < _main_min_space )) \
      || (( _boot_space < _boot_min_space )); then
      _direWarningFn 'info' "${_lowDiskMsg}";
      _exitFAIL;
    fi
  fi

  _mode="${1:-}";

  case "${_mode}" in
    'getSystemState')
      echo "${_systemState}";
      ;;
    'prepareSystem')
      _prepareSystemFn;
      ;;
    'createSnapshot')
      _createSnapshotFn "${2:-}";
      ;;
    'restoreSnapshot')
      _target_snapshot="${2:-}";
      if [ -z "${_target_snapshot}" ]; then
        _cm2WarnStrFn 'No snapshot name provided to restore!';
        _exitFAIL;
      fi
      _restoreSnapshotFn "${_target_snapshot}";
      ;;
    'deleteSnapshot')
      _target_snapshot="${2:-}";
      if [ -z "${_target_snapshot}" ]; then
        _cm2WarnStrFn 'No snapshot name provided to delete!';
        _exitFAIL;
      fi
      _deleteSnapshotFn "${_target_snapshot}";
      ;;
    'labelAptSnapshot')
      _labelAptSnapshotFn;
      ;;
    'restoreSnapshotStage2')
      _restoreSnapshotStage2Fn;
      ;;
    *)
      _cm2WarnStrFn 'Invalid mode specified.';
      _exitFAIL;
      ;;
  esac

  _exitCleanFn;
}
## . END _mainFn }

## BEGIN Declare and assign global vars {
declare _binName _binDir _baseName _baseDir _lockFile _systemState _browStr \
  _erowStr _tableStr _prepareFailMsg _lowDiskMsg _inconsistentMsg \
  _preparingSystemYn _snapshotMainDir _snapshotBootDir;

_snapshotMainDir='/btrfs_main/@kfocus-rollback-snapshots';
_snapshotBootDir='/btrfs_main/@kfocus-rollback-boot-snapshots';
## . END Declare and assign global vars }

## BEGIN Run mainFn when script is NOT sourced {
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(  readlink -f "$0"       )" || exit 101;
  _binDir="$(   dirname  "${_binName}" )" || exit 101;
  _baseDir="$(  dirname  "${_binDir}"  )" || exit 101;
  _baseName="$( basename "${_binName}" )" || exit 101;
  _lockFile="/tmp/kfocus-rollback-backend.lock";
  _systemState='';

  # Import libs and assign more global vars
  _importCommonFn;

  # Set error messages
  _browStr='<tr><td style="padding:8px 32px 8px 0">';
  _erowStr='</td></tr>';
  _tableStr='<table style="width:100%;margin-right:32px">';

  _prepareFailMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browStr}<h3 style="color:#f7941d">Critical Error</h3>${_erowStr}

${_browStr}FocusRx was interrupted while attempting to set up system file
snapshotting. This incident may be the result of failing
hardware or a software conflict.${_erowStr}

${_browStr}<b>Please report this issue to technical support. This is not
normal and should never happen.</b>${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _lowDiskMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browStr}<h3 style="color:#f7941d">Low Disk Space</h3>${_erowStr}

${_browStr}Your system is running low on disk space. This could result in
filesystem corruption if not corrected. Please clear some space
by removing files or moving them to other drives.${_erowStr}

${_browStr}For your safety, no snapshot-related actions have been
performed.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _inconsistentMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browStr}<h3 style="color:#f7941d">Inconsistent FS Layout</h3>${_erowStr}

${_browStr}This system's filesystem layout appears to have been modified from
its default configuration. System snapshots and system rollback
are incompatible with the current filesystem state.${_erowStr}

${_browStr}Please correct the filesystem layout at your earliest convenience.
See ??? for more information.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  # Set flag for error reporting
  _preparingSystemYn='n';

  _mainFn "$@";
fi
## . END Run mainFn when script is NOT sourced }
