#!/bin/bash
#
# Copyright 2019-2024 MindShare Inc.
#
# Written for the Kubuntu Focus by M. Mikowski and A. Rainbolt
#
# Name     : kfocus-rollback
# Summary  : kfocus-rollback
# Purpose  : Allows the user to restore a BTRFS snapshot
# Example  : kfocus-rollback
# License  : GPLv2
# Run By   : Developers only
# Spec     : 4013
# Note     : WORK IN PROGRESS, DO NOT USE IN PRODUCTION
#
set -u;

# TODO: This needs to be CLI-accessible. Create a routine for emulating a
#   dropdown list in text.

## BEGIN _importCommonFn {
# Summary   : _importCommonFn
# Purpose   : Load common routines, prefer relative dir
# Example   : _importCommonFn;
# Arguments : none
# Globals   : Package vars _baseDir _baseName
# Outputs   : none
# Returns   : none
#
_importCommonFn () {
  declare _lib_list _is_loaded _lib_file;
  _lib_list=(
    "${_binDir}/common.2.source"
    '/usr/lib/kfocus/lib/common.2.source'
  );
  _is_loaded='n';
  for _lib_file in "${_lib_list[@]}"; do
    if [ -r "${_lib_file}" ]; then
      # shellcheck source=/usr/lib/kfocus/lib/common.2.source
      if source "${_lib_file}"; then
        _is_loaded='y';
        break;
      fi
    fi
  done

  if [ "${_is_loaded}" = 'n' ]; then
    echo 1>&2 "${_baseName}: ABORT - Cannot source common lib";
    exit 202;
  fi
}
## . END _importCommonFn }

_prepareSystemFn () {
  "${_escExe}" "${_setExe}" 'prepareSystem';
}

_createSnapshotFn () {
  "${_escExe}" "${_setExe}" 'createSnapshot';
}

_restoreSnapshotFn () {
  "${_escExe}" "${_setExe}" 'restoreSnapshot' "${1:-}";
}

_deleteSnapshotFn () {
  "${_escExe}" "${_setExe}" 'deleteSnapshot' "${1:-}";
}

_restoreSnapshotStage2Fn () {
  "${_escExe}" "${_setExe}" 'restoreSnapshotStage2';
}

## BEGIN _chooseSnapshotFn {
#
_chooseSnapshotFn () {
  declare _action_str _hide_old_snapshots _orig_snapshot_list \
    _current_snapshot_timestamp _snapshot_disp_list _trimmed_snapshot_list \
    _snapshot_idx _snapshot_timestamp;
      
  if [ -e '/btrfs_root/@kfocus-rollback-working' ] || \
    [ -e '/btrfs_boot/@kfocus-rollback-working-boot' ]; then
    _msg="$(cat <<EOF
It looks like you have a restore operation in progress. Please reboot, then
run kfocus-rollback and select "Finish restoration operation" to complete
the current restore process.
EOF
    )";
    "${_kdiagExe}" --error "${_msg}";
    exit 1; # can't restore while mid-restore!
  fi

  _action_str="${1:-}";
  _hide_old_snapshots="${2:-}";

  if [ -z "${_action_str}" ]; then
    _cm2WarnStrFn 'No action provided to _chooseSnapshotFn!';
  fi

  cd "${_snapshotDir}" || exit 1;
  # TODO: BSP may complain about this.
  _orig_snapshot_list=(*);
  _current_snapshot_timestamp="$(cat /var/lib/kfocus/kfocus_rollback_snapshot_id \
    2>/dev/null)";
  if [ -z "${_current_snapshot_timestamp}" ]; then
    _current_snapshot_timestamp=0;
  fi
  _snapshot_disp_list=();
  _trimmed_snapshot_list=();

  for (( _snapshot_idx=0; _snapshot_idx < ${#_orig_snapshot_list[@]}; \
    _snapshot_idx++ )); do
    _snapshot_timestamp="$(tail -c+2 <<< \
      "${_orig_snapshot_list[_snapshot_idx]}")";
    if [ "${_snapshot_timestamp}" -gt "${_current_snapshot_timestamp}" ] && \
      [ "${_hide_old_snapshots}" = 'y' ]; then
      true;
    else
      _snapshot_disp_list[_snapshot_idx]="$(date -d \
        "${_orig_snapshot_list[_snapshot_idx]}")";
      _trimmed_snapshot_list[_snapshot_idx]="${_orig_snapshot_list[_snapshot_idx]}";
    fi
  done

  _answer="$("${_kdiagExe}" --combobox \
    "Which snapshot would you like to ${_action_str}?" \
    "${_snapshot_disp_list[@]}")" || exit 1;

  if [ -z "${_answer}" ]; then
    _cm2WarnStrFn 'No snapshot selected.';
    exit 1;
  fi

  for (( _snapshot_idx=0; _snapshot_idx < ${#_orig_snapshot_list[@]}; \
    _snapshot_idx++ )); do
    if [ "${_snapshot_disp_list[_snapshot_idx]}" = "${_answer}" ]; then
      echo "${_trimmed_snapshot_list[_snapshot_idx]}";
      return;
    fi
  done

  _cm2WarnStrFn 'Invalid snapshot selected.';
  exit 1;
}
## . END _chooseSnapshotFn }

## BEGIN _mainFn {
#
_mainFn () {
  declare _root_min_space _boot_min_space _root_space _boot_space _answer \
    _msg;
  
  _root_min_space=21474836480 # 20 GiB
  _boot_min_space=1073741824 # 1 GiB
  _root_space="$(LC_ALL=C btrfs fi usage -b /btrfs_root \
    | awk '/Free \(estimated\)/{ print $3 }')";
  _boot_space="$(LC_ALL=C btrfs fi usage -b /btrfs_boot \
    | awk '/Free \(estimated\)/{ print $3 }')";

  if (( _root_space < _root_min_space )); then
    _msg="$(cat <<EOF
Your root partition's space is critically low! You should clear some space
on your root disk ASAP.
EOF
    )";
    "${_kdiagExe}" --error "${_msg}";
  fi

  if (( _boot_space < _boot_min_space )); then
    _msg="$(cat <<EOF
Your boot partition's space is critically low! You should clear some space
by removing old snapshots and purging kernels ASAP.
EOF
    )";
    "${_kdiagExe}" --error "${_msg}";
  fi

  _answer="$("${_kdiagExe}" --combobox 'What would you like to do?' \
    'Prepare system for snapshotting' 'Create a snapshot' \
    'Restore a snapshot' 'Restore a snapshot (roll forward enabled)' \
    'Delete a snapshot' 'Finish restoration operation')" || exit;

  case "${_answer}" in
    'Prepare system for snapshotting')
      _prepareSystemFn;
      ;;
    'Create a snapshot')
      _createSnapshotFn;
      ;;
    'Restore a snapshot')
      _answer="$(_chooseSnapshotFn 'restore' 'y')" || exit;
      _restoreSnapshotFn "${_answer}";
      ;;
    'Restore a snapshot (roll forward enabled)')
      _answer="$(_chooseSnapshotFn 'restore' 'n')" || exit;
      _restoreSnapshotFn "${_answer}";
      ;;
    'Delete a snapshot')
      _answer="$(_chooseSnapshotFn 'delete' 'n')" || exit;
      _deleteSnapshotFn "${_answer}";
      ;;
    'Finish restoration operation')
      _restoreSnapshotStage2Fn;
      # Sometimes stale application cache data is left after a snapshot
      # restore, this fixes it:
      kbuildsycoca5;
      ;;
    *)
      _cm2WarnStrFn 'Invalid snapshot operation.';
      exit 1;
      ;;
  esac
}
## . END _mainFn }

## BEGIN Declare and assign global vars {
declare _binName _binDir _baseName _baseDir _kdiagExe _escExe _assignList \
  _snapshotDir;

_snapshotDir='/btrfs_root/@kfocus-rollback-snapshots';
## . END Declare and assign global vars }

## BEGIN Run mainFn when script is NOT sourced {
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(  readlink -f "$0"       )" || exit 101;
  _binDir="$(   dirname  "${_binName}" )" || exit 101;
  _baseDir="$(  dirname  "${_binDir}"  )" || exit 101;
  _baseName="$( basename "${_binName}" )" || exit 101;
  _kdiagExe="$(command -v kdialog || true)";
  _importCommonFn;

  # Get escalation exe
  _escExe="$(_cm2GetEscExeFn)" || exit;
  _assignList=( "_setExe|${_binDir}/kfocus-rollback-set" );
  if ! _cm2AssignExeVarsFn "${_assignList[@]}"; then
    _cm2WarnStrFn 'Could not assign variables';
    exit 1;
  fi

  _mainFn;
fi
## . END Run mainFn when script is NOT sourced }
