#!/bin/bash
#
# Copyright 2019-2024 MindShare Inc.
#
# Written for the Kubuntu Focus by M. Mikowski and A. Rainbolt
#
# Name     : kfocus-chain-helper
# Summary  : kfocus-chain-helper <root_mountpoint>
# Purpose  : Assists with the process of setting up disk chaining.
# Example  : kfocus-chain-helper /tmp/calamares-root-abcdefg
# License  : GPLv2
# Run By   : Calamares installer
# Spec     : 4574
#
set -u;

## BEGIN _importCommonFn {
# Summary   : _importCommonFn
# Purpose   : Load common routines, prefer relative dir
# Example   : _importCommonFn;
# Arguments : none
# Globals   : Package vars _baseDir _baseName
# Outputs   : none
# Returns   : none
#
_importCommonFn () {
  declare _lib_list _is_loaded _lib_file;
  _lib_list=(
    "${_baseDir}/lib/common.2.source"
    '/usr/lib/kfocus/lib/common.2.source'
  );
  _is_loaded='n';
  for _lib_file in "${_lib_list[@]}"; do
    if [ -r "${_lib_file}" ]; then
      # shellcheck source=/usr/lib/kfocus/lib/common.2.source
      if source "${_lib_file}"; then
        _is_loaded='y';
        break;
      fi
    fi
  done

  if [ "${_is_loaded}" = 'n' ]; then
    echo 1>&2 "${_baseName}: ABORT - Cannot source common lib";
    exit 202;
  fi
}
## . END _importCommonFn }

## BEGIN _getEligibleDisksFn {
_selectDiskFn () {
  declare _found_name_list _found_size_list _mount_str _block_list _dev_file \
    _byte_int _mib_int _trans_key _match_str _option_list _idx _onoff_state \
    _ans_str;

  _found_name_list=();
  _found_size_list=();
  _mount_str="$(cat /proc/mounts)";
  IFS=$'\n' read -r -d '' -a _block_list <<< "$(
    find /dev/ -maxdepth 1 -type b \
    | grep -E '^/dev/(sd[a-z]|nvme[0-9]n1|vd[a-z])$'
  )";

  for _dev_file in "${_block_list[@]}"; do # begin dev-block
    _byte_int="$(blockdev --getsize64 "${_dev_file}")";
    _mib_int=$(( _byte_int / 1048576 ));
    _trans_key="$(lsblk -ndo tran "${_dev_file}")";
    # TODO: can we just make this a negative condition?
    if [[ "${_trans_key}" =~ ^(sata|nvme|virtio)$ ]]; then
      true; else continue;
    fi

    if (( "${_mib_int}" < 65536 )); then
      continue;
    fi

    _match_str="$(
      grep "^${_dev_file}" <<< "${_mount_str}" | cut -f1 -d' '
    )";
    if [ -n "${_match_str}" ]; then
      continue;
    fi

    _found_name_list+=( "${_dev_file}" );
    _found_size_list+=( "${_mib_int}" );
  done

  if [ "${#_found_name_list[@]}" = '0' ]; then
    # No disks found, bail out
    return;
  fi

  _option_list=();
  for (( _idx=0; _idx < "${#_found_name_list[@]}"; _idx++ )); do
    if [ "${_idx}" = '0' ]; then
      _onoff_state='on';
    else
      _onoff_state='off';
    fi

    _option_list+=(
      "${_idx}"
      "Disk: ${_found_name_list[_idx]} - Size: ${_found_size_list[_idx]} MiB"
      "${_onoff_state}"
    );
  done

  _ans_str="$(_cm2PromptUserFn "${_chooseDiskMsg}" "${_winTitle}" 'd' \
    "${_option_list[@]}")";
  
  if [ -n "${_ans_str}" ]; then
    echo "${_found_name_list[_ans_str]}";
  fi
}
## . END _getEligibleDisksFn }

## BEGIN _mainFn {
_mainFn () {
  declare _root_path _disk_str _mode_str _root_dev_str _luks_yn _part_count \
    _full_prepare_yn _existing_part _part_incompat_yn;

  _root_path="${1}";
  if [ -z "${_root_path}" ]; then
    _cm2WarnStrFn 'Cannot proceed without a root path argument!';
    exit 1;
  fi

  _disk_str="$(_selectDiskFn)"
  [ -z "${_disk_str}" ] && exit;

  _mode_str="$(_cm2PromptUserFn "${_chooseModeMsg}" "${_winTitle}" 'd' \
    'home' 'Set up as a HOME disk' 'on' \
    'data' 'Set up as a DATA disk' 'off')";
  [ -z "${_mode_str}" ] && exit;

  _root_dev_str="$(mount | grep "${_root_path}" | cut -d' ' -f1)";
  if grep -q '/dev/mapper' <<< "${_root_dev_str}"; then
    _luks_yn='y';
  else
    _luks_yn='n';
  fi

  _part_count="$(ls "${_disk_str}"* | wc -l)";
  _part_count=$(( _part_count - 1 )) || true;
  if [ "${_part_count}" -gt '1' ] || [ "${_part_count}" = '0' ]; then
    # This is not an old secondary disk and can't be reused. Confirm that the
    # user wants to wipe it and prepare it, and bail out if they say no.
    _full_prepare_yn="$(_cm2PromptUserFn "${_confirmNormalDiskMsg}" \
      "${_winTitle}" 'o')";
    [ "${_full_prepare_yn}" = 'n' ] && exit;
    echo 'doing it';
  else
    # This is likely an old secondary disk. See if it's reusable and offer the
    # user the chance to reuse it if possible.
    _part_incompat_yn='n';
    if grep -q '/dev/nvme' <<< "${_disk_str}"; then
      _existing_part="${_disk_str}p1";
    else
      _existing_part="${_disk_str}1";
    fi

    if [ "$(lsblk -ndo fstype "${_existing_part}")" = 'crypto_LUKS' ]; then
      if [ "${_luks_yn}" = 'n' ]; then
        _part_incompat_yn='y';
      fi
    else
      if [ "${_luks_yn}" = 'y' ]; then
        _part_incompat_yn='y';
      fi
    fi

    if [ "${_part_incompat_yn}" = 'y' ]; then
      _full_prepare_yn="$(_cm2PromptUserFn "${_confirmDangerDiskMsg}" \
        "${_winTitle}" 'o')";
      [ "${_full_prepare_yn}" = 'n' ] && exit;
    else
      _full_prepare_yn="$(_cm2PromptUserFn "${_chooseReuseDiskMsg}" \
        "${_winTitle}" 'd' \
        'y' 'Reuse the existing partition' 'on' \
        'n' 'Wipe and reformat the disk' 'off')";
      [ -z "${_full_prepare_yn}" ] && exit;
    fi
  fi
}
## . END _mainFn }

## BEGIN Declare and assign global vars {
declare _binName _binDir _baseDir _baseName _tableStr _browLpStr _browRpStr \
  _erowStr _leftHeaderStr _centerHeaderStr _winTitle _chooseDiskMsg \
  _chooseModeMsg _confirmNormalDiskMsg _confirmDangerDiskMsg \
  _chooseReuseDiskMsg;
## . END Declare and assign global vars }

## BEGIN Run mainFn when script is NOT sourced {
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(  readlink -f "$0"       )" || exit 101;
  _binDir="$(   dirname  "${_binName}" )" || exit 101;
  _baseDir="$(  dirname  "${_binDir}"  )" || exit 101;
  _baseName="$( basename "${_binName}" )" || exit 101;

  # Import libs and assign more global vars
  _importCommonFn;

  _tableStr='<table style="width:100%;margin-right:32px">';
  _browLpStr='<tr><td style="padding:8px 0 8px 32px">';
  _browRpStr='<tr><td style="padding:8px 32px 8px 0">';
  _erowStr='</td></tr>';
  _leftHeaderStr='<h3 style="color:#f7941d">';
  _centerHeaderStr='<h3 style="color:#f7941d;text-align:center">';
  _winTitle='Kubuntu Focus Installer';

  _chooseDiskMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browLpStr}${_centerHeaderStr}Set Up Secondary Disk?</h3>${_erowStr}

${_browLpStr}The installer has detected that the system has one or more<br>
secondary disks present. If you previously had a home or data<br>
partition on one of these disks, or if you would like to use<br>
a new secondary disk as a home or data partition, you may set<br>
this up now.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _chooseModeMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browLpStr}${_centerHeaderStr}Choose Setup Mode</h3>${_erowStr}

${_browLpStr}Choose how you would like the secondary disk set up. If set<br>
up as a home disk, all user home directories on this system<br>
will be placed on the secondary disk. If set up as a data disk,<br>
the disk will be mounted at <code>/srv</code>.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _confirmNormalDiskMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Wipe and Prepare Disk?</h3>${_erowStr}

${_browRpStr}The selected disk does not appear to have been a secondary<br>
disk in the past. To use it, the installer needs to reformat<br>
it. <b>This may result in data loss!</b> Click 'OK' to format<br>
and use this disk, or 'Cancel' to abandon the disk setup<br>
process.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _confirmDangerDiskMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browRpStr}${_centerHeaderStr}Wipe and Prepare Disk?</h3>${_erowStr}

${_browRpStr}<b>The selected disk appears to have been a secondary disk<br>
previously, but is incompatible with the encryption state<br>
of the root disk.</b> To use this disk, the installer needs<br>
to reformat it. <b>This may result in data loss!</b> Click 'OK'<br>
to format and use this disk, or 'Cancel' to abandon the disk<br>
setup process.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _chooseReuseDiskMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browLpStr}${_centerHeaderStr}Reuse Disk?</h3>${_erowStr}

${_browLpStr}The selected disk appears to have been a secondary disk<br>
previously, and can be reused without reformatting. You<br>
may reuse it if desired, or reformat it anyway.${_erowStr}</table>
${_cm2HtmEndStr}
EOF
  )";

  _mainFn "$@";
fi
## . END Run mainFn when script is NOT sourced }
