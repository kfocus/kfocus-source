#!/bin/bash
#
# Copyright 2019-2023 MindShare Inc.
# Written for the Kubuntu Focus by Michael Mikowski and Erich Eickmeyer
#
# Name    : kfocus-focusrx
# Purpose : Prompt user to apply latest FocusRx System upgrade and other
#         :   on-login checks and actions.
# License : GPL v2
# Run By  : Users
# Spec    : 744
#
set -u;

## BEGIN _printHelpFn {
# Purpose  : Prints help to STDERR
#
_printHelpFn () {
  1>&2 cat <<_EOT

Usage: ${_baseName} [-f] [-h]
   -f: Force run even if run before
   -h: This help message

_EOT
}
## END _printHelpFn }

## BEGIN _importCommonFn {
# Run ls-common-symbols.sh to list in-use symbols
#
_importCommonFn () {
  declare _lib_file;
  _lib_file="${_baseDir}/lib/common.2.source";
  if [ -r "${_lib_file}" ]; then
    # shellcheck source=../lib/common.2.source
    source "${_lib_file}" || exit 201;
  else
    1>&2 echo "${_baseName}: ABORT - Cannot source lib |${_lib_file}|";
    exit 201;
  fi
}
## . END _importCommonFn }

## BEGIN _testNagCountFn {
 # Purpose: Read a _drop_file count.
 #   Increment that count and place in _drop_file.
 # Arguments: (positional)
 #  _mode          (required) "check" or "inc" nag counter.
 #  _file_name     (required) Drop file relative to $HOME/.config/)
 #  _max_nag_count (optional) Max times to nag. Default is _maxNagCount.
 # Returns:
 #   0: _view_count is less than _nag_count.
 #   1: _view_count is greater than or equal to _nag_count.
 #   2: Other error.
 #
_testNagCountFn () {
  declare _mode _file_name _max_count _drop_file _view_count _left_count;

  _mode="${1:-}";
  _file_name="${2:-}";
  _max_count="${3:-${_maxNagCount}}";

  if [ -z "${_file_name}" ]; then
    _cm2WarnStrFn 'No file name provided';
    return 2;
  fi

  if ! [[ "${_mode}" =~ ^(check|inc)$ ]]; then
    _cm2WarnStrFn 'Mode must be "check" or "inc".';
    return 2;
  fi

  _drop_file="$HOME/.config/${_file_name}";
  _view_count=0;
  if [ -f "${_drop_file}" ]; then
    _view_count="$(_cm2EchoIntFn "$(cat "${_drop_file}")")";
  fi

  if [ "${_doForce}" = 'y' ]; then
    _view_count=0;
  elif (( _view_count >= "${_max_count}" )); then
    return 1;
  fi

  case "${_mode}" in
    check)
      _left_count=$(( _max_count - _view_count ));
      if (( _left_count == 0 )); then
        echo 'warning will not be shown again';
      elif (( _left_count == 1 )); then
        echo 'warning will be shown for one more login';
      else
        echo "warning will be shown for ${_left_count} more logins";
      fi
      ;;
    inc)
      (( _view_count++ ));
      echo "${_view_count}" > "${_drop_file}" || true;
      ;;
    *)
      _cm2WarnStrFn 'Unexpected mode';
      return 2;
      ;;
  esac
}
## . END _testNagCountFn }

## BEGIN _runXtermCmdFn {
# Purpose:
#   Run and return script in xterm
_runXtermCmdFn () {
  declare _cmd_str _tmp_file _exit_int;

  _tmp_file="$(_cm2MkTmpFileFn)";
  if [ ! -w "${_tmp_file}" ]; then return 230; fi

  _cmd_str="$*;"' echo "$?" > '"${_tmp_file}";
  xterm -fa 'Monospace' -fs 12 -b 24 \
    -geometry 90x32 -T 'FocusRx' \
    -xrm 'xterm*iconHint: /usr/share/pixmaps/kfocus-bug-rx' \
    -e "${_cmd_str}";

  _exit_int="$(cat "${_tmp_file}")";

  # Not worth the disruption...
  # "${_escExe}" "${_cm2RmExe}" "${_tmp_file}" || true;
  return "${_exit_int:-1}";
}
## . END _runXtermCmdFn }

## BEGIN _confirmInternetFn {
_confirmInternetFn () {
  declare _prompt_msg _title _count;

  _prompt_msg="$(cat << _EOH01
${_cm2HtmBeginStr}
${_cm2HtmH3Str}Please Connect to Internet</h3>

${_cm2HtmPStr}FocusRx has detected that this system needs to be <br>
configured for the hardware. However, it does not appear <br>
to be connected to the internet.</p>

${_cm2HtmPStr}Please click on the <b>Networks</b> icon in the <br>
System Tray to connect, then continue.<br></p>
${_cm2HtmEndStr}
_EOH01
  )";

  _title='Connect to Internet';
  for (( _count = 2; _count <= 4; _count++ )); do
    ping -W 2 -c 1 "${_pingHost1Str}" && return;
    ping -W 2 -c 1 "${_pingHost2Str}" && return;

    _cm2PromptUserFn "${_prompt_msg}" "${_title}";

    if [ "${_count}" = 4 ]; then break; fi
    _title="Retry ${_count}";
    _prompt_msg="$(cat << _EOH02
${_cm2HtmBeginStr}
${_cm2HtmH3Str}Try Connecting Again</h3>

${_cm2HtmPStr}This system still does not appear connected to the <br>
to the Internet (attempt ${_count}).</p>

${_cm2HtmPStr}Please click on the <b>Networks</b> icon in the <br>
System Tray to try again, then continue.<br></p>
${_cm2HtmEndStr}
_EOH02
   )";
  done

  _prompt_msg="$(cat << _EOH03
${_cm2HtmBeginStr}
${_cm2HtmH3Str}Could Not Connect to Internet</h3>

${_cm2HtmPStr}While this system should be configured for the hardware, <br>
we could not connect after 3 attempts. Please reboot <br>
when you can establish a connection so this important <br>
step can be completed.</p>

${_cm2HtmPStr}Until this configuration is complete, hardware support, <br>
and therefore system stability, may be limited.<br></p>
${_cm2HtmEndStr}
_EOH03
  )";

  _title='Cannot Connect';
  _cm2PromptUserFn "${_prompt_msg}" "${_title}";
  return 1;
}
## . END _confirmInternetFn }

## == BEGIN Check functions run by mainFn {
## BEGIN _announceStartFn {
# Purpose:
#   Announce the purpose of FocusRx and what it does when forced
_announceStartFn () {
  declare _title _win_title _prompt_msg _ans_str;

  if [ "${_doForce}" = 'n' ]; then return; fi

  _title="System Diagnostics";
  _cm2SetMsgFn "${_title}";
  _win_title="${_rootTitle}: ${_title} ";

  _prompt_msg="$( cat <<_EOH04
${_cm2HtmBeginStr}
${_cm2HtmH3Str}${_title}</h3>

${_cm2HtmPStr}Doc: <a style="color:#1d99f3"
  href="https://kfocus.org/wf/tools#focusrx"
  >https://kfocus.org/wf/tools#focusrx</a></p>

${_cm2HtmPStr}This FocusRx utility will guide you through several<br>
checks that can identify and fix many common system<br>
issues.</p>

${_cm2HtmPStr}These checks are generally safe; however, we recommend<br>
you back up your data before <i>any</i> system maintenance.<br>
You may always return to this utility later using <code>Start<br>
Menu &gt; Kubuntu Focus &gt; FocusRx</code>.</p>

${_cm2HtmPStr}<b>Continue with ${_title}?</b><br></p>
${_cm2HtmEndStr}
_EOH04
  )";

  _ans_str="$(
    _cm2PromptUserFn "${_prompt_msg}" "${_win_title}" 'a'
  )";

  _cm2SucFn;
  if [ "${_ans_str}" = 'n' ]; then exit; fi
}
## . END _announceStartFn }

## BEGIN _chkUpdateBiosFn {
 # Purpose: Check BIOS for upgrade
 #
_chkUpdateBiosFn () {
  declare _win_title _nag_msg _cmd_list _check_msg \
    _prompt_msg _do_run_btool;

  # Skip if required tool not installed.
  [ -z "${_btoolExe}" ] && return;

  _title='Check BIOS Update';
  _cm2SetMsgFn "${_title}";
  _win_title="${_rootTitle}: ${_title} ";

  if ! _nag_msg="$(_testNagCountFn 'check' 'kfocus-bios-count')"; then
    _cm2SucStrFn 'View count limit reached.';
    _cm2SucFn;
    return;
  fi

  _cmd_list=("${_escExe}" "${_focusRxSetExe}" 'chk-bios');

  # Skip if check succeeds (no bios update available)
  if _check_msg="$("${_cmd_list[@]}")"; then
    _cm2SucStrFn "${_check_msg}";
    _cm2SucFn;
    return;
  fi

  _prompt_msg="$(cat <<_EOH05
${_cm2HtmBeginStr}
${_cm2HtmH3Str}${_title}</h3>

${_cm2HtmPStr}We recommend you update this system's BIOS.<p>

${_cm2HtmPStr}This will improve system stability and performance.<br>
If you run the BIOS-update wizard now, you will need <br>
about 10 minutes and an empty, 8+ GB USB drive.</p>

${_cm2HtmPStr}If you skip this prompt, this <br>
${_nag_msg}.</p>

${_cm2HtmPStr}<b>Run the BIOS-update wizard NOW?</b></p>
${_cm2HtmEndStr}
_EOH05
  )";

  _do_run_btool="$(
    _cm2PromptUserFn "${_prompt_msg}" "${_win_title}" 'a'
  )"

  if [ "${_do_run_btool}" = 'n' ]; then
    _cm2SucStrFn "${_check_msg}";
    _cm2SucStrFn 'Skipped on user request';
    _cm2SucFn;
    _testNagCountFn 'inc' 'kfocus-bios-count';
    return;
 fi

  _cmd_list=();
  if [ "${_cm2IsTty}" = 'n' ]; then
    _cmd_list+=( '_runXtermCmdFn' );
  fi

  _cmd_list+=( "${_escExe}" "${_btoolExe}" );
  if "${_cmd_list[@]}"; then
    _cm2SucFn; else _cm2WarnFn;
  fi
}
## . END _chkUpdateBiosFn }

## BEGIN _chkHwConfigFn {
# _cm2PromptUserFn \
#   'Restart the system for hardware mods to take effect' "${_baseName}" 'p';
#
_chkHwConfigFn () {
  declare _title _win_title _reason_str _prompt_msg _ans_str _output_str;

  _title='Configure for Hardware';
  _cm2SetMsgFn "${_title}";
  _win_title="${_rootTitle}: ${_title} ";

  # Check if reconfig is required
  _reason_str="$("${_escExe}" "${_focusRxSetExe}" 'chk-hw-config')";
  if [ -z "${_reason_str}" ]; then
    # Always skip if not in force mode
    if [ "${_doForce}" = 'n' ]; then
      _cm2SucStrFn 'Configuration completed and not forced.';
      _cm2SucFn;
      return;
    # Provide user *option* to reconfig in force mode
    else
      _prompt_msg="$(cat << _EOH06
${_cm2HtmBeginStr}
${_cm2HtmH3Str}SKIP ${_title}?</h3>

${_cm2HtmPStr}<b>The hardware signature already matches expected.</b><br>
You can reconfigure for the hardware, but it takes <br>
time and is usually not needed.</p>

${_cm2HtmPStr}<b>SKIP reconfigure to hardware?</b><br></p>
${_cm2HtmEndStr}
_EOH06
      )";
      _ans_str="$(
        _cm2PromptUserFn "${_prompt_msg}" "${_win_title}" 'a'
      )";
      if [ "${_ans_str}" = 'n' ]; then
        _reason_str="$("${_escExe}" "${_focusRxSetExe}" 'force-hw-config')";
      fi
    fi
  fi
  if [ -z "${_reason_str}" ]; then
    _cm2SucStrFn 'Configuration change not needed.';
    _cm2SucFn;
    return;
  fi

  # Prepare system for snapshotting (this should be done whether Internet is
  # present or not)
  if [ -n "${_snapshotSetExe}" ]; then
    "${_snapshotSetExe}" 'prepareSystem' || exit;
  fi

  # Bail if internet connection appears hopeless
  if ! _confirmInternetFn; then
    _cm2WarnStrFn 'Could not connect to internet';
    _cm2Warnfn;
    return 1;
  fi

  _prompt_msg="${_title}: This only needs to be done once";
  _reason_str="$(tr ' ' '_' <<< "${_reason_str}")";
  if _output_str="$(
    _cm2RunLongCmdFn "${_prompt_msg}" "${_focusRxSetExe}" \
      'fix-hw-config' "${_reason_str}"
  )"; then
    _prompt_msg="$(cat << _EOH07
${_cm2HtmBeginStr}
${_cm2HtmH3Str}Reboot Now?</h3>

${_cm2HtmPStr}Configuration for the hardware is complete.</p>

${_cm2HtmPStr}<b>Reboot NOW</b> to ensure optimal <br>
hardware support and stability.<br></p>
${_cm2HtmEndStr}
_EOH07
    )";
    _ans_str="$(_cm2PromptUserFn \
      "${_prompt_msg}" "${_rootTitle}: Reboot NOW?" 'w'
    )";
    if [ "${_ans_str}" = 'y' ]; then reboot; fi
  else
    _prompt_msg="Trouble with hardware config:\n ${_output_str}";
    _cm2PromptUserFn "${_prompt_msg}";
    _cm2WarnStrFn "${_prompt_msg}";
    _cm2WarnFn;
    return 1;
  fi
  _cm2SucFn;
}
## . END _chkHwConfigFn }

## BEGIN _chkKbdLedFn {
# Purpose: Restore keyboard colors for specific models.
# Important: Enable is set by kfocus-power-set which precedes this on sign-in.
#   All non-m2g5p models use modprobe settings and are not affected.
#
_chkKbdLedFn () {
  if [[ "$(_cm2EchoModelStrFn 'code')" =~ ^(m2g5p)$ ]]; then
    if [ -x "${_kbdColorSetExe}" ]; then
      "${_escExe}" "${_kbdColorSetExe}" -r || return 200;
    fi
  fi
}
## . END _chkKbdLedFn }

## BEGIN _chkKernelPkgFn {
_chkKernelPkgFn() {
  declare _title _win_title _kernel_pkg_name _installed_kernel_vers \
    _install_manifest _cmd_list _prompt_msg _ans_str _exit_str;

  # Assign initial vars and announce
  _title='Upgrade Kernel Packages';
  _cm2SetMsgFn "${_title}";
  _win_title="${_rootTitle}: ${_title} ";

  _kernel_pkg_name='linux-oem-22.04a-kfocus';
  _installed_kernel_vers="$(_cm2EchoInstalledVersFn "${_kernel_pkg_name}")";

  # Skip upgrade if package is not installed
  if [ -z "${_installed_kernel_vers}" ]; then
    _cm2SucStrFn "${_kernel_pkg_name} is not installed.";
    _cm2SucFn;
    return;
  fi

  # Define desired packages
  _install_manifest=(
    linux-generic-hwe-22.04-kfocus
    linux-headers-generic-hwe-22.04-kfocus
    linux-image-generic-hwe-22.04-kfocus
    linux-tools-generic-hwe-22.04-kfocus
  );

  _prompt_msg="$(cat <<_EOH08
${_cm2HtmBeginStr}
${_cm2HtmH3Str}${_title}?</h3>

${_cm2HtmPStr}The kernel packages need to be upgraded to <br>
the latest tested version. You may be prompted to provide <br>
your password.</p>

${_cm2HtmPStr}This can take a few minutes. You will be alerted when<br>
the process is finished.</p>

${_cm2HtmPStr}<b>Upgrade NOW?</b></p>
${_cm2HtmEndStr}
_EOH08
  )";

  # Confirm user intent
  _ans_str="$(
    _cm2PromptUserFn "${_prompt_msg}" "${_win_title}" 'a'
  )";

  if [ "${_ans_str}" = 'n' ]; then
    _cm2PromptUserFn 'Upgrade Kernel cancelled on user request' \
      "${_win_title}" 'p';
    return;
  fi

  # Install kernel packages
  # Note: _cm2RunLongCmdFn prefixes commands with pkexec
  _cmd_list=('apt-get' 'install' '--reinstall' '-y' "${_install_manifest[@]}");
  if _exit_str="$(
    _cm2RunLongCmdFn "${_win_title}" "${_cmd_list[@]}"
  )"; then
    _prompt_msg='Upgrade is complete. Reboot to use the latest kernel.';
    _cm2PromptUserFn "${_prompt_msg}" "${_win_title}" 'p';
    _cm2SucFn;
  else
    _cm2PromptUserFn "WARNING: Trouble installing latest kernel." \
      "${_win_title}" 'p';
    _cm2WarnFn;
  fi
}
## . END _chkKernelPkgFn }

## BEGIN _chkNvidiaPkgFn {
_chkNvidiaPkgFn () {
  declare _title _win_title _nv_pkg_name _pin_pkg_name _installed_nv_vers \
    _installed_pin_vers _cmd_list _prompt_msg _ans_str _exit_str;


  _title='Check Nvidia Drivers';
  _cm2SetMsgFn "${_title}";
  _win_title="${_rootTitle}: ${_title}";

  _nv_pkg_name='kfocus-nvidia';
  _pin_pkg_name='kfocus-nvidia-pinning';

  _installed_nv_vers="$(_cm2EchoInstalledVersFn "${_nv_pkg_name}")";
  _installed_pin_vers="$(_cm2EchoInstalledVersFn "${_pin_pkg_name}")";

  # Skip upgrade if kfocus-nv package is not installed.
  if [ -z "${_installed_nv_vers}" ]; then
    _cm2SucStrFn "${_nv_pkg_name} is not installed.";
    _cm2SucFn;
    return;
  fi

  # Skip kfocus-nv package upgrade if same or later version is installed.
  # Note: Because of kfocus-nv package pre-depends, it should not be possible
  #   for pin package to be out-of-date and the kfocus-nv package up-to-date.
  if [ "${_installed_nv_vers}" = "${_gfxTgtVersStr}" ] \
    || _cm2TestVersFn "${_installed_nv_vers}" "${_gfxTgtVersStr}"; then
    _cm2SucStrFn "${_nv_pkg_name} upgrade not required.";
    _cm2SucFn;
    return;
  fi

  _prompt_msg="$(cat <<_EOH09
${_cm2HtmBeginStr}
${_cm2HtmH3Str}${_title}?</h3>

${_cm2HtmPStr}The Nvidia driver packages need to be <br>
upgraded to the latest Focus-tested version <br>
(nvidia-driver-535). This requires your password <br>
and can take a few minutes to complete. Please <br>
allow the upgrade to finish before rebooting.</p>

${_cm2HtmPStr}<b>Upgrade NOW?</b></p>
${_cm2HtmEndStr}
_EOH09
  )";
  _ans_str="$(
    _cm2PromptUserFn "${_prompt_msg}" "${_win_title}" 'a'
  )";

  if [ "${_ans_str}" = 'n' ]; then
    _cm2PromptUserFn 'Upgrade Nvidia drivers cancelled on user request' \
    "${_win_title}" 'p';
    return;
  fi

  # Skip nv pin package upgrade if same or later version is already installed
  if [ "${_installed_pin_vers}" = "${_gfxTgtVersStr}" ] \
    || _cm2TestVersFn "${_installed_pin_vers}" "${_gfxTgtVersStr}"; then
    _cm2SucStrFn "Nvidia pinning package is up-to-date.";

  # Upgrade the pin package to the latest version.
  # Tests show pins are applied immediately without need for apt-get update
  else
    # Note: _cm2RunLongCmdFn prefixes commands with pkexec
    _cmd_list=( 'apt-get' 'install' '--reinstall' '-y' "${_pin_pkg_name}" );
    if _exit_str="$(_cm2RunLongCmdFn "${_rootTitle}: Upgrade Nvidia Pinning" \
      "${_cmd_list[@]}"
    )"; then
      _prompt_msg='Pin upgrade is complete.';
      _cm2PromptUserFn "${_prompt_msg}" "${_win_title}" 'p';
    else
      _cm2PromptUserFn "WARNING: Trouble installing ${_pin_pkg_name}." \
        "${_rootTitle}: Upgrade Nvidia Pinning" 'p';
      _cm2WarnFn;
      return 1;
    fi
  fi

  # Upgrade nv package
  # Note: _cm2RunLongCmdFn prefixes commands with pkexec
  _cmd_list=( 'apt-get' 'install' '--reinstall' '-y' "${_nv_pkg_name}" );
  if _exit_str="$(_cm2RunLongCmdFn "${_rootTitle}: Upgrade Nvidia Drivers" \
    "${_cmd_list[@]}"
  )"; then
    _prompt_msg='Upgrade is complete. Reboot to use the drivers.';
    _cm2PromptUserFn "${_prompt_msg}" "${_win_title}" 'p';
    _cm2SucFn;
  else
    _cm2PromptUserFn "WARNING: Trouble installing ${_nv_pkg_name}." \
      "${_win_title}" 'p';
    _cm2WarnFn;
  fi
}
## . END _chkNvidiaPkgFn }

## BEGIN _chkXorgConfigFn {
# Purpose: Warn if xorg.conf exists.
# Offer to delete xorg.conf file.
# User may opt out of future warnings.
#
_chkXorgConfigFn () {
  declare _title _win_title _xorg_file _drop_file _explain_str \
    _warn_str _confirm_str _do_remove_file _cmd_list  \
    _do_show_again _prompt_msg;

  _title='Check for xorg.conf';
  _cm2SetMsgFn "${_title}";
  _win_title="${_rootTitle}: ${_title} ";

  _drop_file="${HOME}/.config/kfocus-no-xorg-warn";
  _xorg_file='/etc/X11/xorg.conf';

  _explain_str="$(cat <<_EOH10
${_cm2HtmPStr}While an <code>xorg.conf</code> file may be beneficial in some<br>
cases, it is almost never desirable on a laptop because it<br>
can disable the primary display panel. Instead, one should<br>
rely on System Settings &gt; Displays to manipulate displays.<br>
Advanced users may add files to the drop directory,<br>
<code>/usr/share/X11/xorg.conf.d</code>.</p>
_EOH10
  )";

  _warn_str="$(cat <<_EOH11
${_cm2HtmBeginStr}
${_cm2HtmH3Str}xorg.conf FILE FOUND</h3>

${_cm2HtmPStr}<b>We recommend you delete this file.</b></p>

${_explain_str}

${_cm2HtmPStr}<b>Delete xorg.conf file NOW?</b></p>
${_cm2HtmEndStr}
_EOH11
  )";

  _confirm_str="$(cat <<_EOH12
${_cm2HtmBeginStr}
${_cm2HtmH3Str}X11 CONFIG OK</h3>

${_cm2HtmPStr}This system does not use an <code>xorg.conf</code> file.<br>
<b>This is preferred as described below:</b></p>

${_explain_str}
${_cm2HtmEndStr}
_EOH12
  )";

  if [ "${_doForce}" = 'y' ]; then
    "${_cm2RmExe}" -f "${_drop_file}";
  fi

  if [ -f "${_xorg_file}" ]; then
    # DEBUG _cm2EchoFn "xorg.conf exists";
    if ! [ -f "${_drop_file}" ]; then
      _do_remove_file="$(
        _cm2PromptUserFn "${_warn_str}" "${_win_title}" 'a'
      )";

      if [ "${_do_remove_file}" = 'y' ]; then
        _cmd_list=( "${_escExe}" );
        _cmd_list+=( "${_cm2RmExe}" "${_xorg_file}" );
        "${_cmd_list[@]}";

        case "$?" in
          0   ) _prompt_msg='xorg.conf has been deleted'  ;;
          127 ) _prompt_msg='xorg.conf deletion was cancelled' ;;
          *   ) _prompt_msg='xorg.conf was NOT deleted'   ;;
        esac
        _cm2PromptUserFn "FocusRx: ${_prompt_msg}" "${_win_title}";
      else
        _prompt_msg="$( cat <<_EOH13
${_cm2HtmBeginStr}
${_cm2HtmH3Str}SHOW PROMPT AGAIN?</h3>

${_cm2HtmPStr}The xorg.conf file was NOT deleted. Would you like <br>
to show this warning again in the future?<br></p>
${_cm2HtmEndStr}
_EOH13
        )";
        _do_show_again="$(
          _cm2PromptUserFn "${_prompt_msg}" "${_win_title}" 'a'
        )";
        if [ "${_do_show_again}" = 'y' ]; then
          "${_cm2RmExe}" -f "${_drop_file}";
        else
          touch "${_drop_file}";
        fi
      fi
    else
      _cm2EchoFn 'User previously opted-out of warning';
    fi
  else
    if [ "${_doForce}" = 'y' ]; then
      _cm2PromptUserFn "${_confirm_str}" "${_win_title}" 'p';
    fi
  fi
  _cm2SucStrFn 'Xorg file considered.';
  _cm2SucFn;
}
## . END _chkXorgConfigFn }

## BEGIN _runKernelCleanFn {
_runKernelCleanFn () {
  declare _cmd_list;

  # Skip if required tool not installed.
  [ -z "${_kcleanExe}" ] && return;

  _cm2SetMsgFn 'Run Kernel Cleaner';
  _cmd_list=( "${_kcleanExe}" );
  if [ "${_doForce}" = 'y' ]; then
    _cmd_list+=( '-f' );
  fi
  if "${_cmd_list[@]}"; then
    _cm2SucFn; else _cm2WarnFn;
  fi
}
## . END _runKernelCleanFn }

## BEGIN _checkIbusConfigFn {
_chkIbusConfigFn () {
  declare _title _win_title _prompt_msg _ans_str;

  # Skip if required tool not installed.
  [ -z "${_fixIbusExe}" ] && return;

  _title='IBus Configuration Check';
  _cm2SetMsgFn "${_title}";
  _win_title="${_rootTitle}: ${_title} ";

  # Nag count is set to 1. This prevents this from being run again
  # unless the user runs focusrx -f, like from the start menu.
  if ! _nag_msg="$(_testNagCountFn 'check' 'kfocus-ibus-count' 1)"; then
    _cm2SucStrFn 'View count limit reached.';
    _cm2SucFn;
    return;
  fi

  # We can't properly check the IBus configuration if Plasmashell failed to
  # start, because Plasma scripting is used as part of the detection
  # mechanism.
  if ! pgrep plasmashell > /dev/null; then
    _cm2WarnFn;
    return;
  fi

  if ! "${_fixIbusExe}" 'check' 2>/dev/null; then
    _prompt_msg="$(cat <<_EOH1
${_cm2HtmBeginStr}
${_cm2HtmH3Str}${_title}</h3>

${_cm2HtmPStr}IBus was found improperly configured to work with <br>
the KDE Plasma desktop on this system. FocusRx will <br>
apply the recommended settings.</p>

${_cm2HtmPStr}To undo these changes, click IBus in the <b>System <br>
Tray</b> hidden icons. Then uncheck <b>Use system keyboard <br>
layout</b> in the <b>Advanced</b> tab. Use <b>System Tray <br>
Settings</b> to make visible again.</p>
${_cm2HtmEndStr}
_EOH1
    )";
    _ans_str="$(
      _cm2PromptUserFn "${_prompt_msg}" "${_win_title}" 'p';
    )";

    _testNagCountFn 'inc' 'kfocus-ibus-count' 1

    if "${_fixIbusExe}" 'repair' 2>/dev/null; then
      _cm2PromptUserFn 'IBus configuration repaired.' "${_win_title}";
      _cm2SucStrFn 'IBus configuration repaired.';
    else
      _cm2PromptUserFn 'IBus configuration repair failed!' "${_win_title}";
      _cm2WarnFn;
      return;
    fi
  fi

  _cm2SucFn;
}
## . END _checkIbusConfigFn }

## BEGIN _runDropScriptsFn {
# Summary : _runDropScriptsFn;
# Purpose : Run fixup scripts in kfocus-focusrx.d in order of version.
# Each file must be named like so:
#   <semver>_<description>.sh
#   1.2.1-3_check-install.sh
#   1.3.0-0_xe-check.source
#
# Where <sysver> is the version returned by kfocus-rx-version -r
#  and <semver> is the first field in the script name as shown above:
# If <semver> > <sysver>, then run the script.
# Otherwise, do NOT unless doForce='y', in which case the user is allowed
#  to rerun with the default is to skip.
#
# If the file is a source, then all these considerations are left to
# the source which inherits
#
# Arguments : none
# Returns   : none
#
_runDropScriptsFn () {
  declare _last_exe_vers _script_list _loop_file _loop_check_str _bit_list \
    _inr_list _loop_vers_str _loop_name _loop_ext _loop_arg_list \
    _prompt_msg _ans_str _cmd_list _exit_int _do_reboot;

  _cm2SetMsgFn 'Run Drop Scripts';
  if ! cd "${_focusRxDropDir}"; then
    _cm2WarnStrFn 'Could not cd to drop directory. Drop-scripts skipped.';
    _cm2WarnFn;
    return 1;
  fi

  # Build list of scripts
  # See https://www.baeldung.com/linux/reading-output-into-array
  IFS=$'\n' read -r -d '' -a _script_list < <(
   find ./ -mindepth 1 -maxdepth 1 -type f \
     | grep -P '^./(\d+[.-]){3}\d_[^_]+.(sh|source)$' \
     | sort -V;
    printf '\0';
  );

  ## Begin: Consider each script {
  _do_reboot='n';
  _last_exe_vers='';
  for _loop_file in "${_script_list[@]}"; do
    # Extract version number and name
    # shellcheck disable=SC2001
    IFS='_' read -r -a _bit_list <<<"${_loop_file}";
    # Strip leading period
    _loop_vers_str="${_bit_list[0]/#\.\/}";
    IFS='.' read -r -a _inr_list <<<"${_bit_list[1]}";
    _loop_name="${_inr_list[0]}";
    _loop_ext="${_inr_list[1]}"

    # Skip if not executable
    if [ "${_loop_ext}" = 'sh' ]; then
      if [ ! -x "${_loop_file}" ]; then
        _cm2WarnStrFn "Script ${_loop_name} not executable. Skipping.";
        continue;
      fi
      # Skip if check returns an empty string
      _loop_check_str="$("${_loop_file}" -c )";
      if [ -z "${_loop_check_str}" ]; then
        _cm2SucStrFn "Script ${_loop_name} has nothing to do. Skipping.";
        continue;
      fi
    fi

    # Semver is newer that system version: prompt and run
    if _cm2TestVersFn "${_loop_vers_str}" "${_sysVersStr}"; then
      # Always run source and let version number and doForce propagate
      if [ "${_loop_ext}" = 'source' ]; then
        _cm2SucStrFn "Running fixup source ${_loop_name}";

      elif [ "${_loop_ext}" = 'sh' ]; then
        _prompt_msg="Running fixup script ${_loop_name}";
        _cm2PromptUserFn "${_prompt_msg}" "${_rootTitle}: ${_loop_name}" 'p';
      else
        _cm2WarnStrFn "Skip unsupported file type: ${_loop_file}";
      fi

    # Semver of script is older that system version: offer to run if doForce
    else
      # If the force flag is set, offer to run this drop script
      if [ "${_doForce}" = 'y' ]; then

        # Always rerun source on force
        if [ "${_loop_ext}" = 'source' ]; then
          _ans_str='n'
        # Prompt for runnable script
        else
          _prompt_msg="$(cat <<_EOH14
${_cm2HtmBeginStr}
${_cm2HtmH3Str}SKIP Running ${_loop_name}?</h3>

${_loop_check_str}

${_cm2HtmPStr}This script was run on this system in the past. You may<br>
run it again, but it can take time and is usually not required.</p>

${_cm2HtmPStr}<b>SKIP running ${_loop_name}?</b><br></p>
${_cm2HtmEndStr}
_EOH14
          )";
          _ans_str="$(
            _cm2PromptUserFn "${_prompt_msg}" "${_rootTitle}: ${_loop_name}" 'a'
           )";
        fi

        # User has agreed to skip, so continue
        if [ "${_ans_str}" = 'y' ]; then
          _cm2EchoFn "Skipping previously run ${_loop_name}";
          continue;
        fi

      # Since force flag is NOT set, quietly skip this script
      else
        _cm2EchoFn "Skipping previously run ${_loop_name}";
        continue;
      fi
    fi

    # Execute the full command we built
    _loop_arg_list=( "${_sysVersStr}" "${_loop_vers_str}" );
    if [ "${_loop_ext}" = 'source' ]; then
      unset _runDropMainFn # unset any previous reference
      # shellcheck disable=SC1090 source=kfocus-focusrx.d/1.2.1-3_package-check.sh
      source "${_loop_file}";
      # shellcheck disable=SC2317
      if [[ $(type -t _runDropMainFn) == 'function' ]]; then
        _runDropMainFn "${_loop_arg_list[@]}";
      fi
    elif [ "${_cm2IsTty}" = 'n' ]; then
      _runXtermCmdFn "${_escExe}" "${_loop_file}" "${_loop_arg_list[@]}";
    else
      "${_loop_file}" "${_loop_arg_list[@]}";
    fi
    _exit_int="$?";

    _last_exe_vers="${_loop_vers_str}";
    case "${_exit_int}" in
      99) _do_reboot='y';;
      98) _cm2PromptUserFn "User cancelled ${_loop_name}" "${_rootTitle}: Cancel";;
      0) true;;
      *) _cm2PromptUserFn \
        "Non-zero exit status (${_exit_int} for ${_loop_file}" \
         "${_rootTitle}: Cancel";;
    esac
  done;
  ## . End: Consider each script }

  ## Begin: Update version string {
  if [ -n "${_last_exe_vers}" ] \
    && _cm2TestVersFn "${_last_exe_vers}" "${_sysVersStr}"; then
    _cmd_list=( "${_escExe}" );
    _cmd_list+=( "${_focusRxVersExe}" '-s' "${_last_exe_vers}" );

    if ! "${_cmd_list[@]}"; then
      _cm2WarnStrFn "Trouble saving state ${_cmd_list[*]} >$?<";
    fi
  fi
  ## . End: Update version string }

  ## Begin: Handle reboot if recommended {
  if [ ${_do_reboot} = 'y' ]; then
    _prompt_msg="$(cat <<_EOH15
${_cm2HtmBeginStr}
${_cm2HtmH3Str}REBOOT RECOMMENDED</h3>

${_cm2HtmPStr}You system has changed and a reboot is <b>RECOMMENDED</b>.<br>
However, for safety, this is not the default action.<br><br>
Continue <b>WITHOUT</b> rebooting?<br></p>

${_cm2HtmEndStr}
_EOH15
    )";
    _ans_str="$(
      _cm2PromptUserFn "${_prompt_msg}" "${_rootTitle}: SKIP Reboot?" 'a'
    )";
    if [ "${_ans_str}" = 'n' ]; then
      "${_escExe}" systemctl reboot;
    fi
  ## . End: Handle reboot if recommended }

  ## Begin: Handle non-reboot condition {
  else
    _cm2SucStrFn 'The system is up-to-date. No reboot required.';
  fi
  ## . End: handle non-reboot condition }
  _cm2SucFn;
}
## . END _runDropScriptsFn }

# _cleanupZoomFn is OOD. See prior versions for function.

## BEGIN _chkExperRepoFn {
 # Purpose:
 #   Recommend user purge kubuntu-ppa-experimental if
 #   kubuntu-ppa-backports-extra installed
 #
_chkExperRepoFn () {
  declare _title _win_title _cache_str _prompt_str _nag_msg;

  _title='Check Experimental Repo';
  _cm2SetMsgFn "${_title}";
  _win_title="${_rootTitle}: ${_title} ";

  if ! _nag_msg="$(_testNagCountFn 'check' 'kfocus-exper-count')"; then
    _cm2SucStrFn 'View count limit reached.';
    _cm2SucFn;
    return;
  fi

  _cache_str="$(
    apt-cache policy |sed '/^Pinned packages:/q' \
    | grep -iE '^\s*release'
  )";

  if grep -q 'o=LP-PPA-kubuntu-ppa-backports-extra' <<< "${_cache_str}"; then
    if grep -q 'o=LP-PPA-kubuntu-ppa-experimental' <<< "${_cache_str}"; then
  _prompt_msg="$( cat <<_EOH17
${_cm2HtmBeginStr}
${_cm2HtmH3Str}Experimental Repo Detected</h3>

${_cm2HtmPStr}The kubuntu-ppa-experimental repo is installed <br>
along with kubuntu-ppa-backports-extra. We strongly <br>
recommend you purge this now in a terminal using <br>
the following command:</p>

${_cm2HtmPStr}
<code>sudo ppa-purge ppa:kubuntu-ppa/experimental</code></p>

${_cm2HtmPStr}If you do not purge the repo, this <br>
${_nag_msg}.</p>
${_cm2HtmEndStr}
_EOH17
  )";
      _ans_str="$(
        _cm2PromptUserFn "${_prompt_msg}" "${_win_title}"
      )";
      _testNagCountFn 'inc' 'kfocus-exper-count'
    fi
  fi
  _cm2SucFn;
}
## . END _chkExperRepoFn }

## BEGIN _chkResetEffectsFn {
 # Purpose:
 #   Announce the conclusion of a FocusRx run when forced
 #
_chkResetEffectsFn () {
  declare _title _win_title _prompt_msg _ans_str;

  # Always skip if not in force mode
  [ "${_doForce}" = 'n' ] && return;
  # Skip if required tool not installed
  [ -z "${_resetEffectsExe}" ] && return;

  _title='Reset Desktop Effects';
  _cm2SetMsgFn "${_title}";
  _win_title="${_rootTitle}: ${_title} ";
      
  _prompt_msg="$(cat <<_EOH17b
${_cm2HtmBeginStr}
${_cm2HtmH3Str}SKIP ${_title}?</h3>

${_cm2HtmPStr}You can run kfocus-reset-effects <br>
to reset effects and keyboard shortcuts, <br>
power management settings, and file <br>
associations to their defaults. This is usually <br>
unnecessary unless some settings or shortcuts <br>
are not behaving as desired.</p>

${_cm2HtmPStr}<b>SKIP run kfocus-reset-effects?</b></p>
${_cm2HtmEndStr}
_EOH17b
  )";

  _ans_str="$(
    _cm2PromptUserFn "${_prompt_msg}" "${_win_title}" 'a'
  )";

  if [ "${_ans_str}" = 'n' ]; then
    if "${_resetEffectsExe}"; then
      _cm2SucFn; else _cm2WarnFn;
    fi
  else
    _cm2SucFn;
  fi
}
## . END _chkResetEffectsFn }

## BEGIN _fixSycocaCacheFn {
#
_fixSycocaCacheFn () {
  # Skip if required tool not installed
  [ -z "${_kBuildSycocaExe}" ] && return;
  "${_kBuildSycocaExe}";
}
## . END _fixSycocaCacheFn }

## BEGIN _announceEndFn {
 # Purpose:
 #   Announce the conclusion of a FocusRx run when forced
 #
_announceEndFn () {
  declare _title _win_title _prompt_msg _ans_str;

  if [ "${_doForce}" = 'n' ]; then return; fi

  _title='Diagnostics Complete';
  _cm2SetMsgFn "${_title}";
  _win_title="${_rootTitle}: ${_title} ";
  
  _prompt_msg="$( cat <<_EOH18
${_cm2HtmBeginStr}
${_cm2HtmH3Str}FocusRx Diagnostics Complete</h3>

${_cm2HtmPStr}All FocusRx diagnostics are complete.</p>
${_cm2HtmEndStr}
_EOH18
  )";

  _ans_str="$(
    _cm2PromptUserFn "${_prompt_msg}" "${_win_title}"
  )";
}
## . END _announceEndFn }

## BEGIN _chkFirstrunFn {
# Purpose: Daisy-chain kfocus-firstrun
#   IFF launched from /etc/xdg/autostart/kfocus-focusrx.desktop.
#
_chkFirstrunFn () {
  # Skip if required tool not installed.
  [ -z "${_firstrunExe}" ] && return;

  # Check if launched at login. 'plasma_session' is used by Plasma 5.24;
  # 'systemd' in Plasma 5.27
  if [[ "${_parentCmdStr}" =~ ^(plasma_session|systemd) ]]; then
    "${_firstrunExe}";
  fi
}
## . END _chkFirstrunFn }
## == . END Check functions run by mainFn }

## BEGIN _mainFn {
_mainFn () {
  declare _who_str _opt_str;

  # 1902 Bail if run as user 'kubuntu' which implies liveCD
  _who_str="$(whoami)";
  if [ "${_who_str}" = 'kubuntu' ]; then return; fi

  ## Begin Process options {
  _doForce='n';
  while getopts ':fh' _opt_str; do
    case "${_opt_str}" in
    f) _doForce='y';;
    h) _printHelpFn; exit 0;;
    *) _cm2EchoFn "\nInvalid option: -${OPTARG} \n";
      _printHelpFn;
      exit 1;;
    esac
  done
  ## . End Process options }

  ## Begin Run focusrx steps {
  _cm2EchoFn "== BEGIN :      ${_rootTitle}\n";
  _announceStartFn;
  _chkUpdateBiosFn;
  _chkHwConfigFn;
  _chkKbdLedFn;     #3735
  _chkKernelPkgFn;
  _chkNvidiaPkgFn;
  _chkXorgConfigFn;
  _runKernelCleanFn;
  _chkIbusConfigFn;
  _runDropScriptsFn;
  _chkExperRepoFn;
  _chkResetEffectsFn;
  _fixSycocaCacheFn;
  _announceEndFn;
  _cm2EchoFn "\n== . END : OK   ${_rootTitle}\n\n";
  ## . End Run focusrx steps }

  # Daisy-chain welcome wizard if available
  _chkFirstrunFn;
}
## . END _mainFn }

## BEGIN Declare and assign global vars {
declare _gfxTgtVersStr _parentCmdStr _pingHost1Str _pingHost2Str \
  _maxNagCount _binName _binDir _baseDir _baseName _escExe \
  _focusRxDropDir _kbdColorSetExe _rootTitle _assignList \
  _focusRxSetExe _focusRxVersExe _btoolExe _firstrunExe \
  _fixIbusExe _kcleanExe _resetEffectsExe _sysVersStr;

_gfxTgtVersStr='22.04.9';
_parentCmdStr="$(ps -o comm= $PPID)";
_pingHost1Str='8.8.8.8';
_pingHost2Str='1.1.1.1';
_maxNagCount=6;
## . END Declare and assign global vars }

## BEGIN Run main if script is not sourced {
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(  readlink -f "$0"       )" || exit 101;
  _binDir="$(   dirname  "${_binName}" )" || exit 101;
  _baseDir="$(  dirname  "${_binDir}"  )" || exit 101;
  _baseName="$( basename "${_binName}" )" || exit 101;

  # Import libs and assign more global vars
  _importCommonFn;
  _escExe="$(_cm2GetEscExeFn)" || exit;
  _focusRxDropDir="${_binDir}/kfocus-focusrx.d";
  _kbdColorSetExe="${_binDir}/kfocus-kb-color-set";
  _rootTitle='FocusRx';
  _assignList=(
    "_focusRxSetExe|${_binDir}/kfocus-focusrx-set"
    "_focusRxVersExe|${_binDir}/kfocus-rx-version"

    "_btoolExe|${_binDir}/kfocus-btool||optional"
    "_firstrunExe|${_binDir}/kfocus-firstrun-bin||optional"
    "_fixIbusExe|${_binDir}/kfocus-fix-ibus||optional"
    "_kcleanExe|${_binDir}/kfocus-kclean||optional"
    "_resetEffectsExe|${_binDir}/kfocus-reset-effects||optional"
    "_snapshotSetExe|${_binDir}/kfocus-rollback-set||optional"
    "_kBuildSyscocaExe|/usr/bin/kbuildsycoca5||optional"
  );
  if ! _cm2AssignExeVarsFn "${_assignList[@]}"; then
    _cm2ErrStrFn 'Could not assign variables';
    exit 1;
  fi
  _sysVersStr="$("${_focusRxVersExe}" -r)" || exit;

  _mainFn "$@";
fi
## . END Run main if script is not sourced }
