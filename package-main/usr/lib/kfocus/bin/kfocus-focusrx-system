#!/bin/bash
#
# Copyright 2019-2024 MindShare Inc.
#
# Written for the Kubuntu Focus by M. Mikowski and A. Rainbolt
#
# Name     : kfocus-focusrx-system
# Summary  : kfocus-focusrx-system
# Purpose  : Contains and runs system maintenance components that should not
#            run in userspace.
# Example  : kfocus-focusrx-system
# License  : GPLv2
# Run By   : systemd
# Spec     : 3476
#
set -u;

## BEGIN _importCommonFn {
# Summary   : _importCommonFn
# Purpose   : Load common routines, prefer relative dir
# Example   : _importCommonFn;
# Arguments : none
# Globals   : Package vars _baseDir _baseName
# Outputs   : none
# Returns   : none
#
_importCommonFn () {
  declare _lib_list _is_loaded _lib_file;
  _lib_list=(
    "${_baseDir}/lib/common.2.source"
    '/usr/lib/kfocus/lib/common.2.source'
  );
  _is_loaded='n';
  for _lib_file in "${_lib_list[@]}"; do
    if [ -r "${_lib_file}" ]; then
      # shellcheck source=/usr/lib/kfocus/lib/common.2.source
      if source "${_lib_file}"; then
        _is_loaded='y';
        break;
      fi
    fi
  done

  if [ "${_is_loaded}" = 'n' ]; then
    echo 1>&2 "${_baseName}: ABORT - Cannot source common lib";
    exit 202;
  fi
}
## . END _importCommonFn }

## BEGIN _promptAllUsersFn {
# See https://stackoverflow.com/a/49533938
_promptAllUsersFn () {
  declare _mode _msg _xserver_id _user_name;
  _mode="${1:-info}";
  _msg="${2:-blank}";

  while read -r _xserver_id; do
    _user_name="$(
      who | grep "(:${_xserver_id})" | head -n1 | awk '{ print $1 }'
    )";
    if [ -z "${_user_name}" ]; then continue; fi

    sudo -u "${_user_name}" \
      DISPLAY="${_xserver_id}" \
      DBUS_SESSION_BUS_ADDRESS="unix:path=/run/user/$(id -u "${_user_name}")/bus" \
      qdbus org.kfocus.FocusRxDispatch.launcher / "${_mode}" "${_msg}";
  done < <(_cm2LsFn '/tmp/.X11-unix/' | sed 's?X??')
}
## . END _promptAllUsersFn }

## BEGIN _initCpuFn {
# Purpose   : Initialize CPU for 2023+ systems
# This is done here so CPU tweaks are available w/o GUI.
#
_initCpuFn () {
  declare _title;

  [ -z "${_powerSetExe}" ] && return;

  _title='Initialize CPU';
  _cm2SetMsgFn "${_title}";
  if "${_powerSetExe}" -i; then
    _cm2SucFn;
    return;
  fi
  _cm2WarnFn;
}
## . END _initCpuFn }

## BEGIN _manageSnapshotsOnBootFn {
# Purpose   : Handle all boot-time snapshot-related operations
#
_manageSnapshotsOnBootFn () {
  declare _title _main_unalloc _main_min_unalloc _boot_unalloc \
    _boot_min_unalloc _btrfs_status;
  _title='Manage Snapshots On Boot';

  _cm2SetMsgFn "${_title}";
  if [ -z "${_rollbackBackendExe}" ] || [ -z "${_btrfsExe}" ]; then
    _cm2WarnStrFn 'Required utils not available';
    _cm2WarnFn;
    return 1;
  fi

  _btrfs_status="$("${_rollbackBackendExe}" 'getBtrfsStatus')";
  if [ "${_btrfs_status}" != 'SUPPORTED, AUTO' ] \
    && [ "${_btrfs_status}" != 'SUPPORTED, MANUAL' ]; then
    _cm2WarnStrFn 'BTRFS not setup';
    _cm2WarnFn;
    return 1;
  fi
  
  _main_unalloc="$("${_rollbackBackendExe}" 'getMainUnallocSpace')";
  _main_min_unalloc="$("${_rollbackBackendExe}" 'getMainMinUnalloc')";
  _boot_unalloc="$("${_rollbackBackendExe}" 'getBootUnallocSpace')";
  _boot_min_unalloc="$("${_rollbackBackendExe}" 'getBootMinUnalloc')";
  if (( _main_unalloc > _main_min_unalloc )) \
    && (( _boot_unalloc > _boot_min_unalloc )); then
    "${_rollbackBackendExe}" 'finalizeRestore'        || { _cm2WarnFn; return; };
    "${_rollbackBackendExe}" 'createSnapshot' 'Timed' || { _cm2WarnFn; return; };
    "${_rollbackBackendExe}" 'trimSnapshots'          || { _cm2WarnFn; return; };
    _cm2SucFn;
  else
    _cm2WarnStrFn 'Main or boot disk space low!';
    _cm2WarnFn;
  fi
}
## . END _manageSnapshotsOnBootFn }

## BEGIN _maintainBtrfsFn {
# Purpose   : Handle all periodic BTRFS-related maintenance operations
#
_maintainBtrfsFn () {
  declare _title _main_unalloc _main_min_unalloc _boot_unalloc \
    _boot_min_unalloc;
  _title='Maintain Snapshots';

  _cm2SetMsgFn "${_title}";
  if [ -z "${_rollbackBackendExe}" ] || [ -z "${_btrfsExe}" ]; then
    _cm2WarnStrFn 'Required utils not available';
    _cm2WarnFn;
    return 1;
  fi

  _btrfs_status="$("${_rollbackBackendExe}" 'getBtrfsStatus')";
  if [ "${_btrfs_status}" != 'SUPPORTED, AUTO' ] \
    && [ "${_btrfs_status}" != 'SUPPORTED, MANUAL' ]; then
    _cm2WarnStrFn 'BTRFS not setup';
    _cm2WarnFn;
    return 1;
  fi

  _main_unalloc="$("${_rollbackBackendExe}" 'getMainUnallocSpace')";
  _main_min_unalloc="$("${_rollbackBackendExe}" 'getMainMinUnalloc')";
  _boot_unalloc="$("${_rollbackBackendExe}" 'getBootUnallocSpace')";
  _boot_min_unalloc="$("${_rollbackBackendExe}" 'getBootMinUnalloc')";
  if (( _main_unalloc > _main_min_unalloc )) \
    && (( _boot_unalloc > _boot_min_unalloc )); then
    "${_rollbackBackendExe}" 'createSnapshot' 'Timed' || { _cm2WarnFn; return; };
    "${_rollbackBackendExe}" 'trimSnapshots'          || { _cm2WarnFn; return; };
    "${_rollbackBackendExe}" 'btrfsMaintain'          || { _cm2WarnFn; return; };
    _cm2SucFn;
  else
    if (( _main_unalloc <= _main_min_unalloc )); then
      _promptAllUsersFn 'rollbackLowMainSpace' "${_lowDiskMsg}";
    elif (( _boot_unalloc <= _boot_min_unalloc )); then
      _promptAllUsersFn 'rollbackLowBootSpace' "${_lowBootMsg}";
    fi
    _cm2WarnFn;
  fi
}
## . END _maintainBtrfsFn }

## BEGIN _mainFn {
#
_mainFn () {
  declare _opt_str;

  while getopts ':sb' _opt_str; do
    case "${_opt_str}" in
    b) # Boot tasks
      _cm2EchoFn "== BEGIN :     ${_rootTitle}\n";
      _initCpuFn;
      _manageSnapshotsOnBootFn;
      _cm2EchoFn "\n==. END : OK   ${_rootTitle}\n\n";
      ;;
    s) # Regular BTRFS maintenance
      _maintainBtrfsFn;
      ;;
    *) _cm2EchoFn "\nInvalid option: -$OPTARG} \n";
      _exit 1;;
    esac
  done
}
## . END _mainFn }

## BEGIN Declare and assign global vars {
#
declare _binName _binDir _baseName _baseDir _rootTitle _assignList _lowDiskMsg;
## . END Declare and assign global vars }

## BEGIN Run mainFn when script is NOT sourced {
#
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(  readlink -f "$0"       )" || exit 101;
  _binDir="$(   dirname  "${_binName}" )" || exit 101;
  _baseDir="$(  dirname  "${_binDir}"  )" || exit 101;
  _baseName="$( basename "${_binName}" )" || exit 101;
  _rootTitle='FocusRx System-Level'

  # Import libs and assign more global vars
  _importCommonFn;
  _assignList=(
    "_powerSetExe|${_binDir}/kfocus-power-set||optional"
    "_rollbackBackendExe|${_binDir}/kfocus-rollback-backend||optional"
    '_btrfsExe|/usr/bin/btrfs'
  );
  if ! _cm2AssignExeVarsFn "${_assignList[@]}"; then
    _cm2WarnStrFn 'ABORT: Required commands not found';
    exit 1;
  fi

  _browStr='<tr><td style="padding:8px 32px 8px 0">';
  _erowStr='</td></tr>';
  _tableStr='<table style="width:100%;margin-right:32px">';

  _lowDiskMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browStr}<h3 style="color:#f7941d">Low Disk Space</h3>
${_erowStr}

${_browStr}FocusRx has detected that the system's disk space is<br>
low. This could result in filesystem corruption if not corrected.<br>
Snapshot maintenance has been paused until this is corrected.<br>
<br>
It is highly recommended that you delete large snapshots<br>
using System Rollback. You may also need to delete excess files<br>
or move them to other drives.<br>
<br>
You can access System Rollback by clicking <code>Start Menu &gt;<br>
Kubuntu Focus Tools &gt; System Rollback</code>. Click "Show<br>
Snapshot Sizes" when prompted to quickly find large snapshots.<br>
${_cm2HtmEndStr}
EOF
  )";

  _lowBootMsg="$(cat <<EOF
${_cm2HtmBeginStr}${_tableStr}
${_browStr}<h3 style="color:#f7941d">Low Boot Space</h3>
${_erowStr}

${_browStr}FocusRx has detected that the system's boot<br>
filesystem is low on space. This could result in failure to<br>
boot. Snapshot maintenance has been paused until this<br>
is corrected.<br>
<br>
It is highly recommended that you run the Kernel Cleaner<br>
utility. You can access the Kernel Cleaner by clicking <code>Start<br>
Menu &gt; Kubuntu Focus Tools &gt; Kernel Cleaner</code>.
${_cm2HtmEndStr}
EOF
  )";

  _mainFn "$@";
fi
## . END Run mainFn when script is NOT sourced }

