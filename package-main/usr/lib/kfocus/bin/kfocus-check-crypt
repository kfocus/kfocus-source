#!/bin/bash
#
# Copyright 2021-2022 MindShare Inc.
# Written for the Kubuntu Focus by Michael Mikowski and Erich Eickmeyer
#
# Name    : kfocus-check-crypt
# Purpose : Prompts user to change encrypted disk passwords.
# License : GPL v2
# Run by  : kfocus-firstrun in xterm
# Spec    : 203, 1314
#
set -u;

## BEGIN _importCommonFn
# Run ls-common-symbols.sh to list in-use symbols
#
_importCommonFn () {
  declare _lib_file;
  _lib_file="${_baseDir}/lib/common.2.source";
  if [ -r "${_lib_file}" ]; then
    # shellcheck source=../lib/common.2.source
    source "${_lib_file}" || exit 201;
  else
    1>&2 echo "${_baseName}: ABORT - Cannot source lib |${_lib_file}|";
    exit 201;
  fi
}
## . END _importCommonFn

## BEGIN _populateCryptListFn
# Summary   : _populateCryptListFn
# Purpose   : Populate _cryptList which contains all disk device
#             paths that appear to contain a LUKS encrypted filesystem
# Returns   : 0 on success
# Exits     : 127 bad or cancelled password with pkexec (XDG_SESSION_TYPE=x11)
#           :   1 bad or cancelled password with sudo   (XDG_SESSION_TYPE=tty)
#
_populateCryptListFn () {
  declare _blkid_str _filter_str;
  if _blkid_str="$("${_escExe}" "${_setExe}" echo-blkid)"; then
    _filter_str="$(grep 'TYPE="crypto_LUKS"' <<<"${_blkid_str}" |cut -f1 -d':')";
    mapfile -t _cryptList <<<"${_filter_str}";
  else
    exit; # inherits error code from above (127 or 1)
  fi
}
## . END _populateCryptListFn

## BEGIN _checkDiskPassFn
# Summary   : _checkDiskPassFn diskPart1
# Purpose   : Checks disk partition for the default passphrase
# Returns   : 0 if success, 2 if non-matching passphrase;
#             127 on pkexec auth error, 1 on sudo auth error.
#
_checkDiskPassFn() {
  declare _disk_str;
  _disk_str="${1:-}";
  if [ -z "${_disk_str}" ]; then return 1; fi
  if ! [ -b "${_disk_str}" ]; then
    _cm2WarnStrFn "${_baseName}: Ignore ${_disk_str}: not a block device.";
    return 1;
  fi

  "${_escExe}" cryptsetup \
    luksOpen --test-passphrase "${_disk_str}" \
    <<< "${_defaultStr}" 1>&2 2>/dev/null;
}
## . END _checkDiskPassFn

## == BEGIN PUBLIC METHODS ============================================
## BEGIN _getDefaultCryptList
# Summary   : _getDefaultCryptList
# Purpose   : Find disk partitions that use the default passphrase.
# Example   : _getDefaultCryptList /dev/nvme0n1p3
# Arguments : One or more device nodes, each of which points to a
#             crypto_LUKS partition
# Stdout    : A list of devices that do not pass passphrase check,
#             one per line. A blank string if all disks passed.
# Returns   : 0
# Exits     : 1 (sudo/tty) or 127 (pkexec/x11) on bad auth.
#
_getDefaultCryptList () {
  declare _default_list _device_str _error_code;
  _default_list=();

  for _device_str in "${_cryptList[@]}"; do
    if _checkDiskPassFn "${_device_str}"; then
      _default_list+=( "${_device_str}" );
    else
      _error_code="$?";
      if [ "${_error_code}" = '127' ] || [ "${_error_code}" = '1' ]; then
        exit "${_error_code}";
      else
        # The return value is 2 if password does not work
        true;
      fi
    fi
  done

  if [ "${#_default_list[@]}" != 0 ]; then
    ( IFS=$'\n'; echo "${_default_list[*]}"; )
  else
    echo -n;
  fi
}
## . END _getDefaultCryptList

## BEGIN _modifyDiskPassFn
# Summary   : _modifyDiskPassFn diskPart1 [diskPart2...]
# Purpose   : Changes one or more disks that use the same passphrase
#             to use a new passphrase.
# Example   : _modifyDiskPassFn /dev/nvme0n1p3 /dev/nvme1n1p1
# Arguments : One or more device notes, each of which points to a
#             crypto_LUKS partition. Additionally, reads the old
#             passphrase and new passphrase from stdin.
# Stdout    : A list of disk devices that were tried and failed, one
#             per line. A blank string if all disks passed.
# Returns   : 0 or the number of failed disks.
# Notes     : Only disks in "${_cryptList[@]}" are considered.
#             Devices provided not in this list are discarded.
#
_modifyDiskPassFn () {
  declare _update_dev_list _fail_list \
    _new_pass _grep_str _dev_str;

  _update_dev_list=("$@");
  _fail_list=();

  if [ -z  "${_update_dev_list[*]}" ]; then
    _cm2WarnStrFn "${_baseName}: Missing arguments.";
    exit 201;
  fi

  read -r -s _new_pass;

  if [ -z "${_new_pass}" ]; then
    _cm2WarnStrFn "${_baseName}: Missing arguments.";
    exit 201;
  fi

  _grep_str="$( IFS=$'\n'; echo "${_cryptList[*]}" )";
  for _dev_str in "${_update_dev_list[@]}"; do
    if ! [ -b "${_dev_str}" ]; then
      _cm2WarnStrFn "${_baseName}: Ignore ${_dev_str}: not a block device.";
      continue;
    fi

    if ! grep -q "${_dev_str}" <<< "${_grep_str}"; then
      _cm2WarnStrFn "${_baseName}: Ignore ${_dev_str}: not in crypt list.";
      continue;
    fi

    if { echo "${_defaultStr}"$'\n'; echo "${_new_pass}"; echo "${_new_pass}"; } \
     | "${_escExe}" cryptsetup luksChangeKey "${_dev_str}"; then
       true;
    else
      _fail_list+=( "${_dev_str}" );
    fi
  done

  echo "${_fail_list[@]}";
  return "${#_fail_list[@]}";
}
## . END _modifyDisksPassFn

## BEGIN _echoCryptListFn
# Summary   : _echoCryptListFn;
# Purpose   : Echo all 'TYPE="crypto_LUKS"' disks on the system.
# Example   : _echoCryptListFn;
# Arguments : none.
# Stdout    : List of disk devices, one per line.
# Returns   : 0
#
_echoCryptListFn () {
  if [ "${#_cryptList[@]}" != "0" ]; then
    ( IFS=$'\n'; echo "${_cryptList[*]}" );
  else
    echo -n;
  fi
  return 0;
}
## . END _queryCryptListFn
## == . END PUBLIC METHODS ============================================

## BEGIN MAIN
_mainFn () {
  declare _cmd_str;

  # Populate crypto disk list.
  #   Exit 1 (sudo/tty) or 127 (pkexec/x11) on bad auth.
  _populateCryptListFn;

  ## Begin Dispatch to command
  _cmd_str="${1:-}";
  case "${_cmd_str}" in
    '-c')
      _getDefaultCryptList;;
    '-m')
      shift;
      _modifyDiskPassFn "$@";;
    '-q')
      _echoCryptListFn;;
    *)
      _cm2ErrStrFn 'No directive specified';
      exit 201;;
  esac;
  ## . End Dispatch to command
  exit; # Raw exit to propagate above return values
}
## . END MAIN

## BEGIN Declare and set global vars
declare _defaultStr _escExe _cryptList _setExe;
_defaultStr="$(echo 6b7562756e74750a |xxd -r -p)";
# . END Declare and set global vars

## BEGIN Run main if script is not sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(  readlink -f "$0"       )" || exit 101;
  _binDir="$(   dirname  "${_binName}" )" || exit 101;
  _baseDir="$(  dirname  "${_binDir}"  )" || exit 101;
  _baseName="$( basename "${_binName}" )" || exit 101;
  _importCommonFn;

  # Get escalation exe
  _escExe="$(_cm2GetEscExeFn)" || exit;
  _assignList=( "_setExe|${_binDir}/kfocus-firstrun-set" );
  if ! _cm2AssignExeVarsFn "${_assignList[@]}"; then
    _cm2WarnStrFn 'Could not assign variables';
    exit 1;
  fi

  _mainFn "$@";
fi
## . END Run main if script is not sourced


