#!/bin/bash
#
# Copyright 2021-2022 MindShare Inc.
# Written for the Kubuntu Focus by Michael Mikowski and Erich Eickmeyer
#
# Name    : kfocus-check-crypt
# Purpose : Prompts user to change encrypted disk passwords.
# License : GPL v2
# Run by  : kfocus-firstrun in xterm
# Spec    : 203, 1314
#
set -u;

## BEGIN _importCommonFn
# Run ls-common-symbols.sh to list in-use symbols
#
_importCommonFn () {
  declare _lib_file;
  _lib_file="${_baseDir}/lib/common.2.source";
  if [ -r "${_lib_file}" ]; then
    # shellcheck source=../lib/common.2.source
    source "${_lib_file}" || exit 201;
  else
    1>&2 echo "${_baseName}: ABORT - Cannot source lib |${_lib_file}|";
    exit 201;
  fi
}
## . END _importCommonFn

# BEGIN _setCryptListFn
# Summary   : _setCryptListFn
# Purpose   : Populate _cryptList which contains all disk device
#             paths that appear to contain a LUKS encrypted filesystem
# Returns   : 0 if success, non-zero on failure
_setCryptListFn () {
  mapfile -t _cryptList < <(
    grep 'TYPE="crypto_LUKS"' <<<"
    $("${_escExe}" "${_setExe}" echo-blkid)" \
    | cut -f1 -d':'
  );
}
# . END _setCryptListFn

# BEGIN _checkDiskPassFn
# Summary   : _checkDiskPassFn diskPart1
# Purpose   : Checks disk partition for the default passphrase
# Returns   : 0 if success, non-zero on failure
#
_checkDiskPassFn() {
  declare _disk_str;
  _disk_str="${1:-}";
  if [ -z "${_disk_str}" ]; then return 1; fi
  if ! [ -b "${_disk_str}" ]; then
    _cm2WarnStrFn "${_baseName}: Ignore ${_disk_str}: not a block device.";
    return 1;
  fi

  "${_escExe}" cryptsetup \
    luksOpen --test-passphrase "${_disk_str}" \
    <<< "${_defaultStr}" 1>&2 2>/dev/null;
}
# . END _checkDiskPassFn

# BEGIN _checkDisksForDefaultPassFn
# Summary   : _checkDisksForDefaultPassFn
# Purpose   : Checks disk partitions for the default passphrase.
# Example   : _checkDisksForDefaultPassFn /dev/nvme0n1p3
# Arguments : One or more device nodes, each of which points to a crypto_LUKS
#             partition
# Stdout    : An IFS delimited list of disk devices that were tried and failed.
#             A blank string if all disks passed.
# Returns   : An integer representing the number of partitions found that use
#             the default passphrase.
_checkDisksForDefaultPassFn () {
  declare _fail_list _disk_str _fail_list_item;

  _setCryptListFn;
  _fail_list=();

  for _disk_str in "${_cryptList[@]}"; do
    if _checkDiskPassFn "${_disk_str}"; then
      _fail_list+=( "${_disk_str}" );
    fi
  done

  for _fail_list_item in "${_fail_list[@]}"; do
    echo "$_fail_list_item";
  done
  return "${#_fail_list[@]}";
}
# . END _checkDisksForDefaultPassFn

# BEGIN _modifyDisksPassFn
# Summary   : _modifyDisksPassFn diskPart1 [diskPart2...]
# Purpose   : Changes a batch of disks that use the same passphrase to use a
#             new passphrase.
# Example   : _modifyDisksPassFn /dev/nvme0n1p3 /dev/nvme1n1p1
# Arguments : One or more device notes, each of which points to a crypto_LUKS
#             partition. Additionally, reads the old passphrase and new
#             passphrase from stdin.
# Stdout    : An IFS delimited list of disk devices that were tried and failed.
#             A blank string if all disks passed.
# Exit      : 0 or the number of failed disks.
# Notes     : This function calls "exit", so if you run it, the script *will*
#             terminate before running anything after it.
_modifyDisksPassFn() {
  declare _update_list _fail_list _old_pass _new_pass _disk_str;

  _update_list=( "$@" );
  _fail_list=();

  read -r -s _old_pass;
  read -r -s _new_pass;

  for _disk_str in "${_update_list[@]}"; do
    if ! [ -b "${_disk_str}" ]; then
      _cm2WarnStrFn "${_baseName}: Ignore ${_disk_str}: not a block device.";
      continue;
    fi

    if { echo "${_old_pass}"; echo "${_new_pass}"; echo "${_new_pass}"; } \
     | "${_escExe}" cryptsetup luksChangeKey "${_disk_str}"; then
       true;
    else
      _fail_list+=( "${_disk_str}" );
    fi
  done

  echo "${_fail_list[@]}";
  return "${#_fail_list[@]}";
}
# . END _modifyDisksPassFn

# BEGIN MAIN
_mainFn () {
  declare _cmd_str _crypt_list_item;

  _cmd_str="${1:-}";

  ## Begin Parse mode argument (if it exists)
  case "${_cmd_str}" in
    '-c')
      _checkDisksForDefaultPassFn;
      return;;
    '-m')
      shift;
      _modifyDisksPassFn "$@";
      return;;
    '-q')
      _setCryptListFn;
      if [ "${#_cryptList[@]}" != "0" ]; then
        for _crypt_list_item in "${_cryptList[@]}"; do
          echo "$_crypt_list_item";
        done
      else
        echo -n;
      fi
      return;;
    *)
      _cm2ErrStrFn 'No directive specified';
      return 1;;
  esac;
  ## . End Parse mode argument
}
# . END MAIN

# BEGIN Declare and set global vars
declare _defaultStr _escExe _cryptList;
_defaultStr="$(echo 6b7562756e74750a |xxd -r -p)";
# . END Declare and set global vars

# BEGIN Run main if script is not sourced
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  _binName="$(  readlink -f "$0"       )" || exit 101;
  _binDir="$(   dirname  "${_binName}" )" || exit 101;
  _baseDir="$(  dirname  "${_binDir}"  )" || exit 101;
  _baseName="$( basename "${_binName}" )" || exit 101;
  _importCommonFn;

  # Get escalation exe
  _escExe="$(_cm2GetEscExeFn)" || exit;
  _assignList=( "_setExe|${_binDir}/kfocus-firstrun-set" );
  if ! _cm2AssignExeVarsFn "${_assignList[@]}"; then
    _cm2WarnStrFn 'Could not assign variables';
    exit 1;
  fi

  _mainFn "$@";
fi
# . END Run main if script is not sourced
