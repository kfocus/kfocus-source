#!/bin/bash
# kfocus-main postinst
# This must be run as root. Use set -u to debug.
#
set -e;

## BEGIN Declare common.2.source symbols {
#  IMPORT 2022-03-23 EXCERPT from test/test-scripts/common.2.source
_cmXBlockMsg='';
_cmXEchoFn    () { 1>&2 echo -e "$*";  }
_cmXSetMsgFn  () { _cmXBlockMsg="$*"; _cmXEchoFn "== BEGIN : ${_cmXBlockMsg}"; }
_cmXSucFn     () { _cmXEchoFn "== . END : OK   ${_cmXBlockMsg}\n\n"; }
_cmXSucStrFn  () { _cmXEchoFn "ok  : ${*}"; }
_cmXWarnFn    () { _cmXEchoFn "== . END : WARN Could not ${_cmXBlockMsg}\n\n"; }
_cmXWarnStrFn () { _cmXEchoFn "warn: ${*}"; }
## . END Declare common.2.source symbols }


## BEGIN _updatePciidsFn {
# IMPORTED on 2022-02-23 from test/test-scripts/unit.d/00500_updatePciids
#
_updatePciidsFn () {
  declare _share_file _exe_lspci_str _exe_update_str;
  _share_file="${_rootDir}/usr/share/misc/pci.ids";
  _exe_lspci_str="$( command -v lspci         || true)";
  _exe_update_str="$(command -v update-pciids || true)";

  _cmXSetMsgFn 'Update pciids';

  # Circumvent bug listed above
  if ! rm -f "${_share_file}.old"; then
    _cmXWarnStrFn "Could not remove ${_share_file}.old";
  fi

  # Use -z instead of ! -x to allow for functional mocks.
  if [ -z "${_exe_lspci_str}" ]; then
    _cmXWarnStrFn "${_exe_lspci_str} not found";
    _cmXWarnFn; return;
  fi

  if [ -z "${_exe_update_str}" ]; then
    _cmXWarnStrFn "${_exe_update_str} not found";
    _cmXWarnFn; return;
  fi

  if "${_exe_update_str}"; then
    _cmXSucStrFn 'Updated pciids';
    _cmXSucFn; return;
  else
    _cmXWarnStrFn 'Could not update pciids';
    _cmXWarnFn; return;
  fi
}
## . END _updatePciidsFn }

## BEGIN _applyRootConfigFn {
_applyRootConfigFn () {
  declare _exe_rsync_str;
  _exe_rsync_str="$(command -v rsync || true)";

  if [ -f "/root/.vimrc" ]; then return; fi

  if [ -z "${_exe_rsync_str}" ]; then
    _warnStr "${_exe_rsync_str} not found";
    _cmXWarnFn; return;
  fi

  _cmXSetMsgFn 'Apply basic configs for root user';
  if "${_exe_rsync_str}" -azog --chown='0:0' \
    "${_libKfocusDir}/skel/" '/root/'; then
      _cmXSucFn; else _cmXWarnFn;
  fi
}
## . END _applyRootConfigFn }

## BEGIN _setupHintDefaultsFn {
 # Purpose: Setup hint widget. Link to default panels IFF
 #   the links do not already exist. Otherwise, we assume
 #   kfocus-hw has created the links and all is copacetic.
 #
_setupHintDefaultsFn () {
  declare _hints_dir _default_dir \
    _png_list _src_path _img_file _tgt_path _msg;

  # Initialize
  _cmXSetMsgFn 'Set defaults for model hints if needed';
  _hints_dir='/usr/share/kfocus-hints';


  # Calculate and test default dir
  _default_dir="${_hints_dir}/default";
  if [ ! -d "${_default_dir}" ]; then
    _cmXWarnStrFn "Unexpected missing default dir: ${_default_dir}";
    _cmXWarnFn;
    return;
  fi

  ## Begin Loop through default images {
   # Set default image links if not already set.
   #
  mapfile -n30 -t _png_list < <(
    find "${_default_dir}" -mindepth 1 -maxdepth 1 -name '*.png' | sort
  );
  for _src_path in "${_png_list[@]}"; do
    _img_file="$(basename "${_src_path}")";
    _tgt_path="${_hints_dir}/${_img_file}";
    if [ ! -f "${_src_path}" ]; then continue; fi

    if [ -f "${_tgt_path}" ]; then
      _cmXWarnStrFn "${_tgt_path} already set. Skipped.";
      continue;
    fi

    _msg="symlink target ${_tgt_path}";
    if ln -s "${_src_path}" "${_tgt_path}"; then
      _cmXSucStrFn "Created ${_msg}";
    else
      _cmXWarnStrFn "Could not create ${_msg}";
    fi
  done
  ## . End Loop through default images }

  _cmXSucFn;
}
## . END _setupHintDefaultsFn }

## BEGIN _cleanupFn {
#  Purpose: Clean up of various bits
_cleanUpFn () {
  declare _firstrun_file _exe_update_deskdb;
  if [ -d "${_libKfocusDir}/skel/.ssh" ]; then
    _cmXSetMsgFn "Set secure .ssh access rights";
    if chmod 700 "${_libKfocusDir}/skel/.ssh"; then
      _cmXSucFn; else _cmXWarnFn; fi
  fi

  _exe_update_deskdb="$(command -v update-desktop-database || true)";
  if [ -n "${_exe_update_deskdb}" ]; then
    _cmXSetMsgFn 'Update desktop database';
    if "${_exe_update_deskdb}";  then _cmXSucFn; else _cmXWarnFn; fi
  fi

  _cmXSetMsgFn 'Set up pip-tools';
  if pip3 install pip-tools; then _cmXSucFn; else _cmXWarnFn; fi

  _firstrun_file='/etc/xdg/autostart/kfocus-firstrun.desktop';
  if [ -e "${_firstrun_file}" ] || [ -L "${_firstrun_file}" ]; then
    _cmXSetMsgFn "Remove deprecated ${_firstrun_file}";
    if rm -f "${_firstrun_file}"; then
      _cmXSucFn; else _cmXWarnFn;
    fi
  fi

  # Enable system-level FocusRx
  _cmXSetMsgFn 'Enable services';
  2>/dev/null deb-systemd-helper enable kfocus-focusrx-system.service || true;
  _cmXSucFn;

  # Remove old bash completion symlink; this was renamed to
  #   /etc/bash_completion.d/kfocus
  # This is from Jammy; remove after Noble LTS
  #
  if [ -f /etc/bash_completion.d/kfocus-bashcompletion ]; then
    _cmXSetMsgFn 'Remove out-of-date kfocus-bashcompletion';
    if rm -f /etc/bash_completion.d/kfocus-bashcompletion; then
      _cmXSucFn; else _cmXWarnFn;
    fi
  fi
}
## . END _cleanupFn }

## BEGIN declare and assign global vars {
declare _rootDir _repoSrcDir _libKfocusDir;
_rootDir='';
_repoSrcDir="${_rootDir}/etc/apt/sources.list.d";

_libKfocusDir="${_rootDir}/usr/lib/kfocus";
## . END declare and assign global vars }

## BEGIN Run main if script is not sourced {
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  case "${1:-}" in
    abort-upgrade|abort-remove|abort-configure|abort*) true;;
    configure|upgrade)
      # See jammy branch for
      #   * _dedupRepoSrcFileFn: dedup repos if needed
      #   * _setupSddmFixFn: apply SDDM screen-order fix to Xsetup; upstreamed
      #   * _addBashCompletionFn: kfocus-bashcompletion symlink; now in links
      #   * _applyRootStyleFn: renamed _applyRootConfigFn
      #   * _createPlasmaWelcomeRcFn: create user files; replace per 4176
      #   * _adviseRebootFn to advise a reboot after install; not needed

      # Download PCI extended data if needed
      _updatePciidsFn;

      # Apply minimal skel copy for root user
      _applyRootConfigFn;

      # Create links per model
      _setupHintDefaultsFn;

      # Cleanup misc details
      _cleanUpFn;
    ;;
  esac
fi
## . END Run main if script is not sourced }

# Tag to allow some debhelper commands to inject relevant code
#DEBHELPER#

exit 0;
