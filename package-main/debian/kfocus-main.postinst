#!/bin/bash
# kfocus-main postinst
# This must be run as root. Use set -u to debug.
#
set -e;

## BEGIN Declare common.2.source symbols {
#  IMPORT 2022-03-23 EXCERPT from test/test-scripts/common.2.source
_cmXBlockMsg='';
_cmXEchoFn    () { 1>&2 echo -e "$*";  }
_cmXSetMsgFn  () { _cmXBlockMsg="$*"; _cmXEchoFn "== BEGIN : ${_cmXBlockMsg}"; }
_cmXSucFn     () { _cmXEchoFn "== . END : OK   ${_cmXBlockMsg}\n\n"; }
_cmXSucStrFn  () { _cmXEchoFn "ok  : ${*}"; }
_cmXWarnFn    () { _cmXEchoFn "== . END : WARN Could not ${_cmXBlockMsg}\n\n"; }
_cmXWarnStrFn () { _cmXEchoFn "warn: ${*}"; }
## . END Declare common.2.source symbols }


## BEGIN _updatePciidsFn {
# IMPORTED on 2022-02-23 from test/test-scripts/unit.d/00500_updatePciids
#
_updatePciidsFn () {
  declare _share_file _exe_lspci_str _exe_update_str;
  _share_file="${_rootDir}/usr/share/misc/pci.ids";
  _exe_lspci_str="$( command -v lspci         || true)";
  _exe_update_str="$(command -v update-pciids || true)";

  _cmXSetMsgFn 'Update pciids';

  # Circumvent bug listed above
  if ! rm -f "${_share_file}.old"; then
    _cmXWarnStrFn "Could not remove ${_share_file}.old";
  fi

  # Use -z instead of ! -x to allow for functional mocks.
  if [ -z "${_exe_lspci_str}" ]; then
    _cmXWarnStrFn "${_exe_lspci_str} not found";
    _cmXWarnFn; return;
  fi

  if [ -z "${_exe_update_str}" ]; then
    _cmXWarnStrFn "${_exe_update_str} not found";
    _cmXWarnFn; return;
  fi

  if "${_exe_update_str}"; then
    _cmXSucStrFn 'Updated pciids';
    _cmXSucFn; return;
  else
    _cmXWarnStrFn 'Could not update pciids';
    _cmXWarnFn; return;
  fi
}
## . END _updatePciidsFn }

## BEGIN _applyRootConfigFn {
_applyRootConfigFn () {
  declare _exe_rsync_str;
  _exe_rsync_str="$(command -v rsync || true)";

  if [ -f "/root/.vimrc" ]; then return; fi

  if [ -z "${_exe_rsync_str}" ]; then
    _warnStr "${_exe_rsync_str} not found";
    _cmXWarnFn; return;
  fi

  _cmXSetMsgFn 'Apply basic configs for root user';
  if "${_exe_rsync_str}" -azog --chown='0:0' \
    "${_libKfocusDir}/skel/" '/root/'; then
      _cmXSucFn; else _cmXWarnFn;
  fi
}
## . END _applyRootConfigFn }

## BEGIN _setupModelHintsFn {
 # Purpose: Setup hint widget model-specific symlinks
 # Important: This is an extract from kfocus-hw which is the master.
 # Update that code first and copy here. This must be here in case
 # this is updated separate from kfocus-hw.
 #
_setupModelHintsFn () {
  declare _lib_file _model_code _hints_dir _unique_dir _model_dir \
    _png_list _src_path _img_file _tgt_path _msg;

  # Initialize
  _cmXSetMsgFn 'Setup model hints';
  _hints_dir='/usr/share/kfocus-hints';
  _lib_file="${_libKfocusDir}/lib/common.2.source";

  # Extract model code from common library if available
  if [ -r "${_lib_file}" ]; then
    # shellcheck disable=1091,1090 source=/usr/lib/kfocus/lib/common.2.source
    source "${_lib_file}" || true;
    if [ "$(type -t _cm2EchoModelStrFn)" = 'function' ]; then
      _model_code="$(_cm2EchoModelStrFn 'code')";
    fi
  fi
  if [ -z "${_model_code:-}"  ]; then  _model_code='other'; fi

  # Calculate and test target directories
  _unique_dir="${_hints_dir}/unique";
  _model_dir="${_unique_dir}/${_model_code}";
  if [ ! -d "${_model_dir}" ]; then
    _cmXWarnStrFn 'Model dir not found. Using default.';
    _model_dir="${_unique_dir}/default";
    if [ ! -d "${_model_dir}" ]; then
      _cmXWarnStrFn "Unexpected missing default dir: ${_model_dir}";
      _cmXWarnStrFn '  Skipping step.';
      return;
    fi
  fi

  ## Begin Loop through unique images
  mapfile -n30 -t _png_list < <(
    find "${_model_dir}" -mindepth 1 -maxdepth 1 -name '*.png' | sort
  );
  for _src_path in "${_png_list[@]}"; do
    _img_file="$(basename "${_src_path}")";
    _tgt_path="${_hints_dir}/${_img_file}";
    if [ ! -f "${_src_path}" ]; then continue; fi

    if [ -e "${_tgt_path}" ]; then
      rm -f "${_tgt_path}" || continue;
    fi

    _msg="symlink target ${_tgt_path}";
    if ln -s "${_src_path}" "${_tgt_path}"; then
      _cmXSucStrFn "Created ${_msg}";
    else
      _cmXWarnStrFn "Could not create ${_msg}";
    fi
  done
  ## . End Loop through unique images

  _cmXSucFn;
}
## . END _setupModelHintsFn }

## BEGIN _cleanupFn {
#  Purpose: Clean up of various bits
_cleanUpFn () {
  declare _firstrun_file _exe_update_deskdb;
  if [ -d "${_libKfocusDir}/skel/.ssh" ]; then
    _cmXSetMsgFn "Set secure .ssh access rights";
    if chmod 700 "${_libKfocusDir}/skel/.ssh"; then
      _cmXSucFn; else _cmXWarnFn; fi
  fi

  _exe_update_deskdb="$(command -v update-desktop-database || true)";
  if [ -n "${_exe_update_deskdb}" ]; then
    _cmXSetMsgFn 'Update desktop database';
    if "${_exe_update_deskdb}";  then _cmXSucFn; else _cmXWarnFn; fi
  fi

  _cmXSetMsgFn 'Set up pip-tools';
  if pip3 install pip-tools; then _cmXSucFn; else _cmXWarnFn; fi

  _firstrun_file='/etc/xdg/autostart/kfocus-firstrun.desktop';
  if [ -e "${_firstrun_file}" ] || [ -L "${_firstrun_file}" ]; then
    _cmXSetMsgFn "Remove deprecated ${_firstrun_file}";
    if rm -f "${_firstrun_file}"; then
      _cmXSucFn; else _cmXWarnFn;
    fi
  fi

  # Update systemctl for removed kfocus-dm.service
  _cmXSetMsgFn 'Remove out-of-date services';
  2>/dev/null deb-systemd-helper purge  kfocus-dm.service || true;
  2>/dev/null deb-systemd-helper unmask kfocus-dm.service || true;
  _cmXSucFn;

  # Enable system-level FocusRx
  _cmXSetMsgFn 'Enable services';
  2>/dev/null deb-systemd-helper enable kfocus-focusrx-system.service || true;
  _cmXSucFn;

  # Remove old bash completion symlink
  if [ -f /etc/bash_completion.d/kfocus-bashcompletion ]; then
    rm /etc/bash_completion.d/kfocus-bashcompletion;
  fi

  # See https://askubuntu.com/questions/1018576
  # This allows boot work faster before network is enabled
  # 2551 Disabled to prevent breaking network file systems
  #
  # _cmXSetMsgFn 'Disable wait for network on boot';
  # if ( deb-systemd-helper disable NetworkManager-wait-online.service ); then
  #   _cmXSucFn; else _cmXWarnFn;
  # fi
}
## . END _cleanupFn }

## BEGIN _adviseRebootFn {
# IMPORTED on 2022-03-23 from test/test-scripts/unit.d/00100_adviseReboot
# Purpose: Advise reboot after install. Enable when appropriate.
#   See https://askubuntu.com/questions/993570
#
#_adviseRebootFn () {
#  declare _reboot_file;
#  _reboot_file="${_rootDir}/var/run/reboot-required";
#  _cmXSetMsgFn 'Advise reboot';
#  if touch "${_reboot_file}"; then
#    _cmXSucStrFn "Wrote ${_reboot_file}";
#    _cmXSucFn;
#  else
#    _cmXWarnStrFn "Could not write ${_reboot_file}";
#    _cmXWarnFn;
#  fi
#}
## . END _adviseRebootFn }


## BEGIN _setupSddmFixFn {
_setupSddmFixFn () {
  declare _blk_str _xsetup_file _setup_str;

  _cmXSetMsgFn 'Setup SDDM screen fix';
  _blk_str='/## BEGIN kfocus addition sddm fix\s*$/I,'
  _blk_str+='/## . END kfocus addition sddm fix\s*$/Id';

  _xsetup_file="${_rootDir}/usr/share/sddm/scripts/Xsetup";

  ## Begin Short circuit block
  while true; do
    if [ ! -e "${_xsetup_file}" ]; then break; fi
    if ! grep -qi '^## BEGIN kfocus' "${_xsetup_file}"; then break; fi

    if sed -i "${_blk_str}" "${_xsetup_file}"; then
      _cmXSucStrFn "Scrubbed ${_xsetup_file}";
      break;
    fi

    # Alternate scrubber
    sed -i '/##\s* \(BEGIN\|. END\) kfocus addition/Id' "${_xsetup_file}";
    sed -i '/managed by kfocus/Id'                      "${_xsetup_file}";
    sed -i '/if \[ -x "\${_kfSetupExe}" \];/d'          "${_xsetup_file}";
    sed -i $'/_kfSetupExe=\'\/usr\/lib\/kfocus/d'       "${_xsetup_file}";
    break;
  done
  ## . End Short circuit block

  # 3153 Skip adding call if we find a signature of
  # the sddm workaround per 2988.
  if grep -qi '\Wxrandr\W.*--listmonitors' "${_xsetup_file}"; then
    _cmXEchoFn 'Embedded SDDM fix signature found';
    _cmXSucFn;
    return;
  fi

  _setup_str="$(cat << 'EOS'
## BEGIN KFocus addition sddm fix
#  PLEASE DO NOT ALTER this section managed by kfocus-main
_kfSetupExe='/usr/lib/kfocus/bin/kfocus-sddm-setup';
if [ -x "${_kfSetupExe}" ]; then "${_kfSetupExe}" || true; fi
## . END KFocus addition sddm fix
EOS
)";

  if echo "${_setup_str}" >> "${_xsetup_file}"; then
    _cmXSucFn;
  else
    _cmXWarnStrFn "Trouble updating ${_xsetup_file}";
    _cmXWarnFn;
  fi
}
## . END _setupSddmFixFn }

## BEGIN declare and assign global vars {
declare _rootDir _repoSrcDir _libKfocusDir;
_rootDir='';
_repoSrcDir="${_rootDir}/etc/apt/sources.list.d";

_libKfocusDir="${_rootDir}/usr/lib/kfocus";
## . END declare and assign global vars }

## BEGIN Run main if script is not sourced {
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  case "${1:-}" in
    abort-upgrade|abort-remove|abort-configure|abort*) true;;
    configure|upgrade)
      # See jammy for
      #   * _dedupRepoSrcFileFn to dedup repos if needed
      #   * _setupSddmFixFn to apply SDDM screen order fix in Xsetup
      #   * _addBashCompletionFn for kfocus-bashcompletion symlink
      #   * _applyRootStyleFn => _applyRootconfigFn
      #   * _createPlasmaWelcomeRcFn created user files; replace per 4176

      # Download PCI extended data if needed
      _updatePciidsFn;

      # Apply minimal skel copy for root user 
      _applyRootConfigFn;

      # Create links per model
      ## TODO: Set this to overwrite default ONLY if symlinks do not exist
      _setupModelHintsFn;

      # Cleanup misc details
      _cleanUpFn;

      # Advise reboot
      # 2023-11-04 Enable when appropriate.
      #   Otherwise, have subordinate packages make this call if needed.
      # _adviseRebootFn;
    ;;
  esac
fi
## . END Run main if script is not sourced }

# Tag to allow some debhelper commands to inject relevant code
#DEBHELPER#

exit 0;
