#!/bin/bash
#
# Test for kfocus-tbt-set
#
# set -u is set in _runUnitTests (the test harness)
#

## BEGIN _overwriteWithMocksFn {
# Purpose: Override bash methods and sourced script fns and symbols.
_overwriteWithMocksFn () {
  # Source executable
  # bashsupport disable=BP2001
  _rootDir="${_t00RunDir}";
  # shellcheck disable=SC2154
  _exeFile="${_t00TopDir}";
  _exeFile+='/package-tools/usr/lib/kfocus/bin/kfocus-tbt-set';
  # shellcheck disable=SC1090,SC2154
  source "${_exeFile}" || exit 1;

  # Reset globals
  lsmod () {
    declare _lsmod_state_str;
    _lsmod_state_str="$(cat "${_lsmodStateFile}")";
    echo "  lsmod # output |${_lsmod_state_str}|" >> "${_assertInfoFile}";
    echo "${_lsmod_state_str}";
  }
  modprobe () {
    declare _lsmod_state_str;
    echo "  modprobe ${@}" >> "${_assertInfoFile}";

    if [ "${*}" = 'thunderbolt' ]; then
      _lsmod_state_str='thunderbolt';
    else
      _lsmod_state_str='';
    fi

    echo "  Mock lsmod set to |${_lsmod_state_str}|" >> "${_assertInfoFile}";
    echo -n "${_lsmod_state_str}" > "${_lsmodStateFile}";
  }

  # _modelCode is set from the assert table
  _getModelCodeFn () { echo "${_modelCode}"; }
  _disableXhciFn () {
    if [ -e "${_acpiWakeupFile}" ]; then
      sed -i 's/^\(XHCI\t.*\t\)\*enabled /\1\*disabled/' \
        "${_acpiWakeupFile}";
    fi
    echo "  _disableXhciFn: $(grep -E '^XHCI' "${_acpiWakeupFile}")" \
      >> "${_assertInfoFile}";
  }
  ## . END _disableXhciFn }

  ## BEGIN _enableXhciFn {
  _enableXhciFn () {
    if [ -e "${_acpiWakeupFile}" ]; then
      sed -i 's/^\(XHCI\t.*\t\)\*disabled/\1\*enabled /' \
        "${_acpiWakeupFile}";
    fi
    echo "  _enableXhciFn: $(grep -E '^XHCI' "${_acpiWakeupFile}")" \
      >> "${_assertInfoFile}";
  }
  ## . END _enableXhciFn }
}
## . END _overwriteWithMocksFn }

## BEGIN _unsetMocksFn {
# Purpose : Unset mocked functions and other globals to prevent
#   pollution of namespaces. Mocked functions from commons.2.source are not
#   reset here; instead they are re-source after every test in runUnitTests
#   (the test harness). See more notes in 00900.
_unsetMocksFn () {
  unset lsmod modprobe _getModelCodeFn _disableXhciFn _enableXhciFn;
}
## . END _unsetMocksFn }

declare _modelCode _exeFile _assertInfoFile _lsmodStatefile;
# Default is to have thunderbolt module loaded
_lsmodStateFile="$(_cm2MkTmpFileFn)";
echo -n 'thunderbolt' > "${_lsmodStateFile}";

## BEGIN _runTestFn {
# This MUST be called '_runTestFn' for use by the _runUnitTests
_runTestFn () {
  declare _assert_table _fail_count _assert_count _assert_idx \
    _assert_line _bit_list _action_str _count_str _expect_subdir;

  # Clear out run dir, copy init dir, check expect dir
  if ! _t00ClearRunDirFn; then return 1; fi
  if ! _t00CopyInitDirFn; then return 1; fi
  if ! _t00CheckExpectDirFn; then return 1; fi

  # Mock functions and variables as needed
  _overwriteWithMocksFn;

  # Assert table: '_modelCode|action_str'
  _assert_table=(
    'initial'
    'xeg1|start'     'xeg1|query'
    'xeg1|stop'      'xeg1|query'

    'm2g5|stop'      'm2g5|query'
    'm2g5|start'     'm2g5|query'
    'm2g5|stop'      'm2g5|query'

    'ir1Xg2|start'   'ir1Xg2|query'
    'ir1Xg2|enable'  'ir1Xg2|query'
    'ir1Xg2|disable' 'ir1Xg2|query'
    'ir1Xg2|stop'    'ir1Xg2|query'

    'm2g5p1|stop'    'm2g5p1|query'
    'm2g5p1|start'   'm2g5p1|query'
    'm2g5p1|disable' 'm2g5p1|query'
    'm2g5p1|enable'  'm2g5p1|query'
  );

  ## Begin Iterate through assertions {
  _fail_count=0;
  _assert_count="${#_assert_table[@]}";
  _assert_idx=1;

  for _assert_line in "${_assert_table[@]}"; do
    # shellcheck disable=SC2154
    _count_str="$(_t00MakeCountStrFn "${_assert_idx}" "${_assert_count}")";

    # Calculate expect dir and create if needed
    printf -v _expect_subdir '%s/state-%02d' "${_t00ExpectDir}" "${_assert_idx}";
    _assertInfoFile="${_t00RunDir}/assert_info.txt";
    echo -e "${_count_str}\n  assert_line: ${_assert_line}" > "${_assertInfoFile}";

    # Run action and record output
    readarray -d'|' -t _bit_list < <(echo -n "${_assert_line}");
    _modelCode="${_bit_list[0]:-}";
    _action_str="${_bit_list[1]:-}";
    if [ "${_action_str}" ]; then
      echo -e "_mainFn ${_action_str}" >> "${_assertInfoFile}";
      _mainFn "${_action_str}" | sed 's/^/  #> /' >> "${_assertInfoFile}";
    fi

    # Create expect subdir if not found
    if ! [ -d "${_expect_subdir}" ]; then
      mkdir -p "${_expect_subdir}" || {
        _cm2EchoFn "  fail: ${_count_str} ${_expect_subdir}";
        _cm2EchoFn "    could not make directory |$_expect_subdir}";
      }
    fi

    # Compare run to expect state
    if diff -r --brief "${_expect_subdir}" "${_t00RunDir}"; then
      _cm2EchoFn "  ok  : ${_count_str} ${_assert_line}";
    else
      _cm2EchoFn "  fail: ${_count_str} ${_assert_line}";
      (( _fail_count++ ));
      _cm2EchoFn "  Please compare directories ....";
      meld "${_expect_subdir}" "${_t00RunDir}";
    fi

    (( _assert_idx++ ));
  done
  ## End Iterate through assertions }

  _unsetMocksFn;
  if [ "${_fail_count}" -gt 0 ]; then
    _cm2EchoFn "FAIL: ${_fail_count} of ${_assert_count} asserts failed.";
  else
    _cm2EchoFn 'OK  : Results match expected';
  fi

  return "${_fail_count}";
}
## . END _runTestFn }
