#!/bin/bash

## BEGIN _getPkgInfoStrFn {
 # Purpose: Get package info for audit
 #
_getPkgInfoStrFn () {
  declare _sniff_str _found_pkg_name _expect_pkg_name \
    _exe_str _found_list _msg_str;

  _sniff_str="${1:-}";
  _expect_pkg_name="${2:-}";

  _exe_str="$(readlink -f "$(command -v "${_sniff_str}" || true)")";
  if [ -z "${_exe_str}" ]; then
    echo "Cannot find sniff_str '${_sniff_str}'. Please install to audit.";
    return 1;
  fi

  read -r -d '' -a _found_list < <(
    dpkg-query -S "${_exe_str}" | awk -F: '{print $1}' | sort -u
  );
  if [[ "${#_found_list[@]}" == 0 ]]; then
    echo "ERROR: Trouble finding installed package for ${_exe_str}";
    return 1;
  fi

  _msg_str='';
  for _found_pkg_name in "${_found_list[@]}"; do
    if [ "${_found_pkg_name}" = "${_expect_pkg_name}" ]; then
      _msg_str='';
      break;
    else
      _msg_str+="\n  WARN: Found package appears incorrect:";
      _msg_str+=" |${_found_pkg_name}| NOT |${_expect_pkg_name}|";
    fi
  done

  if [ "${#_found_list[@]}" -gt 1 ]; then
    _msg_str+="\n  WARN: multiple packages found: |${_found_list[*]}|";
  fi

  echo -e "${_msg_str}";
}
## . END _getPkgInfoStrFn }

## BEGIN _auditMimeHandlerFn
#  Purpose: Check kfocus-mime handler using audit flag
#  Used by: package-main
#
# set -u is set in test harness
#
_auditMimeHandlerFn () {
  declare _head_str _found_list _output_file _app_id_str \
    _report_str _bit_list _app_id _sniff_str _pkg_name _report_str;

  _head_str='|app_id|cmd_str;with;args|sniff_str|pkg_str|descr'
  _head_str+='|diagnostics';
  _found_list=( "${_head_str}" );

  _output_file="${_t00RunDir}/kfocus-mime-audit.txt";

  # Begin Create report
  _app_id_str="$("${_mimeExe}" -l)";
  while read -r _app_id; do
    _report_str='|';
    _report_str+="$("${_mimeExe}" -r "${_app_id}")";
    IFS='|' read -ra _bit_list <<< "$_report_str";
    _sniff_str="${_bit_list[3]}";
    _pkg_name="${_bit_list[4]}";

    _cm2EchoFn "Progress ... ${_sniff_str}";
    if ! grep -qi 'special handler expected' <<< "${_report_str}"; then
      _report_str+="|$(_getPkgInfoStrFn "${_sniff_str}" "${_pkg_name}")";
    fi
    _found_list+=( "${_report_str}" );
  done <<< "${_app_id_str}";
  # . End Create report

  printf '%s\n' "${_found_list[@]}" > "${_output_file}";
}
## . END _auditMimeHandlerFn

# app_id|cmd_str;with;args|sniff_str|pkg_str|descr|repo_file;repo_url
# 0      1                 2         3       4         5
# 'kubectl|!|kubectl|kubectl|Kubernetes: Command Line Container Management'
#
# When sniff_str is empty (||), it is set to cmd_str without args
# Important! The cmd_str cannot match the sniff_str for handlers
#   (see kubectl as an example)
#
# TODO: Add 2024 Verified Repos File Names (see prior versions for examples)

## BEGIN _auditInstallFn {
#  Purpose: Extra check for user
#  Used by: package-main
#
_auditInstallFn () {
  declare _key_str _key_list _key;
  _key_str="$("${_mimeExe}" -l)";
  IFS=$'\n' read -r -d '\n' -a _key_list <<< "${_key_str}";

  for _key in "${_key_list[@]}"; do
    # Use this to limit tests to secial handlers
    # if ! grep -qE '^(docker|dropbox|jetbrains-toolbox|intellij|pycharm|webstorm|virtualbox|zoom)$' <<< "${_key}"; then continue; fi
    read -rp "Press return to test |${_key}| > ";
    "${_mimeExe}" -k "${_key}";
    _cm2EchoFn "\nPress return to proceed...\n";
  done
}

## BEGIN _runTestFn {
_runTestFn () {
  declare _check_str _return_int _reply;

  _return_int=0;
  _mimeExe="${_t00TopDir}/package-main/usr/lib/kfocus/";
  _mimeExe+='bin/kfocus-mime';

  # Use function from test harness: clear out run dir and check expect dir
  if ! _t00ClearRunDirFn;    then return 1; fi
  if ! _t00CheckExpectDirFn; then return 1; fi

  read -r -p 'Run EXTRA install check? (y/N) ' _reply;
  if [[ "${_reply:-}" =~ ^[Yy] ]]; then
    _auditInstallFn;
  fi

  _cm2EchoFn 'Launching backintime; You should not be asked to '
  _cm2EchoFn '  confirm until it is closed.';
  "${_mimeExe}" -kf 'backintime';

  _cm2EchoFn '\n\n=====================================';
  read -r -p 'Does launching backintime block? [y/N] ' _reply;
  if [[ "${_reply:-n}" =~ ^[Yy] ]]; then
    _cm2EchoFn 'ok  : User reports -kf does block backintime launch';
  else
    _cm2EchoFn 'fail: User reports -kf does NOT block backintime launch';
    _return_int=1;
  fi

  _cm2EchoFn 'Launching kfocus-power with a url "kfocus-mime://kfocus_power"';
  "${_mimeExe}" 'kfocus-mime://kfocus_power';
  sleep 1;
  _cm2EchoFn '\n\n=====================================';
  read -r -p 'Did kfocus-power launch? [y/N] ' _reply;
  if [[ "${_reply:-n}" =~ ^[Yy] ]]; then
    _cm2EchoFn 'ok  : User reports kfocus-power launches';
  else
    _cm2EchoFn 'fail: User reports kfoucs-power launches';
    _return_int=1;
  fi

  _auditMimeHandlerFn;
  _check_str="$(diff -r --brief "${_t00ExpectDir}" "${_t00RunDir}" )";

  if [ -n "${_check_str}" ]; then
    _cm2EchoFn "fail: ${_check_str}";
    meld "${_t00ExpectDir}" "${_t00RunDir}";
    _return_int=1;
  else
    _cm2EchoFn 'ok  : Results match expected';
  fi
  return "${_return_int}";
}
## . END _runTestFn }
