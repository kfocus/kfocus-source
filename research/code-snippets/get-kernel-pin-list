#!/bin/bash

# Create list of kernel packages to hold given top-level kernel package name
_echoPurgeListStrFn () {
  declare _pkg_name _skip_list _purge_list;
  _skip_list=();
  _purge_list=();

  for _pkg_name in "${_foundPkgList[@]}"; do
    if grep -q "${_pkg_name}" <<< "${_preInstallPkgStr}"; then
      _skip_list+=( "${_pkg_name}" );
      continue;
    fi
    _purge_list+=( "${_pkg_name}" );
  done
  echo "${_purge_list[*]}" |sort -u
}

# Get list of all recommended packages
_echoPkgRecDepsFn () {
  apt-cache depends "${1}" | grep -P '^\s*\|*(Recommends|Depends|Pre-Depends)' \
    | grep -v '<' | awk '{print $2}';
}

# Follow all unique depends of parent package
_loadKfPkgListFn () {
  declare _start_idx _processed_list _safety_int _pkg_count _idx _pkg_name \
    _add_list _clean_list _chk_name _last_count;
  _start_idx=0;
  for _safety_int in {0..3}; do
    _pkg_count="${#_foundPkgList[@]}";
    for (( _idx="${_start_idx}";_idx < _pkg_count;_idx++)); do
      _pkg_name="${_foundPkgList[${_idx}]}";
      # shellcheck disable=SC2076
      if [[ " ${_processed_list[*]} " =~ " ${_pkg_name} " ]]; then
        # echo "Outer: Already processed |${_pkg_name}|";
        continue;
      fi

      mapfile -t _add_list < <(_echoPkgRecDepsFn "${_pkg_name}");
      _clean_list=();
      for _chk_name in "${_add_list[@]}"; do
        # Skip the pkg_name if already in the processed or clean list
        # shellcheck disable=SC2076
        if [[ " ${_processed_list[*]} " =~ " ${_chk_name} " ]] \
          || [[ " ${_foundPkgList[*]} " =~ " ${_chk_name} " ]]; then
          # echo "Inner: Already processed |${_pkg_name}|";
          continue;
        fi
        _clean_list+=( "${_chk_name}" );
      done
      if [[ "${#_clean_list[@]}" -gt 0 ]]; then
        _foundPkgList+=("${_clean_list[@]}");
      fi

      _processed_list+=( "${_pkg_name}" );
    done
    _last_count="${#_foundPkgList[@]}";
    # echo "_idx: ${_idx} _last_count: ${_last_count} _pkg_count: ${_pkg_count}";
    if (( _last_count <= _pkg_count )); then
      break;
    else
      _start_idx="${_idx}";
    fi
  done

}

declare _foundPkgList;
_foundPkgList=( linux-generic-hwe-22.04-kfocus );

_loadKfPkgListFn;
( IFS=$'\n';
  echo "${_foundPkgList[*]}" | grep ^linux \
    | grep -vE 'linux-base|linux-firmware';
);

